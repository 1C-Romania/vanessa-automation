//начало текста модуля
&НаКлиенте
Перем юТест;
&НаКлиенте
Перем МаксКоличествоСекундПодключения,ТекКоличествоСекундПодключения;

&НаКлиенте
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	юТест = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ЯРаботаюВСеансеЗапущенногоСКлючомTESTMANAGER()","ЯРаботаюВСеансеЗапущенногоСКлючомTESTMANAGER","Я работаю в сеансе, запущенного с ключом TESTMANAGER");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯСворачиваюВсеОкна()","ЯСворачиваюВсеОкна","я сворачиваю все окна");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапускаюСеанс1ССКлючомTESTCLIENT()","ЯЗапускаюСеанс1ССКлючомTESTCLIENT","Я запускаю сеанс 1С с ключом TESTCLIENT");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюСоединениеССеансомTESTCLIENT()","ЯУстанавливаюСоединениеССеансомTESTCLIENT","я устанавливаю соединение с сеансом TESTCLIENT");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯАктивизируюГлавноеОкноСеансаTESTCLIENT()","ЯАктивизируюГлавноеОкноСеансаTESTCLIENT","я активизирую главное окно сеанса TESTCLIENT");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВПеременнойКонтекстПоявилосьЗначениеГлавноеОкноТестируемого()","ВПеременнойКонтекстПоявилосьЗначениеГлавноеОкноТестируемого","в переменной Контекст появилось значение ГлавноеОкноТестируемого");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗакрываюСеансTESTCLIENT()","ЯЗакрываюСеансTESTCLIENT","я закрываю сеанс TESTCLIENT");

	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры


&НаКлиенте
//Я работаю в сеансе, запущенного с ключом TESTMANAGER
//@ЯРаботаюВСеансеЗапущенногоСКлючомTESTMANAGER()
Процедура ЯРаботаюВСеансеЗапущенногоСКлючомTESTMANAGER() Экспорт
	Попытка
		ТипЗначения = Тип("ТестируемоеПриложение");
	Исключение
		ВызватьИсключение "Хост сеанс надо запустить с ключом /TESTMANAGER.";
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
//я сворачиваю все окна
//@ЯСворачиваюВсеОкна()
Процедура ЯСворачиваюВсеОкна() Экспорт
	СисИнфо = Новый СистемнаяИнформация; 
	Если (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86) или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64) Тогда
		Оболочка = Новый COMОбъект("Shell.Application");
		Оболочка.MinimizeAll();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//Я запускаю сеанс 1С с ключом TESTCLIENT
//@ЯЗапускаюСеанс1ССКлючомTESTCLIENT()
Процедура ЯЗапускаюСеанс1ССКлючомTESTCLIENT() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация; 
	
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	//Сообщить("ВерсияПриложения="+ВерсияПриложения);
	ПутьК1С = "C:\Program Files (x86)\1cv8\" + ВерсияПриложения + "\bin\1cv8c.exe";
	ФайлПроверкаСуществования = Новый Файл(ПутьК1С);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		ВызватьИсключение "Не нашел путь к 1cv8c.exe: " + ПутьК1С;
		Возврат;
	КонецЕсли;	 
	
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	КаталогБазы = СтрЗаменить(КаталогБазы,"File=","");
	КаталогБазы = СтрЗаменить(КаталогБазы,";","");
	//Сообщить("СтрокаСоединенияИнформационнойБазы="+СтрокаСоединенияИнформационнойБазы);
	
	СтрокаЗапуска = """" + ПутьК1С + """ ENTERPRISE /F" + КаталогБазы + " /TESTCLIENT /RunModeManagedApplication";
	//Сообщить("СтрокаЗапуска="+СтрокаЗапуска);

	ЗапуститьСистему(СтрокаЗапуска);
	
	ТипЗначения = Тип("ТестируемоеПриложение");
	ПараметрыОбъекта = Новый Массив;
	ПараметрыОбъекта.Добавить("localhost");
	ТестируемоеПриложение = Новый (ТипЗначения,ПараметрыОбъекта);
	
	Контекст.Вставить("ТестируемоеПриложение",ТестируемоеПриложение);
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСоединениеССеансомTESTCLIENT()
	юТест.ПосмотретьЗначение(Контекст);
	ТестируемоеПриложение = Контекст.ТестируемоеПриложение;
	
	ТекКоличествоСекундПодключения = ТекКоличествоСекундПодключения + 1;
	Сообщить("ТекКоличествоСекундПодключения=" + ТекКоличествоСекундПодключения);
	
	Попытка
		ТестируемоеПриложение.УстановитьСоединение();
		ОтключитьОбработчикОжидания("УстановитьСоединениеССеансомTESTCLIENT");
		Сообщить("Подключились к сеансу TESTCLIENT!!!");
		юТест.ПродолжитьВыполнениеШагов();
		
		Возврат;
	Исключение
		Сообщить("" + ОписаниеОшибки());
	КонецПопытки;
	
	Если ТекКоличествоСекундПодключения >= МаксКоличествоСекундПодключения Тогда
		ОтключитьОбработчикОжидания("УстановитьСоединениеССеансомTESTCLIENT");
		юТест.ПродолжитьВыполнениеШагов();
	КонецЕсли;	 
	
КонецПроцедуры


&НаКлиенте
//я устанавливаю соединение с сеансом TESTCLIENT
//@ЯУстанавливаюСоединениеССеансомTESTCLIENT()
Процедура ЯУстанавливаюСоединениеССеансомTESTCLIENT() Экспорт
	юТест.ЗапретитьВыполнениеШагов();
	
	МаксКоличествоСекундПодключения = 10;
	ТекКоличествоСекундПодключения  = 0;
	
	ПодключитьОбработчикОжидания("УстановитьСоединениеССеансомTESTCLIENT",1);
	
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьГлавноеОкноТестируемогоПриложения()
	
	ТестируемоеПриложение = Контекст.ТестируемоеПриложение;
	
	ТекКоличествоСекундПодключения = ТекКоличествоСекундПодключения + 1;
	Сообщить("ТекКоличествоСекундПодключения=" + ТекКоличествоСекундПодключения);
	
	Если ТекКоличествоСекундПодключения >= МаксКоличествоСекундПодключения Тогда
		ОтключитьОбработчикОжидания("ПолучитьГлавноеОкноТестируемогоПриложения");
		Сообщить("Не смог ПолучитьГлавноеОкноТестируемогоПриложения!");
		юТест.ПродолжитьВыполнениеШагов();
	КонецЕсли;	 
	
	
	Попытка
		ГлавноеОкноТестируемого = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"));
		ГлавноеОкноТестируемого.Активизировать();
		ОтключитьОбработчикОжидания("ПолучитьГлавноеОкноТестируемогоПриложения");
		Контекст.Вставить("ГлавноеОкноТестируемого",ГлавноеОкноТестируемого);
		юТест.ПродолжитьВыполнениеШагов();
	Исключение
		Сообщить("" + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
//я активизирую главное окно сеанса TESTCLIENT
//@ЯАктивизируюГлавноеОкноСеансаTESTCLIENT()
Процедура ЯАктивизируюГлавноеОкноСеансаTESTCLIENT() Экспорт
	
	ТестируемоеПриложение = Контекст.ТестируемоеПриложение;
	ГлавноеОкноТестируемого = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),,,10);
	ГлавноеОкноТестируемого.Активизировать();
	
	Контекст.Вставить("ГлавноеОкноТестируемого",ГлавноеОкноТестируемого);
	
	//юТест.ЗапретитьВыполнениеШагов();
	//ТекКоличествоСекундПодключения  = 0;
	//МаксКоличествоСекундПодключения = 10;
	//ПодключитьОбработчикОжидания("ПолучитьГлавноеОкноТестируемогоПриложения",1);

	
	//ТестируемоеПриложение = Контекст.ТестируемоеПриложение;
	//
	//АктивноеОкно = ТестируемоеПриложение.ПолучитьАктивноеОкно();
	//Сообщить("АктивноеОкно=" + АктивноеОкно);
	//ГлавноеОкноТестируемого = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	//ГлавноеОкноТестируемого.Активизировать();
КонецПроцедуры


&НаКлиенте
//в переменной Контекст появилось значение ГлавноеОкноТестируемого
//@ВПеременнойКонтекстПоявилосьЗначениеГлавноеОкноТестируемого()
Процедура ВПеременнойКонтекстПоявилосьЗначениеГлавноеОкноТестируемого() Экспорт
	юТест.ПроверитьРавенство(Контекст.Свойство("ГлавноеОкноТестируемого"),Истина,"В контексте есть ГлавноеОкноТестируемого.");
КонецПроцедуры


&НаКлиенте
//я закрываю сеанс TESTCLIENT
//@ЯЗакрываюСеансTESTCLIENT()
Процедура ЯЗакрываюСеансTESTCLIENT() Экспорт
	Контекст.ГлавноеОкноТестируемого.Закрыть();
КонецПроцедуры

//окончание текста модуля
