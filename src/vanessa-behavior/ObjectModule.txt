Функция Это_step_matches_name_to_match(Знач Стр,Рез) Экспорт
	//СтрПоиска = "[""step_matches"",{";
	СтрПоиска = "[""step_matches"",{""name_to_match"":""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Рез1 = СокрЛП(Сред(Стр,СтрДлина(СтрПоиска)+1));
		//Сообщить("Рез1="+Рез1);
		Рез = Лев(Рез1,СтрДлина(Рез1)-3);
		//Сообщить("Рез="+Рез);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции


Функция ДобавитьПараметрStepDefinition(Знач Стр,КолПараметров) Экспорт
	КолПараметровСтр = СокрЛП(КолПараметров);
	Если СтрДлина(КолПараметровСтр) = 1 Тогда
		КолПараметровСтр = "0" + КолПараметровСтр;
	КонецЕсли;
	
	Стр = СтрЗаменить(Стр,"<Параметр","<Парам" + КолПараметровСтр) + ",";
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	
	Возврат Стр;
КонецФункции

Функция СоздатьПустуюСтруктуруEpf() Экспорт
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи","");
	Стр.Вставить("ИмяФайлаEpf","");
	Стр.Вставить("ВременноеИмяМодуля","");
	Стр.Вставить("ТелоМодуля","");//таблица значений
	Стр.Вставить("ИмяМодуляEpf","");
	Стр.Вставить("КаталогИсходников","");
	
	
	Возврат Стр;
КонецФункции

Функция НайтиФичуВМассиве(Стр,МассивДляСозданияEpf) Экспорт
	Для Каждого Элем Из МассивДляСозданияEpf Цикл
		Если Элем.ИмяФичи = Стр Тогда
			Возврат Элем;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции





Функция СформироватьОписаниеОшибки(Знач Стр,ИмяФайла,ИмяПроцедуры) Экспорт
	Стр = СтрЗаменить(Стр,Символы.ПС,"");
	Стр = СтрЗаменить(Стр,Символы.ВК,"");
	
	СтрПоиска = "Рефлектор.ВызватьМетод(СтрТабицаКонтекстовОбработок.Обработка, ИмяПроцедуры, МассивАргументов);";
	Поз = Найти(Стр,СтрПоиска);
	Если Поз > 0 Тогда
		ПромСтр = Сред(Стр,Поз + СтрДлина(СтрПоиска));
		Если ПромСтр <> "" Тогда
			Стр = ПромСтр;
		КонецЕсли;
	КонецЕсли;
	
	Поз1 = Найти(Стр,"Метод объекта не обнаружен");
	Если Поз1 > 0 Тогда
		Стр = Сред(Стр,Поз1);
		Поз2 = Найти(Стр,")");
		Стр = Лев(Стр,Поз2);
	КонецЕсли;
	//Стр = СтрЗаменить(Стр,СтрПоиска,"");
	
	Стр = Стр + "; ИмяФайла="+СтрЗаменить(ИмяФайла,"\","\\") + ", ИмяПроцедуры="+ИмяПроцедуры;
	//Возврат ПерекодировкаДляОтправкиОшибки(Стр);
	Возврат Стр;
КонецФункции



Функция ПреобразоватьКДатеСтроку(Знач Стр) Экспорт
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр,".");
	День = Число(Лев(Стр,Поз-1));
	Стр = Сред(Стр,Поз+1);
	
	Поз   = Найти(Стр,".");
	Месяц = Число(Лев(Стр,Поз-1));
	Стр   = Сред(Стр,Поз+1);
	
	Год   = Число(Стр);
	Если Год < 100 Тогда
		Год = Год + 2000;
	КонецЕсли;
	
	Зн = Дата(Год,Месяц,День);
	
	Зн = Формат(Зн,"ДФ=yyyyMMdd");
	Зн = "'" + Зн + "'";
	
	Сообщить("" + НачСтр + " было преобразовано к " + Зн);
	Возврат Зн;
КонецФункции



Функция РазобратьСтрокуЗначенийПараметров(Знач Стр,ПараметрыСвойства) Экспорт
	Массив = Новый Массив;
	
	Если Лев(Стр,1) = "[" Тогда
		Стр = Сред(Стр,2);
	КонецЕсли;
	Если Прав(Стр,1) = "]" Тогда
		Стр = Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;
	//Сообщить("Стр="+Стр);
	
	
	ИдПараметра = 0;
	
	Пока Истина Цикл
		Поз1 = Найти(Стр, """{");
		Если Поз1 = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Поз2 = Найти(Стр, "}""");
		Если Поз2 = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Зн = Сред(Стр,Поз1+2,Поз2-Поз1-2);
		//Сообщить("Зн="+Зн);
		Тип = ПараметрыСвойства[ИдПараметра].Тип;
		//Сообщить("Тип="+Тип + ", ИдПараметра=" + ИдПараметра);
		
		Стр = Сред(Стр,Поз2+1+2);
		//Сообщить("Новая Стр="+Стр);
		//Прервать;
		
		
		Если Тип = "Число" Тогда
			Попытка
				//Зн = Число(Зн);
			Исключение
				ВызватьИсключение ("Не смог преобразовать к числу. Значение="+Зн + ", СтрокаПараметров="+Стр);
			КонецПопытки;
		КонецЕсли;
		
		Если Тип = "Дата" Тогда
			Попытка
				Зн = ПреобразоватьКДатеСтроку(Зн);
			Исключение
				ВызватьИсключение ("Не смог преобразовать к дате. Значение="+Зн + ", СтрокаПараметров="+Стр);
			КонецПопытки;
		КонецЕсли;
		
		
		Если Тип = "Строка" Тогда
			Зн = """" + Зн + """"; //добавим кавычки
		КонецЕсли;
		
		Массив.Добавить(Зн);
		ИдПараметра = ИдПараметра + 1;
	КонецЦикла;
	
	Возврат Массив;
КонецФункции


Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


Функция УбратьКаталогПроекта(Знач Стр,КаталогПроекта) Экспорт
	Поз = Найти(Стр,КаталогПроекта);
	Если Поз = 0 Тогда
		ПрерватьВыполнениеСкрипта("Не нашел каталог проекта (" + КаталогПроекта + ") в пути к файлу фичи " + Стр);
		Возврат "";
	КонецЕсли;
	
	Рез = СокрЛП(СтрЗаменить(Стр,КаталогПроекта,""));
	Если Прав(Рез,1) = "\" Тогда
		Рез = Лев(Рез,СтрДлина(Рез)-1);
	КонецЕсли;
	//Рез = СтрЗаменить(Рез,"\\","\");
	//Сообщить("Рез=" + Рез);
	Возврат Рез;
КонецФункции

Процедура ПрерватьВыполнениеСкрипта(ТекстИсключения) Экспорт
	ВызватьИсключение(ТекстИсключения);
КонецПроцедуры

Функция ПолучитьКаталогФич(КаталогПроекта,КаталогФич) Экспорт
	Если СокрЛП(КаталогФич) = "" Тогда
		Возврат КаталогПроекта + "\features";
	КонецЕсли;	 
	
	Возврат КаталогФич;
КонецФункции // ()


Функция ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля)
	Если ТелоМодуля.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТелоМодуля[ТелоМодуля.Количество()-1].НомСтр;
КонецФункции

Процедура ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,Стр)
	НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	
	СтрТелоМодуля = ТелоМодуля.Добавить();
	СтрТелоМодуля.НомСтр = НомСтр + ШагСтрокДляМодуля;
	СтрТелоМодуля.Стр    = Стр;
	
	
	//Сообщить("ТелоМодуля.Количество()=" + ТелоМодуля.Количество());
КонецПроцедуры

Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Ложь) Экспорт
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	
	//ДобавитьСтрокуВМодуль(ТелоМодуля,"Перем Контекст Экспорт;");
	
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ПередНачаломСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ПередОкончаниемСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры


Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Ложь) Экспорт 
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	ТелоМодуля.Сортировать("НомСтр");
	
	УжеЕсть = Ложь;
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = СокрЛП(СтрТелоМодуля.Стр);
		Если Лев(Стр,3) = "//@" Тогда //так определяется StepDefinition
			Если Найти(Стр,StepDefinition) > 0 Тогда
				УжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеЕсть Тогда
		Возврат;
	КонецЕсли;
	
	//НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	//Возврат;
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//" + ПримерИспользованияПроцедуры);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//@" + StepDefinition);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура " + StepDefinition + " Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ВызватьИсключение ""Не реализовано."";");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	Если ЭтоУФ Тогда
		//ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
		СтруктураОписанияEpf.ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры


Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition) Экспорт
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
	StepDefinition = СтрЗаменить(StepDefinition,"-","_");
	StepDefinition = СтрЗаменить(StepDefinition,"+","");
КонецПроцедуры


Функция ПолучитьВерсиюОбработки() Экспорт
	Возврат "vanessa-behavior ver 0.607";	
КонецФункции
