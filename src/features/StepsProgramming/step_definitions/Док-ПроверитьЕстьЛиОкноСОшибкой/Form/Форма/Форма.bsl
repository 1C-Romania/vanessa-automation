//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯДобавляюВСлужебныеФайлыАвтоинструкции(Парам01)","ЯДобавляюВСлужебныеФайлыАвтоинструкции","Дано я добавляю в служебные файлы автоинструкции ""Support\Instructions\Temp\ФичаСВызывающаяОшибку.feature""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУбедилсяЧтоСлужебныеФайлыФичиУдалены()","ЯУбедилсяЧтоСлужебныеФайлыФичиУдалены","Дано я убедился, что служебные файлы фичи удалены");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"Ываываываыва()","Ываываываыва","И ываываываыва");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Дано я добавляю в служебные файлы автоинструкции "Support\Instructions\Temp\ФичаСВызывающаяОшибку.feature"
//@ЯДобавляюВСлужебныеФайлыАвтоинструкции(Парам01)
Процедура ЯДобавляюВСлужебныеФайлыАвтоинструкции(ЧастьПути) Экспорт
	Если Не Контекст.Свойство("МассивСлужебныхФайловФичи") Тогда
		Контекст.Вставить("МассивСлужебныхФайловФичи",Новый Массив);
	КонецЕсли;	 
	
	МассивСлужебныхФайловФичи = Контекст.МассивСлужебныхФайловФичи;
	МассивСлужебныхФайловФичи.Добавить(Ванесса.Объект.КаталогИнструментов + "\features\" + ЧастьПути);
	
КонецПроцедуры

&НаКлиенте
//Дано я убедился, что служебные файлы фичи удалены
//@ЯУбедилсяЧтоСлужебныеФайлыФичиУдалены()
Процедура ЯУбедилсяЧтоСлужебныеФайлыФичиУдалены() Экспорт
	Если Контекст.Свойство("МассивСлужебныхФайловФичи") Тогда
		Для Каждого ИмяФайла Из Контекст.МассивСлужебныхФайловФичи Цикл
			Ванесса.УдалитьФайлыКомандаСистемы(ИмяФайла);
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
//И ываываываыва
//@Ываываываыва()
Процедура Ываываываыва() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//окончание текста модуля