//начало текста модуля
&НаКлиенте
Перем юТест;
&НаКлиенте
Перем МаксКоличествоСекундПодключения,ТекКоличествоСекундПодключения;

&НаКлиенте
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	юТест = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьКонфигурация(Парам01)","ЕстьКонфигурация","есть Конфигурация 'Бухгалтерия 3.0 (Такси)'");
	ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапускаюСеанс1ССКлючомTestClient()","ЯЗапускаюСеанс1ССКлючомTestClient","я запускаю сеанс 1С с ключом TestClient");
	ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетКонтрагент(Парам01)","СуществуетКонтрагент","существует Контрагент 'тестовый Контрагент'");
	ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДоговорСДатойДоговора(Парам01,Парам02)","СуществуетДоговорСДатойДоговора","существует договор 'тестовый договор Контрагента 1' с датой договора 01.01.2014");
	ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетУслуга(Парам01)","СуществуетУслуга","существует услуга 'тестовая услуга 1'");
	ДобавитьШагВМассивТестов(ВсеТесты,"СуществуетДокументОтПоКонтрагентуПоДоговоруПоУслугеНаСуммуРуб(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06)","СуществуетДокументОтПоКонтрагентуПоДоговоруПоУслугеНаСуммуРуб","существует Документ 'РеализацияТоваровИУслуг1' от 01.01.2014  по контрагенту 'тестовый Контрагент' по договору 'тестовый договор Контрагента 1' по услуге 'тестовая услуга 1' на сумму 1000 руб.");
	ДобавитьШагВМассивТестов(ВсеТесты,"ВведенаУчетнаяПолитика()","ВведенаУчетнаяПолитика","Введена учетная политика");
	ДобавитьШагВМассивТестов(ВсеТесты,"ХочетОплатитьСуммуРуб(Парам01,Парам02)","ХочетОплатитьСуммуРуб","'тестовый Контрагент' хочет оплатить сумму 1100 руб.");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФиксируетсяОплатаПоПоДоговоруНаСуммуРублей(Парам01,Парам02,Парам03)","ФиксируетсяОплатаПоПоДоговоруНаСуммуРублей","фиксируется оплата по  'тестовый Контрагент' по договору 'тестовый договор Контрагента 1'  на сумму 1100 рублей");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормируетсяПроводкаПоСчетуНаСумму1000ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04)","ФормируетсяПроводкаПоСчетуНаСумму1000ГдеЗаполненоКакДокументОт","формируется проводка по счету '62.01' на сумму 1000, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг1' от 01.01.2014");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормируетсяПроводкаПоСчетуНаСумму100ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04)","ФормируетсяПроводкаПоСчетуНаСумму100ГдеЗаполненоКакДокументОт","формируется проводка по счету '62.01' на сумму 100, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг2' от 02.01.2014");
	ДобавитьШагВМассивТестов(ВсеТесты,"НаСчетеОстаетсяДолгВРазмереРублейПоДокументОт(Парам01,Парам02,Парам03,Парам04,Парам05)","НаСчетеОстаетсяДолгВРазмереРублейПоДокументОт","на счете '62.01'  остается долг в размере 200 рублей по 'субконто3' Документ 'РеализацияТоваровИУслуг2' от 02.01.2014");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормируетсяПроводкаПоСчетуНаСумму300ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04)","ФормируетсяПроводкаПоСчетуНаСумму300ГдеЗаполненоКакДокументОт","формируется проводка по счету '62.01' на сумму 300, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг2' от 02.01.2014");
	ДобавитьШагВМассивТестов(ВсеТесты,"ФормируетсяПроводкаАвансаПоСчетуНаСумму700ГдеЗаполненоКакСамДокументПоступленияОплаты(Парам01,Парам02)","ФормируетсяПроводкаАвансаПоСчетуНаСумму700ГдеЗаполненоКакСамДокументПоступленияОплаты","формируется проводка аванса по счету '62.02' на сумму 700, где 'субконто3' заполнено как сам документ поступления оплаты");

	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



&НаКлиенте
Процедура Подождать(Парам = 800)
	
	ПромДат = ТекущаяУниверсальнаяДатаВМиллисекундах() + Парам;
	//ПромДат = ТекущаяДата() + Парам;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ПромДат Цикл
		Продолжить;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//есть Конфигурация 'Бухгалтерия 3.0 (Такси)'
//@ЕстьКонфигурация(Парам01)
Процедура ЕстьКонфигурация(ИмяКонфигурации) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоединениеССеансомTESTCLIENT()
	//юТест.ПосмотретьЗначение(Контекст);
	ТестируемоеПриложение = КонтекстСохраняемый.ТестируемоеПриложение;
	
	ТекКоличествоСекундПодключения = ТекКоличествоСекундПодключения + 1;
	//Сообщить("ТекКоличествоСекундПодключения=" + ТекКоличествоСекундПодключения);
	
	Попытка
		ТестируемоеПриложение.УстановитьСоединение();
		ОтключитьОбработчикОжидания("УстановитьСоединениеССеансомTESTCLIENT");
		Сообщить("Подключились к сеансу TESTCLIENT!!!");
		
		Сообщить("Ищу главное окно.");
		
		//ГлавноеОкноТестКлиента = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),"*Демонстрационная база*",,30);
		
		
		ОкноПриложенияОсновное = Неопределено;
		КлиентсткиеОкнаТестируемогоПриложения = ТестируемоеПриложение.ПолучитьПодчиненныеОбъекты();
		Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
			Если ТестируемоеОкно.Основное Тогда
				ОкноПриложенияОсновное = ТестируемоеОкно;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		ГлавноеОкноТестКлиента = ОкноПриложенияОсновное;
		
		Сообщить("ТипЗнч ГлавноеОкноТестКлиента= " + ТипЗнч(ГлавноеОкноТестКлиента));
		
		Сообщить("Пытаюсь активизировать гланое окно.");
		ГлавноеОкноТестКлиента.Активизировать();
		КонтекстСохраняемый.Вставить("ГлавноеОкноТестКлиента",ГлавноеОкноТестКлиента);
		
		
		
		юТест.ПродолжитьВыполнениеШагов();
		
		Возврат;
	Исключение
		Сообщить("" + ОписаниеОшибки());
	КонецПопытки;
	
	Если ТекКоличествоСекундПодключения >= МаксКоличествоСекундПодключения Тогда
		ОтключитьОбработчикОжидания("УстановитьСоединениеССеансомTESTCLIENT");
		юТест.ПродолжитьВыполнениеШагов();
	КонецЕсли;	 
	
КонецПроцедуры


&НаКлиенте
//я запускаю сеанс 1С с ключом TestClient
//@ЯЗапускаюСеанс1ССКлючомTestClient()
Процедура ЯЗапускаюСеанс1ССКлючомTestClient() Экспорт
	Если КонтекстСохраняемый.Свойство("ТестируемоеПриложение") Тогда
		Возврат;
	КонецЕсли;	 
	
	
	СисИнфо = Новый СистемнаяИнформация; 
	
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	//Сообщить("ВерсияПриложения="+ВерсияПриложения);
	ПутьК1С = "C:\Program Files (x86)\1cv8\" + ВерсияПриложения + "\bin\1cv8.exe";
	ФайлПроверкаСуществования = Новый Файл(ПутьК1С);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		ВызватьИсключение "Не нашел путь к 1cv8c.exe: " + ПутьК1С;
		Возврат;
	КонецЕсли;	 
	
	КаталогБазы = СтрокаСоединенияИнформационнойБазы();
	КаталогБазы = СтрЗаменить(КаталогБазы,"File=","");
	КаталогБазы = СтрЗаменить(КаталогБазы,";","");
	//Сообщить("СтрокаСоединенияИнформационнойБазы="+СтрокаСоединенияИнформационнойБазы);
	
	СтрокаЗапуска = """" + ПутьК1С + """ ENTERPRISE /F" + КаталогБазы  +  "/N""Абдулов (директор)""" + " /TESTCLIENT /RunModeManagedApplication";
	
	Сообщить("СтрокаЗапуска="+СтрокаЗапуска);

	ЗапуститьСистему(СтрокаЗапуска);
	
	ТипЗначения = Тип("ТестируемоеПриложение");
	ПараметрыОбъекта = Новый Массив;
	ПараметрыОбъекта.Добавить("localhost");
	ТестируемоеПриложение = Новый (ТипЗначения,ПараметрыОбъекта);
	
	КонтекстСохраняемый.Вставить("ТестируемоеПриложение",ТестируемоеПриложение);
	
	
	
	юТест.ЗапретитьВыполнениеШагов();
	
	МаксКоличествоСекундПодключения = 20;
	ТекКоличествоСекундПодключения  = 0;
	
	
	УстановитьСоединениеССеансомTESTCLIENT();
	//ПодключитьОбработчикОжидания("УстановитьСоединениеССеансомTESTCLIENT",1);
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВсехКонтрагентовСТакимИменемИИхДоговора(ИмяКонтрагента)
	
	ИмяПользователя = ИмяПользователя();
	Если ИмяПользователя <> "Абдулов (директор)" Тогда
		ВызватьИсключение "Сработала защита по имени пользователя";
	КонецЕсли;	 
	
	
	//удалим созданные предыдущими тестами договоры - начало
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", ИмяКонтрагента);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Сообщить("Удаляю договор " + ВыборкаДетальныеЗаписи.Ссылка.Наименование);
		ДоговорОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДоговорОбъект.Удалить();
	КонецЦикла;
	//удалим созданные предыдущими тестами договоры - конец
	
	
	
	
	//удалим созданные предыдущими тестами контрагентов - начало
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", ИмяКонтрагента);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Сообщить("Удаляю контрагента " + ВыборкаДетальныеЗаписи.Ссылка.Наименование);
		КонтрагентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.Удалить();
	КонецЦикла;
	//удалим созданные предыдущими тестами контрагентов - начало
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьДокументыОказанияУслуг(Наим)
	
	ИмяПользователя = ИмяПользователя();
	Если ИмяПользователя <> "Абдулов (директор)" Тогда
		ВызватьИсключение "Сработала защита по имени пользователя";
	КонецЕсли;	 
	
	//удалим созданные предыдущими тестами договоры - начало
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата >= &Дата";

	Запрос.УстановитьПараметр("Дата", '20140101');

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Сообщить("Удаляю договор " + ВыборкаДетальныеЗаписи.Ссылка.Наименование);
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	//удалим созданные предыдущими тестами договоры - конец
КонецПроцедуры


&НаКлиенте
//существует Контрагент 'тестовый Контрагент'
//@СуществуетКонтрагент(Парам01)
Процедура СуществуетКонтрагент(ИмяКонтрагента) Экспорт
	Если Контекст.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;	 
	
	УдалитьВсехКонтрагентовСТакимИменемИИхДоговора(ИмяКонтрагента);
	УдалитьДокументыОказанияУслуг(ИмяКонтрагента);
	
	
	
	
	ГлавноеОкноТестКлиента = КонтекстСохраняемый.ГлавноеОкноТестКлиента;
	ТестируемоеПриложение  = КонтекстСохраняемый.ТестируемоеПриложение;
	
	Подождать();
	ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/list/Справочник.Контрагенты");
	
	Подождать();
	ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/command/Справочник.Контрагенты.Команда.Создать");
	
	ФормаКонтрагента = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"), "Контрагент (создание)*");
	
	Подождать();
	Поле = ФормаКонтрагента.НайтиОбъект(Тип("ТестируемоеПолеФормы"), "Наименование");
	Поле.Активизировать();	
	
	Подождать();
	Поле.ВвестиТекст(ИмяКонтрагента);
	
	Подождать();
	КнопкаЗаписатьИЗакрыть = ФормаКонтрагента.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Записать");
	КнопкаЗаписатьИЗакрыть.Нажать();	
	
	Контекст.Вставить("Контрагент","");
КонецПроцедуры

&НаКлиенте
//существует договор 'тестовый договор Контрагента 1' с датой договора 01.01.2014
//@СуществуетДоговорСДатойДоговора(Парам01,Парам02)
Процедура СуществуетДоговорСДатойДоговора(Парам01,Парам02) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//существует услуга 'тестовая услуга 1'
//@СуществуетУслуга(Парам01)
Процедура СуществуетУслуга(Парам01) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//существует Документ 'РеализацияТоваровИУслуг1' от 01.01.2014  по контрагенту 'тестовый Контрагент' по договору 'тестовый договор Контрагента 1' по услуге 'тестовая услуга 1' на сумму 1000 руб.
//@СуществуетДокументОтПоКонтрагентуПоДоговоруПоУслугеНаСуммуРуб(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06)
Процедура СуществуетДокументОтПоКонтрагентуПоДоговоруПоУслугеНаСуммуРуб(Парам01,Парам02,Парам03,Парам04,Парам05,Парам06) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Введена учетная политика
//@ВведенаУчетнаяПолитика()
Процедура ВведенаУчетнаяПолитика() Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//'тестовый Контрагент' хочет оплатить сумму 1100 руб.
//@ХочетОплатитьСуммуРуб(Парам01,Парам02)
Процедура ХочетОплатитьСуммуРуб(Парам01,Парам02) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//фиксируется оплата по  'тестовый Контрагент' по договору 'тестовый договор Контрагента 1'  на сумму 1100 рублей
//@ФиксируетсяОплатаПоПоДоговоруНаСуммуРублей(Парам01,Парам02,Парам03)
Процедура ФиксируетсяОплатаПоПоДоговоруНаСуммуРублей(Парам01,Парам02,Парам03) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//формируется проводка по счету '62.01' на сумму 1000, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг1' от 01.01.2014
//@ФормируетсяПроводкаПоСчетуНаСумму1000ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04)
Процедура ФормируетсяПроводкаПоСчетуНаСумму1000ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//формируется проводка по счету '62.01' на сумму 100, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг2' от 02.01.2014
//@ФормируетсяПроводкаПоСчетуНаСумму100ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04)
Процедура ФормируетсяПроводкаПоСчетуНаСумму100ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//на счете '62.01'  остается долг в размере 200 рублей по 'субконто3' Документ 'РеализацияТоваровИУслуг2' от 02.01.2014
//@НаСчетеОстаетсяДолгВРазмереРублейПоДокументОт(Парам01,Парам02,Парам03,Парам04,Парам05)
Процедура НаСчетеОстаетсяДолгВРазмереРублейПоДокументОт(Парам01,Парам02,Парам03,Парам04,Парам05) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//формируется проводка по счету '62.01' на сумму 300, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг2' от 02.01.2014
//@ФормируетсяПроводкаПоСчетуНаСумму300ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04)
Процедура ФормируетсяПроводкаПоСчетуНаСумму300ГдеЗаполненоКакДокументОт(Парам01,Парам02,Парам03,Парам04) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//формируется проводка аванса по счету '62.02' на сумму 700, где 'субконто3' заполнено как сам документ поступления оплаты
//@ФормируетсяПроводкаАвансаПоСчетуНаСумму700ГдеЗаполненоКакСамДокументПоступленияОплаты(Парам01,Парам02)
Процедура ФормируетсяПроводкаАвансаПоСчетуНаСумму700ГдеЗаполненоКакСамДокументПоступленияОплаты(Парам01,Парам02) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры
