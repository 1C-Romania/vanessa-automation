//начало текста модуля
&НаКлиенте
Перем юТест;

&НаКлиенте
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	юТест = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ОжидаемыйПроверочныйФайлEpfУжеСуществует()","ОжидаемыйПроверочныйФайлEpfУжеСуществует","ожидаемый проверочный файл epf уже существует");
	ДобавитьШагВМассивТестов(ВсеТесты,"СгенерированныйПроверочныйEpfПрошелПроверкуНаКорректностьПослеПерегенерации()","СгенерированныйПроверочныйEpfПрошелПроверкуНаКорректностьПослеПерегенерации","сгенерированный проверочный epf прошел проверку на корректность после перегенерации");

	Возврат ВсеТесты;
КонецФункции

&НаКлиенте
Процедура ПередНачаломСценария() Экспорт
	ИмяОжидаемогоФайла = юТест.Объект.КаталогИнструментов + "\features\Support\Templates\step_definitions\ФичаДляПроверкиПерегенерацииEPFПроверка.epf";
	Контекст.Вставить("ИмяОжидаемогоФайла",ИмяОжидаемогоФайла);
	ФайлПроверкаСуществования = Новый Файл(ИмяОжидаемогоФайла);
	Если юТест.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла) Тогда
		юТест.УдалитьФайлыКомандаСистемы(ИмяОжидаемогоФайла);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПередОкончаниемСценария() Экспорт
	ИмяОжидаемогоФайла = Контекст.ИмяОжидаемогоФайла;
	ФайлПроверкаСуществования = Новый Файл(ИмяОжидаемогоФайла);
	Если юТест.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла) Тогда
		юТест.УдалитьФайлыКомандаСистемы(ИмяОжидаемогоФайла);
	КонецЕсли;	 
	
	//безусловное закрытие формы если она осталась
	Попытка
	    ОткрытаяФормаVanessaBehavoir = Контекст.ОткрытаяФормаVanessaBehavoir;
		ОткрытаяФормаVanessaBehavoir.Закрыть();
	Исключение
	
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектСервер.ПолучитьМакет(ИмяМакета);
	Возврат  Макет;
КонецФункции	

&НаКлиенте
//ожидаемый проверочный файл epf уже существует
//@ОжидаемыйПроверочныйФайлEpfУжеСуществует()
Процедура ОжидаемыйПроверочныйФайлEpfУжеСуществует() Экспорт
	ИмяОжидаемогоФайла = Контекст.ИмяОжидаемогоФайла;
	Контекст.Вставить("ИмяОжидаемогоФайла",ИмяОжидаемогоФайла);
	ФайлСуществует = юТест.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла);
	Если ФайлСуществует Тогда
		юТест.УдалитьФайлыКомандаСистемы(ИмяОжидаемогоФайла);
	КонецЕсли;	 
	
	ФайлСуществует = юТест.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла);
	юТест.ПроверитьНеРавенство(ФайлСуществует,Истина,"В этот момент Файл " + ИмяОжидаемогоФайла + " НЕ должен существовать.");
	
	КопияКонтекст = Контекст;
	Контекст      = "";
	
	Макет = ПолучитьМакетСервер("Макет");
	Макет.Записать(ИмяОжидаемогоФайла);
	
	Контекст = КопияКонтекст;
	
	ФайлСуществует = юТест.ФайлСуществуетКомандаСистемы(ИмяОжидаемогоФайла,"должен существовать после записи макета");
	юТест.ПроверитьРавенство(ФайлСуществует,Истина,"Файл " + ИмяОжидаемогоФайла + " должен существовать после записи макета.");
КонецПроцедуры


&НаКлиенте
//сгенерированный проверочный epf прошел проверку на корректность после перегенерации
//@СгенерированныйПроверочныйEpfПрошелПроверкуНаКорректностьПослеПерегенерации()
Процедура СгенерированныйПроверочныйEpfПрошелПроверкуНаКорректностьПослеПерегенерации() Экспорт
	ИмяОбработки = юТест.ПодключитьВнешнююОбработкуКлиент(Контекст.ИмяОжидаемогоФайла);
	ОбработкаПослеПерегенерации = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма",,,Истина);
	
	
	//должен был остаться этот шаг
	ОбработкаПослеПерегенерации.ТестоваяФункция();
КонецПроцедуры

//окончание текста модуля