Перем Сервер;
Перем Соединение;
//Перем КаталогИнструментов;
//Перем СтрокаПодключенияКБазе;
//Перем GenerateEpf;
//Перем TestRun;
//Перем DebugLog;
Перем ИмяТекущейФичи;
Перем МассивДляСозданияEpf;
Перем МассивНайденыхФич;
Перем ШагСтрокДляМодуля;
Перем ОшибкаВнутриОбработкиВызоваBDD;
Перем ОЛЕ;
Перем ОбъектКонтекст;
Перем ТаблицаИзвестныхStepDefinition;
Перем ТаблицаКонтекстовОбработок;


Перем Winsock;
Перем WinSocket1;
Перем СтримAdobe;

Перем RegExp;

Перем КолСекундПростоя;
Перем БылиОшибкиЗапускаКукумбера;
Перем МассивФайловФичДляГенерации;
Перем ТекущаяПозицияМассивФайловФичДляГенерации;
Перем СостояниеИдетГенерация;
Перем СостояниеИдетInvoke;
Перем ЭтоУФ;

Перем РезультатВыполненияСценария;


Процедура СделатьСообщение(Знач Сообщение) Экспорт
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение);
КонецПроцедуры

Процедура Отладка(Знач Сообщение) Экспорт
	Если DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры

Процедура Приостановить(Интервал)
	//Сообщить("Начало sleep...");
	НовЗнач = ТекущаяУниверсальнаяДатаВМиллисекундах() + Интервал;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < НовЗнач Цикл
		Продолжить;
	КонецЦикла; 
	//Сообщить("Окончание sleep...");
КонецПроцедуры


Функция ПерекодировкаДляОтправкиОшибки(Стр="",Кодировка="windows-1251") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="utf-8";
	СтримAdobe.Open();
	СтримAdobe.WriteText(Стр);
	СтримAdobe.Position=0;
	СтримAdobe.charset=Кодировка;
	Рез=СтримAdobe.ReadText(-1);
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


Функция Перекодировка(Стр="",Кодировка="utf-8") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="windows-1251";
	СтримAdobe.Open();
	Попытка
		СтримAdobe.WriteText(Стр);
		СтримAdobe.Position=0;
		СтримAdobe.charset=Кодировка;
		Рез=СтримAdobe.ReadText(-1);
	Исключение
		//перекодировка падает на invoke, видимо из-за разной кодировки строк
		Рез = Стр;
	КонецПопытки;
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


Процедура ТаймерДляГенерацииФич()
	Если СостояниеИдетГенерация Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Не СостояниеИдетГенерация Тогда
		СостояниеИдетГенерация = Истина;
	КонецЕсли;	 
	
	Если ТекущаяПозицияМассивФайловФичДляГенерации > МассивФайловФичДляГенерации.Количество()-1 Тогда
		//значит перебрали все фичи
		ОтключитьОбработчикОжидания("ТаймерДляГенерацииФич");
		СделатьСообщение("Все фичи обработаны!");
		Если ЗакрытьФормуПослеВыполненияОбработки Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;	 
		Возврат;
	КонецЕсли;	
	
	
	Если ТекущаяПозицияМассивФайловФичДляГенерации = 0 Тогда
		СделатьСообщение("Всего найдено фич " + МассивФайловФичДляГенерации.Количество());
	КонецЕсли;	 
	
	ФайлФичи       = МассивФайловФичДляГенерации[ТекущаяПозицияМассивФайловФичДляГенерации];
	ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
	СделатьСообщение("Работаю по фиче: " + ИмяТекущейФичи);
	
	МассивДляСозданияEpf = Новый Массив;
	//ОтносительныйКаталогФичи = СтрЗаменить(ФайлФичи.Путь,КаталогИнструментов,"");
	ОтносительныйКаталогФичи = ФайлФичи.Путь;
	Если Прав(ОтносительныйКаталогФичи,1) = "\" Тогда
		ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи,СтрДлина(ОтносительныйКаталогФичи)-1);
	КонецЕсли;	 
	
	Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
	СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи);
	
	ТекущаяПозицияМассивФайловФичДляГенерации = ТекущаяПозицияМассивФайловФичДляГенерации + 1;
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера,ФайлФичи.ПолноеИмя);
	Если БылиОшибкиЗапускаКукумбера Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	КонецЕсли;
	
КонецПроцедуры


Процедура СделатьGenerateEpf()
	ОтключитьОбработчикОжидания("ТаймерДляГенерацииФич");
	НачальныйКаталог = ПолучитьКаталогФич(КаталогИнструментов,КаталогФич);
	ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог);
	МассивФайловФичДляГенерации = Новый Массив;
	СостояниеИдетГенерация = Ложь;
	ТекущаяПозицияМассивФайловФичДляГенерации = 0;
	
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		БылиОшибкиЗапускаКукумбера = Ложь;
		МассивФайловФичДляГенерации.Добавить(Файл);
		ПодключитьОбработчикОжидания("ТаймерДляГенерацииФич",1);
		Возврат;
	КонецЕсли;
	
	МассивФайловФичДляГенерации = НайтиФайлы(НачальныйКаталог,"*.feature",Истина);
	ПодключитьОбработчикОжидания("ТаймерДляГенерацииФич",1);
	
	
КонецПроцедуры


Процедура СделатьTestRun()
	НачальныйКаталог = ПолучитьКаталогФич(КаталогИнструментов,КаталогФич);
	ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог);
	
	ПросканироватьИсходникиИНайтиВсеStepDefinition();
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера);
	Если БылиОшибкиЗапускаКукумбера Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	КонецЕсли;
	
	Если ОшибкаВнутриОбработкиВызоваBDD Тогда
		ПрерватьВыполнениеСкрипта("ОшибкаВнутриОбработкиВызоваBDD");
	КонецЕсли;
	
	
КонецПроцедуры


Процедура Инициализация()
	ИмяТекущейФичи       = "";
	МассивДляСозданияEpf = Новый Массив;
	МассивНайденыхФич    = Новый Массив;
	ШагСтрокДляМодуля    = 10000;
	
	ТаблицаИзвестныхStepDefinition = Новый ТаблицаЗначений;
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ИмяФайла");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ТаблицаПроцедур");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Id");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Параметры");
	
	ТаблицаКонтекстовОбработок = Новый ТаблицаЗначений;
	ТаблицаКонтекстовОбработок.Колонки.Добавить("ИмяФайла");
	ТаблицаКонтекстовОбработок.Колонки.Добавить("Обработка");
	
	ОшибкаВнутриОбработкиВызоваBDD = Ложь;
	
	АргументыКоманднойСтроки = Новый Массив;
	
	КолСекундПростоя = 0;
	
	СостояниеИдетInvoke    = Ложь;
	СостояниеИдетГенерация = Ложь;
	
КонецПроцедуры

Процедура ПроверитьВерсиюРуби()
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	СтрЗапуска = "Ruby -v > " + ИмяВременногоФайла;
	КомандаСистемы(СтрЗапуска);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайла,"UTF-8");
	
	Сообщить(" ");
	
	ВерсияПравильная = Истина;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		Если Найти(Стр,"2.0.0") = 0 Тогда
			ВерсияПравильная = Ложь;
		КонецЕсли;	 
		Если Найти(Стр,"mingw32") = 0 Тогда
			ВерсияПравильная = Ложь;
		КонецЕсли;	 
		
		//Сообщить(Стр);
	КонецЦикла;	
	
	Если Не ВерсияПравильная Тогда
		Сообщить("Ошибка версии Ruby. Должна быть установлена версия 2.0.0 x32!!!");
	КонецЕсли;	 
	
	Текст.Закрыть();
КонецПроцедуры


Процедура ВыполнитьОбработку() Экспорт
	ОчиститьСообщения();
	СделатьСообщение("Начало обработки.");
	
	ПроверитьВерсиюРуби();
		
	Если Прав(КаталогИнструментов,1) = "\" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов,СтрДлина(КаталогИнструментов)-1);
	КонецЕсли;	 
	Если Прав(КаталогФич,1) = "\" Тогда
		КаталогФич = Лев(КаталогФич,СтрДлина(КаталогФич)-1);
	КонецЕсли;	 
	
	Инициализация();
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	WinSocket1 = ЭлементыФормы.WinSocket;
	//Сообщить("WinSocket1.State = " + WinSocket1.State);
	Если WinSocket1.State = 8 Тогда
		WinSocket1.Close();
	КонецЕсли;	 
	
	
	Если TestRun и GenerateEpf Тогда
		ВызватьИсключение "Нельзя одновременно выполнять TestRun и GenerateEpf!";
	КонецЕсли;	 
	
	Если GenerateEpf Тогда
		СделатьСообщение("Запускаю генерацию epf.");
		СделатьGenerateEpf();
	КонецЕсли;	 
	
	
	Если TestRun Тогда
		СделатьСообщение("Запускаю тесты.");
		СделатьTestRun();
	КонецЕсли;	 
КонецПроцедуры


Процедура КнопкаВыполнитьНажатие(Кнопка) 
	ВыполнитьОбработку();
КонецПроцедуры

Процедура WinSocketError(Элемент, Number, Description, Scode, Source, HelpFile, HelpContext, CancelDisplay)
	Отладка(Description);
КонецПроцедуры

Процедура ТаймерОжиданияСеансаОбмена()
	КолСекундПростоя = КолСекундПростоя + 1;
	//Сообщить("КолСекундПростоя=" + КолСекундПростоя);
	
	//Если GenerateEpf Тогда
	//	Если КолСекундПростоя > 2 Тогда
	//		СостояниеИдетГенерация = Ложь;
	//	КонецЕсли;	 
	//КонецЕсли;	 
	
	Если GenerateEpf Тогда
		Если КолСекундПростоя >= 3 Тогда
			Если НЕ WinSocket1.State = 0 Тогда
				WinSocket1.Close()
			КонецЕсли;
			ОтключитьОбработчикОжидания("ТаймерОжиданияСеансаОбмена");
			СостояниеИдетГенерация = Ложь;
			
			СделатьСообщение("Обработка сообщений закончена.");
			КолСекундПростоя = 0;
			АнализЛогаКукумбера(КаталогИнструментов + "\CucumberConsolErr.txt",БылиОшибкиЗапускаКукумбера);
			Если Не БылиОшибкиЗапускаКукумбера Тогда
				БылиОшибки = Ложь;
				СоздатьФайлыОбработок(БылиОшибки);
				Если Не БылиОшибки Тогда
					СделатьСообщение("Ошибок при создании обработок не было.");
				Иначе	
					СделатьСообщение("Были ошибки при создании обработок.");
				КонецЕсли;	 
				Сообщить(" ");
			КонецЕсли;	 
			
			Если ЗакрытьФормуПослеВыполненияОбработки Тогда
				ЭтаФорма.Закрыть();
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если TestRun Тогда
		Если СостояниеИдетInvoke Тогда
			КолСек = 180;
		Иначе
			КолСек = 3;
		КонецЕсли;	 
		
		Если КолСекундПростоя >= КолСек Тогда
			Если НЕ WinSocket1.State = 0 Тогда
				WinSocket1.Close()
			КонецЕсли;
			Если СостояниеИдетInvoke Тогда
				СостояниеИдетInvoke = Ложь;
				СделатьСообщение("Не дождался окончания выполнения шага. Остановка обработки по таймауту.");
			КонецЕсли;	 
			
			ОтключитьОбработчикОжидания("ТаймерОжиданияСеансаОбмена");
			СделатьСообщение("Обработка сообщений закончена.");
			КолСекундПростоя = 0;
			БылиОшибкиЗапускаКукумбера = Ложь;
			АнализЛогаКукумбера(КаталогИнструментов + "\CucumberConsolErr.txt",БылиОшибкиЗапускаКукумбера);
			
			СделатьСообщение("Запуск тестов закончен.");
			
			Если Не БылиОшибкиЗапускаКукумбера Тогда
				ВывестиСообщениеИзЛогаКукумбераОПрохожденииТестов(КаталогИнструментов + "\CucumberConsoleLog.txt");
			КонецЕсли;	 
			
			Если ЗакрытьФормуПослеВыполненияОбработки Тогда
				ЭтаФорма.Закрыть();
			КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;	 
	//Сообщить("КолСекундПростоя = " + КолСекундПростоя);
КонецПроцедуры

Процедура ВывестиСообщениеИзЛогаКукумбераОПрохожденииТестов(ИмяФайла)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Сообщить(" ");
	СделатьСообщение("Вывод реузльта прохождения тестов:");
	
	НадоПродложить = Истина;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Лев(СокрЛП(Стр),1) = "#" Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Если Найти(Стр,"scenario") > 0 Тогда
			НадоПродложить = Ложь;
		КонецЕсли;	 
		
		Если НадоПродложить Тогда
			Продолжить;
		КонецЕсли;	 
		
		Сообщить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
КонецПроцедуры



Процедура WinSocketDataArrival(Элемент, bytesTotal)
	
 	ТкстСообщения = "";
    WinSocket1.GetData(ТкстСообщения);
	//Сообщить("1. " + ТкстСообщения);
	ТкстСообщения = Перекодировка(ТкстСообщения);
	Если TestRun Тогда
		Если Найти(ТкстСообщения,"step_matches") = 0 Тогда
			ТкстСообщения = СтрЗаменить(ТкстСообщения,Символы.ПС,"");
			СделатьСообщение("Обработка сообщения: " + ТкстСообщения);
		Иначе
			Отладка("Обработка сообщения: " + ТкстСообщения);	
		КонецЕсли;	 
	Иначе
		СделатьСообщение("Обработка сообщения: " + ТкстСообщения);
	КонецЕсли;	 
	
	
	Приостановить(300);
	
	Результат = ОбработатьПараметрыВызоваBDD(ТкстСообщения);
	
	ЧтоВернем = Результат + Символы.ПС;
	WinSocket1.SendData(ЧтоВернем);
	
	
	КолСекундПростоя = 0;
	//ПодключитьОбработчикОжидания("ТаймерОжиданияСеансаОбмена",1);
КонецПроцедуры

Процедура WinSocketConnect(Элемент)
	Отладка("Покдлючение к " + Элемент.RemoteHost + " успешно.");
КонецПроцедуры

Процедура WinSocketConnectionRequest(Элемент, requestID)
	Отладка("Запрос подключения");

    Сост = "Подключение";

    Если НЕ WinSocket1.State = 0 Тогда
        WinSocket1.Close()
    КонецЕсли;

    WinSocket1.Accept(requestID);

    Отладка("Приконнектился "+WinSocket1.RemoteHostIP);
КонецПроцедуры

Процедура WinSocketSendComplete(Элемент)
	//Сообщить("-----------------------------------");
    //Сообщить("" + ТекущаяДата() + " |Отправка данных завершена! ");
	//Сообщить("-----------------------------------");
КонецПроцедуры

Процедура WinSocketClose(Элемент)
	Отладка("WinSocketClose");
	//КолСекундПростоя = КолСекундПростоя + 10;
	//Таймер();
КонецПроцедуры


Процедура ЗаписатьВЖурнал(ТипСобытия, ТекстСобытия)
	Сообщить("" + ТекущаяДата() + " " + ТипСобытия +": " + ТекстСобытия);
КонецПроцедуры








Функция ПолучитьStepDefinition(Знач Стр,args) 
	
	Стр = СтрЗаменить(Стр,"\""","'");//чтобы \" заменить на апостроф
	
	StepDefinition = "";
	args = "";
	ПараметрыЧисла  = Новый Массив;
	ПараметрыСтроки = Новый Массив;
	ПараметрыДаты   = Новый Массив;
	
	//найдём параметры строки
	RegExp.Pattern = "\'[^\']+\'"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПромСтр = Item.Value;
		Если Лев(ПромСтр,1) = "'" Тогда
			ПромСтр = Сред(ПромСтр,2);
		КонецЕсли;
		Если Прав(ПромСтр,1) = "'" Тогда
			ПромСтр = Лев(ПромСтр,СтрДлина(ПромСтр)-1);
		КонецЕсли;
		
		//ПромСтр = СтрЗаменить(ПромСтр,"\\","\");
		
		ПараметрыСтроки.Добавить(ПромСтр);
		//Сообщить("Item.Value строка = " + Item.Value);
	КонецЦикла;
	
	стр=RegExp.Replace(стр, " <ПараметрСтрока> "); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры даты
	RegExp.Pattern = "\d\d\.\d\d\.(\d\d\d\d|\d\d)"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыДаты.Добавить(Item.Value);
		//Сообщить("Item.Value дата = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, " <ПараметрДата> "); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры числа
	//RegExp.Pattern = "\d+"; 
	//RegExp.Pattern = "[-+]?\b[0-9]*\.?[0-9]+\b"; 
	RegExp.Pattern = "(^)*([^\wа-яё+-\.][-+]?[0-9]+(\.[0-9]+)?)";
	//RegExp.Pattern = "/^-{0,1}\d+\.{0,1}\d*$/"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыЧисла.Добавить(Item.Value);
		//Сообщить("Item.Value число = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, " <ПараметрЧисло> "); 
	
	//Сообщить("стр="+стр);
	
	
	
	УбратьЗапрещенныеСимволыИзStepDefinition(стр);
	//стр = СтрЗаменить(Стр,":","");//надо убрать некоторые спец символы
	
	
	
	//разделим на слова
	//в VBScript нет метода Split, поэтому сделаем иначе
	RegExp.Pattern = "\s+"; 
	ПромСтр=RegExp.Replace(стр,"+|||+"); 
	//Сообщить("ПромСтр="+ПромСтр);
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ПромСтр,"+|||+",Истина);
	КолПараметров       = 0;
	КолПараметровЧисло  = 0;
	КолПараметровСтрока = 0;
	КолПараметровДата   = 0;
	СтрокаПараметров = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		//Сообщить("Элем="+Элем);
		Если Элем = "<ПараметрСтрока>" Тогда
			КолПараметров       = КолПараметров       + 1;
			КолПараметровСтрока = КолПараметровСтрока + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			//Сообщить("ПараметрыСтроки[КолПараметровСтрока-1]=" + ПараметрыСтроки[КолПараметровСтрока-1]);
			args             = args + "{""val"":""{" + ПараметрыСтроки[КолПараметровСтрока-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрЧисло>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыЧисла[КолПараметровЧисло-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрДата>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата  + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыДаты[КолПараметровДата-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Если СтрокаПараметров <> "" Тогда
		СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);

	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	Если СтрДлина(args) > 0 Тогда
		args = Лев(args,СтрДлина(args)-1);//убрали запятую
	КонецЕсли;
	//Сообщить("args="+args);
	
	
	Возврат StepDefinition;
	//Сообщить(стр);
КонецФункции





Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Тзн;
КонецФункции



Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Файл = Новый Файл(Путь);
	Если Путь = "" Тогда
		ВызватьИсключение "Передан пустой путь в процедуру ""СоздатьКаталогЕслиЕгоНет""!";
	КонецЕсли;	 
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
		Отладка("Создан каталог: " + Путь);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,ИмяФичи)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлОсноваОбработки,"UTF-8");

	
	ВременноеИмяФайла = ИмяФайлОсноваОбработки + "_Temp";
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,"TemplateEpf",ИмяФичи);
		Стр = СтрЗаменить(Стр,"Template epf",ИмяФичи);
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	Текст = "";
	Приостановить(500);
	
	
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	ПереместитьФайл(ВременноеИмяФайла,ИмяФайлОсноваОбработки);
	
КонецПроцедуры

Функция ПолучитьТелоМодуляВМассивСервер(Стр)
КонецФункции

Процедура СоздатьФайлыОбработок(БылиОшибки)
		
	Для Каждого СтруктураОписанияEpf Из МассивДляСозданияEpf Цикл
		ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
		Если ЭтоУФ Тогда
			ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
		Иначе
			ТелоМодуля.Сортировать("НомСтр");
			ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
		КонецЕсли;	 
		
		Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		//Продолжить;
		
		УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
		Если ГенерироватьУФ Тогда
			ИмяФайлаФормаУФ = КаталогИнструментов + "\lib\TemplateEpfUF\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0_template";
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
			
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			
			Пока Истина Цикл
				Стр = Текст.ПрочитатьСтроку();
				Если Стр = Неопределено Тогда
					Прервать;
				КонецЕсли;	 
				
				ЗТ.ЗаписатьСтроку(Стр); 
				
				Если Стр = "},""//начало текста модуля" Тогда
					Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
						//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
						СтрТелоМодуля = СтрЗаменить(СтрТелоМодуля,"""","""""");
						ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
						//ЗТ.Записать(Символы.ПС); 
					КонецЦикла;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			Текст.Закрыть();
			ЗТ.Закрыть();
		Иначе	
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
				//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
				ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
				//ЗТ.Записать(Символы.ПС); 
			КонецЦикла;
			ЗТ.Закрыть();
		КонецЕсли;	 
		Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		
		//ПутьКИсходникам = КаталогИнструментов + "\lib\TemplateEpf\";
		//ИмяФайлаМодуляДляСборки = КаталогИнструментов + "\lib\TemplateEpf\ObjectModule.txt";
		
		//ФайлВременноеИмяМодуля = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
		
		
		
		ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "\ObjectModule.txt";
		Если ГенерироватьУФ Тогда
			ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
		КонецЕсли;	 
		
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		ПереместитьФайл(СтруктураОписанияEpf.ВременноеИмяМодуля,ИмяФайлаМодуляДляСборки);
		Отладка("Переименовал в " + ИмяФайлаМодуляДляСборки);
		
		
		//ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		//ИмяФайлОсноваОбработки         = КаталогИнструментов + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
		ИмяФайлОсноваОбработкиTemplate = ПутьКИсходникам + "\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		ИмяФайлОсноваОбработки         = ПутьКИсходникам + "\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
		Если ГенерироватьУФ Тогда
			ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
			ИмяФайлОсноваОбработки         = КаталогИнструментов + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
		КонецЕсли;	 
		
		Файл_template = Новый Файл(ИмяФайлОсноваОбработкиTemplate);
		Если Файл_template.Существует() Тогда
			//это значит обработка создаётся в первый раз
			КопироватьФайл(ИмяФайлОсноваОбработкиTemplate,ИмяФайлОсноваОбработки);
			ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,СтруктураОписанияEpf.ИмяФичи);
		КонецЕсли;	 
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		СоздатьКаталогЕслиЕгоНет(Файл.Путь);
		
		Если Файл.Существует() Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;	 
		
		СделатьСообщение("Создаю " + СтруктураОписанияEpf.ИмяФайлаEpf);
		СтрокаСборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + СтруктураОписанияEpf.ИмяФайлаEpf + """";
		//Если ГенерироватьУФ Тогда
		//	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py --compile " +  КаталогИнструментов + "\lib\TemplateEpfUF " + СтруктураОписанияEpf.ИмяФайлаEpf;
		//КонецЕсли;	 
		Отладка("СтрокаСборкиEpf="+СтрокаСборкиEpf);
		
		//retCode = "";
		//ЗапуститьПриложение(СтрокаСборкиEpf,,Истина,retCode);
		КомандаСистемы(СтрокаСборкиEpf);
		Если Файл.Существует() Тогда
			Отладка("Файл " + Файл.ПолноеИмя + " создан.");
		Иначе	
			СделатьСообщение("Ошибка создания файла " + Файл.ПолноеИмя + "!!!");
			БылиОшибки = Истина;
		КонецЕсли;	 
		//Сообщить("retCode=" + retCode);
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		УдалитьФайлы(ИмяФайлОсноваОбработки);
		
	КонецЦикла;
	
КонецПроцедуры



Процедура СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи)
	Файл = Новый Файл(КаталогИнструментов + "\lib\TemplateEpf");
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Не найден служебный каталог \lib\TemplateEpf !!!");
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейФичи = "" Тогда
		СделатьСообщение("Не определилась текущая фича из тегов feature файла.");
		Возврат;
	КонецЕсли;
	
	СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
	Если СтруктураОписанияEpf = Неопределено Тогда
		СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
		СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
		СтруктураОписанияEpf.ИмяФайлаEpf        = ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + ".epf";
		
		//СтруктураОписанияEpf.ИмяМодуляEpf       = КаталогИнструментов + "\src" + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + "\ObjectModule.txt";
		Если GenerateEpf Тогда
			ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
			Если ФайлEpf.Существует() Тогда //т.е. если мы не первый раз работаем с данной фичей
				СтруктураОписанияEpf.ИмяМодуляEpf       = РаспаковатьEPF(СтруктураОписанияEpf.ИмяФайлаEpf);
			КонецЕсли;	 
		КонецЕсли;
		
		СтруктураОписанияEpf.КаталогИсходников = КаталогИнструментов + "\lib\TemplateEpf";
		//если уже были исходники, то надо использовать их
		ПромИмяФайла = ОтносительныйКаталогФичи + "\step_definitions\src\" + ИмяТекущейФичи;
		ПромИсходникиФайл = Новый Файл(ПромИмяФайла);
		Если ПромИсходникиФайл.Существует() Тогда
			СтруктураОписанияEpf.КаталогИсходников = ПромИмяФайла;
		КонецЕсли;	 
		
		
		СтруктураОписанияEpf.ВременноеИмяМодуля = СтруктураОписанияEpf.КаталогИсходников + "\ObjectModule_" + ИмяТекущейФичи + ".txt";
		
		//ПромИмяФайла = ОтносительныйКаталогФичи + "\step_definitions\src\" + ИмяТекущейФичи + "\ObjectModule_" + ИмяТекущейФичи + ".txt";
		
		//Сообщить("СтруктураОписанияEpf.ИмяМодуляEpf="+СтруктураОписанияEpf.ИмяМодуляEpf);
		
		
		УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		Если Не Файл.Существует() Тогда
			//Сообщить(СтруктураОписанияEpf.ВременноеИмяМодуля);
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			ЗТ.Закрыть();
		КонецЕсли;
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ИмяМодуляEpf); //значит надо загрузить модуль из исходников
		Если Файл.Существует() Тогда
			СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ИмяМодуляEpf);
		Иначе
			СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
			//значит создаём файл первый разделим
			ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ);
		КонецЕсли;
		
		
		
		
		МассивДляСозданияEpf.Добавить(СтруктураОписанияEpf);
		Отладка("Добавляю фичу " + СтруктураОписанияEpf.ИмяФичи + " в МассивДляСозданияEpf.");
	КонецЕсли;
	
	
	
КонецПроцедуры











Процедура ВызватьМетод(Обработка, ИмяПроцедуры, МассивАргументов);
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	Для Ккк = 0 По МассивАргументов.Количество()-1 Цикл
		Элем = МассивАргументов[Ккк];
		Команда = Команда + Элем;
		Если Ккк < МассивАргументов.Количество()-1 Тогда
			Команда = Команда + ",";
		КонецЕсли;	 
	КонецЦикла;
	
	Команда = Команда + ")";
	
	Отладка("Выполняю: " + Команда);
	Выполнить(Команда);
КонецПроцедуры




Функция ВыполнитьПроцедуруОбработки(ИмяФайла,ИмяПроцедуры,ПараметрыОбработки = Неопределено,РезультатВыполненияШага = Неопределено)
	//Если DebugLog Тогда
	//	Сообщить("ВыполнитьПроцедуруОбработки");
	//	Сообщить("ИмяФайла="+ИмяФайла);
	//	Сообщить("ИмяПроцедуры="+ИмяПроцедуры);
	//КонецЕсли;
	//Если Параметры = Неопределено Тогда
	//	Сообщить("Параметры=Неопределено");
	//Иначе	
	//	Сообщить("Параметры.Количество()="+Параметры.Количество());
	//	Для Каждого Элем Из Параметры Цикл
	//		Сообщить("Элем+1 = " + (Элем+1));
	//	КонецЦикла;
	//КонецЕсли;
	
	СтрокаВозврата = "[""success""]";
	
	//Рефлектор = Новый Рефлектор();
	//Рефлектор = "";
	МассивАргументов = Новый Массив;
	Если ПараметрыОбработки <> Неопределено Тогда
		МассивАргументов = ПараметрыОбработки;
	КонецЕсли;
	
	СтрТаблицаКонтекстовОбработок = ТаблицаКонтекстовОбработок.Найти(ИмяФайла,"ИмяФайла");
	Если СтрТаблицаКонтекстовОбработок = Неопределено Тогда
		ПрерватьВыполнениеСкрипта("В таблице ТаблицаКонтекстовОбработок не найден файл " + ИмяФайла);
	КонецЕсли;
	
	Попытка
		СтрТаблицаКонтекстовОбработок.Обработка.Контекст = ОбъектКонтекст;
		ВызватьМетод(СтрТаблицаКонтекстовОбработок.Обработка, ИмяПроцедуры, МассивАргументов);
		ОбъектКонтекст = СтрТаблицаКонтекстовОбработок.Обработка.Контекст;
		
		РезультатВыполненияШага = "success";
	Исключение
		Отладка("ОписаниеОшибки()="+ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		Если Найти(ОписаниеОшибкиСтр,"}: Не реализовано.") > 0 Тогда //тогда это Pending
			СтрокаВозврата = "[""pending"", ""I'll do it later""]";
			РезультатВыполненияШага = "pending";
		Иначе
			//значит возникла ошибка
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибки(),ИмяФайла,ИмяПроцедуры);
			СделатьСообщение(СтрОшибка);
			СтрОшибка = ПерекодировкаДляОтправкиОшибки(СтрОшибка);
			СтрокаВозврата = "[""fail"",{""message"":""" + СтрОшибка + """}]";
			РезультатВыполненияШага = "fail";
		КонецЕсли;
	КонецПопытки;
	
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ПС,"");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВК,"");
	
	//Поз = Найти(СтрокаВозврата,Символы.ПС);
	//Если Поз > 0 Тогда
	//	Сообщить("Обнаружен перевод строки.");
	//КонецЕсли;
	
	Возврат СтрокаВозврата;
КонецФункции




Функция СделатьInvoke(ИмяМетода,ЗначенияПараметров,РезультатВыполненияШага)
	СтрокаВозврата = "";
	
	
	//Сообщить("Invoke: ИмяМетода=" + ИмяМетода);
	//Сообщить("Invoke: ЗначенияПараметров=" + ЗначенияПараметров);
	
	СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(ИмяМетода,"ID");
	Если СтрТаблицаИзвестныхStepDefinition = Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата = "[""fail"",{""message"":""" + "В epf файлах фич не обнаружен снипет:" + ИмяМетода + """}]";
		Возврат СтрокаВозврата;
	КонецЕсли;
	
	МассивПараметров = РазобратьСтрокуЗначенийПараметров(ЗначенияПараметров,СтрТаблицаИзвестныхStepDefinition.Параметры);
	//Сообщить(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
	//в этом файле мы будем запускать данный шаг
	
	СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
	Поз = Найти(СтрокаРеальнойПроцедуры,"(");
	Если Поз > 0 Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,Поз-1);
	КонецЕсли;
	
	СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтрокаРеальнойПроцедуры,МассивПараметров,РезультатВыполненияШага);
	
	Возврат СтрокаВозврата;
КонецФункции


Функция Это_begin_scenario_tags(Знач Стр,ИмяФ,ПутьКФ) Экспорт
	СтрПоиска = "[""begin_scenario"",{""tags"":[""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Стр = СокрЛП(Сред(Стр,СтрДлина(СтрПоиска)+1));
		//Сообщить("ПолезноеЗначение1="+ПолезноеЗначение);
		Стр = Лев(Стр,СтрДлина(Стр)-4);
		Поз = Найти(Стр,";");
		Стр1 = Лев(Стр,Поз-1);
		ИмяФ = СтрЗаменить(Стр1,"[ИмяФичи]=","");
		ПутьКФ = Сред(Стр,Поз+1);
		ПутьКФ = СтрЗаменить(ПутьКФ,"\\","\");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция Это_end_scenario_tags(Знач Стр) Экспорт
	СтрПоиска = "[""end_scenario"",{""tags"":[""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


Функция Это_invoke(Знач Стр,ИмяМетода,ЗначенияПараметров) Экспорт
	СтрПоиска = "[""invoke"",{""id"":""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Стр = СокрЛП(Сред(Стр,СтрДлина(СтрПоиска)+1));
		//Сообщить("Стр="+Стр);
		
		СтрПоиска2 = """args"":[";
		Поз = Найти(Стр,СтрПоиска2);
		ИмяМетода = Лев(Стр,Поз-3);
		ЗначенияПараметров = Сред(Стр,Поз+СтрДлина(СтрПоиска2)-1);
		ЗначенияПараметров = Лев(ЗначенияПараметров,СтрДлина(ЗначенияПараметров)-2);
		Отладка("ИмяМетода="+ИмяМетода);
		Отладка("ЗначенияПараметров="+ЗначенияПараметров);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции



Функция ОбработатьПараметрыВызоваBDD(СтрокаВызова)
	//Если DebugLog Тогда
	//	ЗаписатьВЖурнал("INFO", "Получен вызов BDD:" + СтрокаВызова);
	//КонецЕсли;	
	
	
	СтрокаВозврата = "[""success""]";
	//СтрокаВозврата = "[""success"",[{""id"":""1"", ""args"":[]}]]";
	
	StepDefinition               = "";
	ПолезноеЗначение             = "";
	ПримерИспользованияПроцедуры = "";
	ПромСтр = СтрокаВызова;
	Если Это_step_matches_name_to_match(ПромСтр,ПолезноеЗначение) Тогда
		//Сообщить("ПолезноеЗначение="+ПолезноеЗначение);
		args = "";
		//Сообщить("ПолезноеЗначение=" + ПолезноеЗначение);
		Если Найти(ПолезноеЗначение,"[") > 0 Тогда
			ПрерватьВыполнениеСкрипта("Не верное определение имени фичи: " + ПолезноеЗначение);
		КонецЕсли;
		StepDefinition = ПолучитьStepDefinition(ПолезноеЗначение,args);
		ПримерИспользованияПроцедуры   = ПолезноеЗначение;
		Отладка("StepDefinition="+StepDefinition);
		
		СтрокаВозврата = "[""success"",[{""id"":""" + StepDefinition + """, ""args"":[" + args +"]}]]";
	КонецЕсли;
	
	ИмяФ                     = "";
	ОтносительныйКаталогФичи = "";
	ПромСтр                  = СтрокаВызова;
	Если Это_begin_scenario_tags(ПромСтр,ИмяФ,ОтносительныйКаталогФичи) Тогда
		РезультатВыполненияСценария = "success";
		Если ИмяТекущейФичи <> ИмяФ Тогда
			
			Если TestRun Тогда
				//если мы в режиме генерации, то глобальная переменная ИмяТекущейФичи уже была инициализирована в таймере "ТаймерДляГенерацииФич"
				ИмяТекущейФичи = ИмяФ;
			КонецЕсли;	
			
			Если TestRun Тогда
				ОбъектКонтекст = Новый Структура;//контекст один на всю фичу, а не на весь сценарий (в фиче может быть много сценариев)
				ОбъектКонтекст.Вставить("КаталогИнструментов",КаталогИнструментов);
				ОбъектКонтекст.Вставить("КаталогФич",КаталогФич);
				
				СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи);
			КонецЕсли;
		КонецЕсли;
		
		
		//СтрокаВозврата = "[""success""]";
		Если TestRun Тогда
			Если ИмяТекущейФичи = "" Тогда
				СделатьСообщение("Ошибка в Это_begin_scenario_tags! Переменная ""ИмяТекущейФичи"" не заполнена!");
				ПрерватьВыполнениеСкрипта("Ошибка в Это_begin_scenario_tags! Переменная ""ИмяТекущейФичи"" не заполнена!");
			КонецЕсли;	 
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
			СостояниеИдетInvoke = Истина;
			СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтруктураОписанияEpf.ИмяФайлаEpf,"ПередНачаломСценария");
			СостояниеИдетInvoke = Ложь;
		КонецЕсли;
		Отладка("ИмяТекущейФичи="+ИмяТекущейФичи + ", ОтносительныйКаталогФичи="+ОтносительныйКаталогФичи);
	КонецЕсли;
	
	ПромСтр = СтрокаВызова;
	Если Это_end_scenario_tags(ПромСтр) Тогда
		Если TestRun Тогда
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
			СостояниеИдетInvoke = Истина;
			СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтруктураОписанияEpf.ИмяФайлаEpf,"ПередОкончаниемСценария");
			Сообщить("СтатусСценария=" + РезультатВыполненияСценария);
			Сообщить(" ");
			СостояниеИдетInvoke = Ложь;
		КонецЕсли;
		//СтрокаВозврата = "[""success""]";
	КонецЕсли;
	
	ПромСтр            = СтрокаВызова;
	ИмяМетода          = "";
	ЗначенияПараметров = "";
	Если Это_invoke(ПромСтр,ИмяМетода,ЗначенияПараметров) Тогда
		Если TestRun Тогда
			СостояниеИдетInvoke = Истина;
			РезультатВыполненияШага = Неопределено;
			СтрокаВозврата = СделатьInvoke(ИмяМетода,ЗначенияПараметров,РезультатВыполненияШага);
			РезультатВыполненияСценария = РезультатВыполненияШага;
			Сообщить("СтатусШага=" + РезультатВыполненияШага);
			СостояниеИдетInvoke = Ложь;
		Иначе
			СтрокаВозврата = "[""pending"", ""I'll do it later""]";
			//СтрокаВозврата = "";
		КонецЕсли;
	КонецЕсли;
	
	//Возврат "[""error1"",[]]";
	//СтрокаВозврата = "qqq";
	Отладка("СтрокаВозврата="+СтрокаВозврата);
	Отладка(" ");
	//sleep(1500);
	
	Если GenerateEpf Тогда
		//СоздатьИлиДополнитьСтруктурыДляEpfФайлов(StepDefinition,ПримерИспользованияПроцедуры,ОтносительныйКаталогФичи);
		Если StepDefinition <> "" Тогда
			Если ИмяТекущейФичи = "" Тогда
				ПрерватьВыполнениеСкрипта("Ошибка! Переменная ""ИмяТекущейФичи"" не заполнена!");
			КонецЕсли;	 
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
			//ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,ГенерироватьУФ);
			ПоложитьТелоМодуляВСтруктураОписанияEpf(ИмяТекущейФичи,СтруктураОписанияEpf);
			//СтруктураОписанияEpf.ТелоМодуля = ТелоМодуля;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаВозврата;
КонецФункции


Процедура ПоложитьТелоМодуляВСтруктураОписанияEpf(Стр,СтруктураОписанияEpf)
	Для Каждого Элем Из МассивДляСозданияEpf Цикл
		Если Элем.ИмяФичи = Стр Тогда
			Элем.ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение "Ошибка в ""ПоложитьТелоМодуляВСтруктураОписанияEpf""! Не найдена фича: " + Стр;
КонецПроцедуры


Функция ЕстьПараметр(МассивПараметрыЗапуска,ИмяПараметра) 
	Для каждого Элем Из МассивПараметрыЗапуска Цикл
		Если НРег(Элем) = НРег(ИмяПараметра) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции 

Функция ПолучитьЗначениеПараметраЗапуска(МассивПараметрыЗапуска,ИмяПараметра)
	Сч = 0;
	Для каждого Элем Из МассивПараметрыЗапуска Цикл
		Сч = Сч + 1;
		Если Лев(Элем,СтрДлина(ИмяПараметра)) = ИмяПараметра Тогда
			Возврат Сред(Элем,СтрДлина(ИмяПараметра)+1);
			//Если МассивПараметрыЗапуска.Количество() > Сч Тогда
			//	Возврат МассивПараметрыЗапуска[Сч];//здесь -1 писать не надо
			//КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции






Процедура ПроставитьТегВФичу(ПутьКФайлу) Экспорт
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");


	Файл = Новый Файл(ПутьКФайлу);
	Путь = Файл.Путь;
	Если Прав(Путь,1) = "\" Тогда
		Путь = Лев(Путь,СтрДлина(Путь)-1);
	КонецЕсли;	 
	ИмяФичи = "@[ИмяФичи]=" + Файл.ИмяБезРасширения + ";" + Путь;
	
	
	НадоПерезаписатьТег   = Ложь;
	УжеЕстьПравильныйТег  = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Лев(СокрЛП(Стр),1) = "@" Тогда 
			Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
				Если Стр <> ИмяФичи Тогда
					НадоПерезаписатьТег = Истина;
				Иначе
					УжеЕстьПравильныйТег = Истина;
				КонецЕсли;
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	Текст.Закрыть();
	
	Если УжеЕстьПравильныйТег Тогда
		Возврат;
	КонецЕсли;
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	ИмяТемпФайла = ПутьКФайлу + "Temp";
	УдалитьФайлы(ИмяТемпФайла);
	
	ЗТ = Новый ЗаписьТекста(ИмяТемпФайла,"UTF-8",,Истина); 
	
	ДобавитьТегСледующейСтрокой = Ложь;
	УжеЗаписывалТег             = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НадоПерезаписатьТег Тогда 
			Если Лев(СокрЛП(Стр),1) = "@" Тогда 
				Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
					//Файл = Новый Файл(ПутьКФайлу);
					Стр = ИмяФичи;
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе	
			Если (Лев(СокрЛП(Стр),1) <> "#") и (СтрДлина(СокрЛП(Стр)) > 0) Тогда 
				ДобавитьТегСледующейСтрокой = Истина;
			КонецЕсли;	
		КонецЕсли;	 
		
		
		Если ДобавитьТегСледующейСтрокой и (Не УжеЗаписывалТег) Тогда 
			//Файл = Новый Файл(ПутьКФайлу);
			СтрФича = ИмяФичи;
			ЗТ.Записать(СтрФича); 
			ЗТ.Записать(Символы.ПС); 
			ЗТ.Записать(Символы.ПС); 
			
			ДобавитьТегСледующейСтрокой = Ложь;
			УжеЗаписывалТег = Истина;
		КонецЕсли;	 
		
		ЗТ.Записать(Стр); 
		ЗТ.Записать(Символы.ПС); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	УдалитьФайлы(ПутьКФайлу);
	ПереместитьФайл(ИмяТемпФайла,ПутьКФайлу);
	
КонецПроцедуры

Процедура ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог)
	//Сообщить("НачальныйКаталог= " + НачальныйКаталог);
	
	КаталогПоиска = НачальныйКаталог;
	Файл = Новый Файл(КаталогПоиска);
	Если НЕ Файл.ЭтоКаталог() Тогда //передали сразу одну фичу
		ПроставитьТегВФичу(Файл.ПолноеИмя);
	КонецЕсли;	 
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.feature",Истина);
	Для Каждого Элем Из МассивФайлов Цикл
		//Сообщить("Найден файл " + Элем.Имя);
		ПроставитьТегВФичу(Элем.ПолноеИмя);
		
		СтруктураФичи = Новый Структура;
		СтруктураФичи.Вставить("ИмяФичи",Элем.ИмяБезРасширения);
		СтруктураФичи.Вставить("ПолныйПуть",Элем.Путь);
		
		//Стр = СтрЗаменить(СтруктураФичи.ПолныйПуть,КаталогИнструментов);
		
		
		МассивНайденыхФич.Добавить(СтруктураФичи);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСледующуюСтрокуМодуля(СтрТзн,Тзн)
	Индекс = Тзн.Индекс(СтрТзн);
	Если Индекс = Тзн.Количество()-1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тзн.Получить(Индекс+1);
КонецФункции

Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки)
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		СделатьСообщение("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;
	
	СтрТаблицаИзвестныхStepDefinition                         = ТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
КонецПроцедуры

Функция СоздатьПустуюТаблицуПроцедур()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ID");
	Тзн.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	Тзн.Колонки.Добавить("Параметры");
	Возврат Тзн;
КонецФункции

Функция РаспаковатьEPF(ИмяФайла)
	Попытка
		
		Файл = Новый Файл(ИмяФайла);
		
		ИмяКаталогаДляИсходников = Файл.Путь + "Src";
		УдалитьФайлы(ИмяКаталогаДляИсходников);
		ФайлКаталогSrc = Новый Файл(ИмяКаталогаДляИсходников);
		Если Не ФайлКаталогSrc.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаДляИсходников);
		КонецЕсли;	 
		
		СтрокаРазборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py  """ +  ИмяФайла + """ """ + ИмяКаталогаДляИсходников + """";
		СделатьСообщение("Делаю распаковку " + Файл.ПолноеИмя);
		Отладка("Строка распаковки: " + СтрокаРазборкиEpf);
		КомандаСистемы(СтрокаРазборкиEpf,КаталогИнструментов);
		
		Если ЭтоУФ Тогда
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\Form\Форма\Форма.txt";
		Иначе	
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		КонецЕсли;	 
		
		Файл = Новый Файл(ПутьКФайлуМодуля);
		Если Не Файл.Существует() Тогда
			СделатьСообщение("Не найден файл после распаковки: " + ПутьКФайлуМодуля);
			Если ЭтоУФ Тогда
				СделатьСообщение("Возможно это обработка для обычных форм, а не для управляемых форм.");
			Иначе	
				СделатьСообщение("Возможно это обработка для управляемых форм, а не для обычных форм.");
			КонецЕсли;	 
			Возврат Неопределено;
		КонецЕсли;	 
		
		Возврат ПутьКФайлуМодуля;
	Исключение
		СделатьСообщение("Не смог распаковать " + ИмяФайла);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции


Процедура ПросканироватьИсходникиИНайтиВсеStepDefinition()
	БылиОшибки = Ложь;
	НачальныйКаталог = ПолучитьКаталогФич(КаталогИнструментов,КаталогФич);
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	//Сообщить("КаталогПоиска="+КаталогПоиска);
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		СтрТаблицаКонтекстовОбработок           = ТаблицаКонтекстовОбработок.Добавить();
		СтрТаблицаКонтекстовОбработок.ИмяФайла  = Файл.ПолноеИмя;
		СтрТаблицаКонтекстовОбработок.Обработка = ВнешниеОбработки.Создать(СтрТаблицаКонтекстовОбработок.ИмяФайла);
		
		//Рефлектор = Новый Рефлектор();
		//МассивАргументов = Новый Массив;
		//МассивАргументов.Добавить(1);
		//МассивАргументов.Добавить("фывфывфывфы");
		//Рефлектор.ВызватьМетод(СтрТаблицаКонтекстовОбработок.Обработка, "ПередНачаломСценария", МассивАргументов);
		
		//СтрТаблицаИзвестныхStepDefinition                 = ТаблицаИзвестныхStepDefinition.Добавить();
		//СтрТаблицаИзвестныхStepDefinition.ИмяФайла        = Файл.ПолноеИмя;
		//СтрТаблицаИзвестныхStepDefinition.ТаблицаПроцедур = СоздатьПустуюТаблицуПроцедур();
		
		Отладка("Путь="+Файл.ПолноеИмя);
		Стр = Файл.Путь;
		Стр = СтрЗаменить(Стр,КаталогИнструментов,КаталогИнструментов + "\Src");
		Стр = Стр + "" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		//Сообщить("Стр="+Стр);
		
		ФайлМодуль = Новый Файл(Стр);
		Если Не ФайлМодуль.Существует() Тогда
			//значит мы не можем найти исходники epf и распакуем epf сами
			//ПрерватьВыполнениеСкрипта("Файл " + Стр + " не найден! Не могу найти StepDefinition.");
			Стр = РаспаковатьEPF(Файл.ПолноеИмя);
			Если Стр = Неопределено Тогда
				ПрерватьВыполнениеСкрипта("Для " + Файл.ПолноеИмя + " не были получены исходники!");
			КонецЕсли;	 
			//ПрерватьВыполнениеСкрипта("Файл " + Стр + " не найден! Не могу найти StepDefinition.");
		КонецЕсли;
		
		ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(Стр);
		
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			Если Лев(СтрТелоМодуля.Стр,3) = "//@" Тогда
				СледСтрока = ПолучитьСледующуюСтрокуМодуля(СтрТелоМодуля,ТелоМодуля);
				Если СледСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьСнипет(Сред(СтрТелоМодуля.Стр,4),СледСтрока.Стр,Файл.ПолноеИмя,БылиОшибки);
				//Сообщить("" + СтрТелоМодуля.Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;
КонецПроцедуры

Процедура ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера,ПереданноеИмяФичи = "")
	Сервер = "";
	//Сервер = Новый TCPСервер(54321);
	//Сервер.Запустить();
	
	
	
	
	
	
	
	//Путь = "E:\commons\Rep\cuke4onec\cuke4onec.epf";
	//Путь = КаталогИнструментов + "\cuke4onec.epf";
	//cuke4onec = ОЛЕ.ExternalDataProcessors.Create(Путь);
	
	//StepsDir = "E:\commons\Rep\cuke4onec\features\step_definitions";
	//StepsDir = КаталогИнструментов + "\features\step_definitions";
	//cuke4onec._Create(StepsDir);
	//cuke4onec._Purge();
	
	//СтрокаЗапускаКукумбер = "Cucumber --dry-run --no-snippets """ + КаталогИнструментов + "\features"" > " + КаталогИнструментов + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets  """ + КаталогИнструментов + "\features"" > " + КаталогИнструментов + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber  --no-snippets """ + КаталогИнструментов + "\features""";
	
	
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets --no-color """ + КаталогИнструментов + "\features"" > " + КаталогИнструментов + //"\CucumberConsoleLog.txt" + " 2>" + КаталогИнструментов + "\CucumberConsolErr.txt";
	
	
	Если ПереданноеИмяФичи = "" Тогда
		ПараметрФича = ПолучитьКаталогФич(КаталогИнструментов,КаталогФич);
	Иначе
		ПараметрФича = ПереданноеИмяФичи;
	КонецЕсли;	 
	
	
	СтрокаЗапускаКукумбер = "cucumber --no-snippets -r " + КаталогИнструментов + "\host.wire """ + ПараметрФича + """ > " + КаталогИнструментов + "\CucumberConsoleLog.txt" + " 2>" + КаталогИнструментов + "\CucumberConsolErr.txt";
	//СтрокаЗапускаКукумбер = "cucumber """ + КаталогИнструментов + "\features"" ";

	WinSocket1 = ЭлементыФормы.WinSocket;
	//Сообщить("WinSocket1.State = " + WinSocket1.State);
	Если WinSocket1.State <> 8 Тогда
		WinSocket1.Listen();
	КонецЕсли;	 
	ЗаписатьВЖурнал("INFO", "Жду соединения");
	Сообщить(" ");

	Отладка("Строка для запуска Cucumber: " + СтрокаЗапускаКукумбер);
	УдалитьФайлы(КаталогИнструментов + "\CucumberConsolErr.txt");
	
	ИмяCmd = ПолучитьИмяВременногоФайла("cmd");
	УдалитьФайлы(ИмяCmd);
	ЗТ = Новый ЗаписьТекста(ИмяCmd,"windows-1251",,Истина); 
	ЗТ.ЗаписатьСтроку("chcp 1251"); 
	ЗТ.ЗаписатьСтроку(СтрокаЗапускаКукумбер); 
	ЗТ.Закрыть();
	
	
	//Сообщить("start cmd.exe /c " + ИмяCmd);
	КомандаСистемы("start cmd.exe /c " + ИмяCmd);
	
	ПодключитьОбработчикОжидания("ТаймерОжиданияСеансаОбмена",1);
КонецПроцедуры

Процедура АнализЛогаКукумбера(ИмяФайла,БылиОшибкиЗапускаКукумбера)
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		БылиОшибкиЗапускаКукумбера = Истина;
		СделатьСообщение("Не найден файл " + ИмяФайла);
		Возврат;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	НайденаОшибка = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НРег(Лев(Стр,12)) = НРег("*** WARNING:") Тогда
			Продолжить;
		КонецЕсли;
	
		БылиОшибкиЗапускаКукумбера = Истина;
		СделатьСообщение("Обнаружена ошибка Cucumber.");
		СделатьСообщение(Стр);
		НайденаОшибка = Истина;
		Прервать;// ошибка содержится в первой строке
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Если Не НайденаОшибка Тогда
		СделатьСообщение("Ошибок в логе Cucumber не найдено.");
	КонецЕсли;	 
КонецПроцедуры

Процедура ПриЗакрытии()
	WinSocket1 = ЭлементыФормы.WinSocket;
	WinSocket1.Close();
КонецПроцедуры

Процедура ОсновныеДействияФормыНачатьЗапись(Кнопка)
	ОбъектКонтекст.ТестируемоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
КонецПроцедуры

Процедура ОсновныеДействияФормыОстановитьЗапись(Кнопка)
	Стр = ОбъектКонтекст.ТестируемоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
	
	
	ПутьКОбработке = КаталогИнструментов + "\vendor\1C\UILogToScript.epf";
	Файл = Новый Файл(ПутьКОбработке);
	Если Файл.Существует() Тогда
		Обработка = ВнешниеОбработки.Создать(ПутьКОбработке); 
		Результат = Обработка.Convert(Стр);
		ОчиститьСообщения();
		Сообщить(Результат);
	Иначе	
		Сообщить(Стр);
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ПроверитьЧтоУстановленНужныйAciveX()
	Попытка
		Protocol = WinSocket1.Protocol;
	Исключение
		Сообщить("У вас не установлен компонент WinSocket!");
	КонецПопытки;
КонецПроцедуры


Процедура ПриОткрытии()
	
	ПроверитьЧтоУстановленНужныйAciveX();
	
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработки();
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
		КаталогИнструментов = Файл.Путь;
	КонецЕсли;	 
	
	Если ВнешниеПереданныеПараметры <> Неопределено Тогда
		Для каждого Зн Из ВнешниеПереданныеПараметры Цикл
			ЭтотОбъект[Зн.Ключ] = Зн.Значение;
		КонецЦикла;
	КонецЕсли;	 
	
	Если ВыполнитьОбработкуПриОткрытии Тогда
		ВыполнитьОбработку();
	КонецЕсли;	 
	
	//Если ЗакрытьФормуПослеВыполненияОбработки Тогда
	//	ЭтаФорма.Закрыть();
	//КонецЕсли;	 
КонецПроцедуры

Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	ЭлементыФормы.тпДеревоТестов.Видимость = Истина;
КонецПроцедуры

Функция ДобавитьШагиВМассив(ДеревоСтроки,Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Шаг = Истина Тогда
			Шаги.Добавить(СтрДеревоСтроки.Имя);
		КонецЕсли;	 
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
	КонецЦикла	
КонецФункции


Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки,МассивФич,МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Фича = Истина Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;	 
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки,МассивФич,МассивШагов);
	КонецЦикла;
КонецПроцедуры


Процедура ПолучитьСписокФичПоДереву(Дерево,МассивФич,МассивШагов)
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки,МассивФич,МассивШагов);
	
КонецПроцедуры


Процедура кнСоздатьШаблоныОбработокНажатие(Элемент)
	ОчиститьСообщения();
	
	ПарсерФич = ПолучитьИнструментПарсерФич();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ",ГенерироватьУФ);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля",ШагСтрокДляМодуля);
	
	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДереву(ДеревоТестов,МассивФич,МассивШагов);
	СтруктураПараметров.Вставить("МассивФич",МассивФич);
	СтруктураПараметров.Вставить("МассивШагов",МассивШагов);
	
	
	ПарсерФич.СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	//GenerateEpf = Истина;
	//TestRun     = Ложь;
	//ВыполнитьОбработку();
КонецПроцедуры

Процедура кнЗапуститьСценарииНажатие(Элемент)
	GenerateEpf = Ложь;
	TestRun     = Истина;
	ВыполнитьОбработку();
КонецПроцедуры

Процедура СкопироватьСтрокиДерева(ДеревоОткудаСтроки,ДеревоКудаСтроки)
	Для каждого СтрДеревоОткудаСтроки Из ДеревоОткудаСтроки Цикл
		СтрДеревоКудаСтроки = ДеревоКудаСтроки.Добавить();
		Если СтрДеревоОткудаСтроки.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДерева(СтрДеревоОткудаСтроки.Строки,СтрДеревоКудаСтроки.Строки)
		КонецЕсли;	 
		ЗаполнитьЗначенияСвойств(СтрДеревоКудаСтроки,СтрДеревоОткудаСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьДеревоНаФорму(ДеревоФич)
	ДеревоТестов.Строки.Очистить();
	СкопироватьСтрокиДерева(ДеревоФич.Строки,ДеревоТестов.Строки);
	//ДеревоТестов = ДеревоФич.Скопировать();
	//ЭлементыФормы.тпДеревоТестов.СоздатьКолонки();
	//ДеревоТестов.Строки.ЗагрузитьКолонку(ДеревоФич.Строки.ВыгрузитьКолонку());
КонецПроцедуры


Функция ПолучитьИнструментПарсерФич()
	ПутьКФайлу = КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		Возврат Неопределено;
	КонецЕсли;	 
	ПарсерФич = ВнешниеОбработки.Создать(ПутьКФайлу);
	
	Возврат  ПарсерФич;
КонецФункции


Процедура РазврнутьДеревоДоСценариев(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если (СтрСтроки.Каталог = Истина) или (СтрСтроки.Фича = Истина) Тогда
			ЭлементыФормы.тпДеревоТестов.Развернуть(СтрСтроки,Ложь);
		КонецЕсли;	 
		РазврнутьДеревоДоСценариев(СтрСтроки);
	КонецЦикла;
КонецПроцедуры


Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();
	
	ПарсерФич = ПолучитьИнструментПарсерФич();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	ДеревоФич = ПарсерФич.ПолучитьДеревоФич(СтруктураПараметров);
	
	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;
	
	Если ДеревоФич = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	СкопироватьДеревоНаФорму(ДеревоФич);
	
	РазврнутьДеревоДоСценариев(ДеревоТестов);
	
	//ПарсерФич.ВычислитьСнипетыДляШагов();
КонецПроцедуры


Процедура КнЗагрузитьТестыЗагрузитьФичиИзКаталога(Кнопка)
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры

Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Каталог = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка);		
	ИначеЕсли ДанныеСтроки.Фича = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиФича.Картинка);		
	ИначеЕсли ДанныеСтроки.Сценарий = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиСценарий.Картинка);		
	ИначеЕсли ДанныеСтроки.Шаг = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиШагСерый.Картинка);		
	КонецЕсли;	 
КонецПроцедуры

Процедура кнЗагрузитьФичиНажатие(Элемент)
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры



WinSocket1 = ЭлементыФормы.WinSocket;
СтримAdobe = Новый COMОбъект("Adodb.Stream");

RegExp            = Новый COMОбъект("VBScript.RegExp");
RegExp.IgnoreCase = Истина; //Игнорировать регистр
RegExp.Global     = Истина; //Поиск всех вхождений шаблона
RegExp.MultiLine  = Ложь; //Многострочный режим

ЭтоУФ = Ложь;



ДеревоТестов.Колонки.Добавить("Имя");
ДеревоТестов.Колонки.Добавить("ПолныйПуть");
ДеревоТестов.Колонки.Добавить("Каталог");
ДеревоТестов.Колонки.Добавить("Фича");
ДеревоТестов.Колонки.Добавить("Сценарий");
ДеревоТестов.Колонки.Добавить("Шаг");
ДеревоТестов.Колонки.Добавить("Снипет");
ДеревоТестов.Колонки.Добавить("КонтейнерСнипета");


ШагСтрокДляМодуля    = 10000;