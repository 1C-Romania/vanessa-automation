&НаКлиенте
Перем ОбъектКонтекст;

&НаКлиенте
Перем ТаблицаКонтекстовОбработок;
&НаКлиенте
Перем МассивИменКонтекстовОбработок;


&НаКлиенте
Перем ВыполнятьСценарииАсинхронно;

&НаКлиенте
Перем МассивСценариевДляВыполнения,МассивСтрокДереваДанныеФормы;
&НаКлиенте
Перем ТекИД_СценарияВМассиве;
&НаКлиенте
Перем ТекИД_ШагаВМассиве;

//&НаКлиенте
//Перем МассивКонтекстовОбработок;


&НаКлиенте
Перем МассивИДСтрокиДерева;
&НаКлиенте
Перем МассивРезультатПрохожденияТестовСценария;

&НаКлиенте
Перем ЦветУспешно;
&НаКлиенте
Перем ЦветОжидает;
&НаКлиенте
Перем ЦветНеУспешно;
&НаКлиенте
Перем ЦветЧужойСнипет;


&НаКлиенте
Перем ШагСтрокДляМодуля;

&НаКлиенте
Перем ХостСистема Экспорт;

&НаКлиенте
Перем ИмяФайлаЛогаИнструкцииHTML;







&НаКлиенте
Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	
	ТипСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);
	
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение, ТипСообщения);
КонецПроцедуры

&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ПосмотретьЗначение(Парам) Экспорт
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции


&НаКлиенте
Функция УзнатьЕстьПоддержкаНемодальныхФормКлиент() Экспорт
	Возврат УзнатьЕстьПоддержкаНемодальныхФорм();
КонецФункции


&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить фичи из каталога";
	ИначеЕсли Объект.текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить одну фичу";
	ИначеЕсли Объект.текЗначениеОперации = "" Тогда
	Иначе	
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + Объект.текЗначениеОперации;
		Сообщить(Стр);	
		ВызватьИсключение Стр;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогФич = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФичи();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
	
	
	
	//Элементы.ПодменюЗагрузитьФичи.Заголовок = "ывпаыв";
	
	//текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	//ОбновитьКнопкуЗагрузитьФичи();
	//ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры


&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ИспользуемоеИмяФайла;
КонецФункции


&НаСервере
Процедура ВосстановитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehaviorUF");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", Объект.DebugLog);
		//Настройки.Свойство("GenerateEpf", GenerateEpf);
		//Настройки.Свойство("TestRun", TestRun);
		Настройки.Свойство("ГенерироватьУФ", Объект.ГенерироватьУФ);
		//Настройки.Свойство("КаталогИнструментов", Объект.КаталогИнструментов);
		Настройки.Свойство("КаталогФич", Объект.КаталогФич);
		Настройки.Свойство("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
		Настройки.Свойство("КаталогOutputAllure", Объект.КаталогOutputAllure);
		Настройки.Свойство("текЗначениеОперации", Объект.текЗначениеОперации);
		Настройки.Свойство("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
		
		Настройки.Свойство("СоздаватьИнструкциюHTML", Объект.СоздаватьИнструкциюHTML);
		Настройки.Свойство("КаталогOutputИнструкцияHTML", Объект.КаталогOutputИнструкцияHTML);
	КонецЕсли;
	
	//Элементы.DebugLog.Пометка = Объект.DebugLog;
	//Элементы.GenerateEpf.Пометка = Объект.GenerateEpf;
	//Элементы.TestRun.Пометка = Объект.TestRun;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", Объект.DebugLog);
	//Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	//Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	//Настройки.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	Настройки.Вставить("КаталогФич", Объект.КаталогФич);
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("КаталогOutputAllure", Объект.КаталогOutputAllure);
	Настройки.Вставить("текЗначениеОперации", Объект.текЗначениеОперации);
	Настройки.Вставить("КаталогиБиблиотек", Объект.КаталогиБиблиотек);
	
	Настройки.Вставить("СоздаватьИнструкциюHTML", Объект.СоздаватьИнструкциюHTML);
	Настройки.Вставить("КаталогOutputИнструкцияHTML", Объект.КаталогOutputИнструкцияHTML);
	
	ХранилищеОбщихНастроек.Сохранить("VanessaBehaviorUF",, Настройки);
КонецПроцедуры



&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	ДополнительныеПараметры.Вставить("ИмяОбработки",ИмяОбработки);
КонецПроцедуры


&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла) Экспорт
	ДополнительныеПараметры = Новый Структура;
	Если ЕстьПоддержкаНемодальныхФорм Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбработкаПослеПомещенияФайла"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("НачатьПомещениеФайла(Оповещение,, ИмяФайла, Ложь, УникальныйИдентификатор);");
		
		Возврат ДополнительныеПараметры.ИмяОбработки;
	Иначе
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь, УникальныйИдентификатор);
		//ПодключитьВнешнююОбработку(АдресХранилища);
		Результат = Неопределено;
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
		Возврат ИмяОбработки;
		
		//ОбработкаПолученияФайлаОбработкиТеста(Результат,АдресХранилища,ИмяФайла,ДополнительныеПараметры);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура ПодключитьИнструментПарсерФич()
	ПутьКФайлу = Объект.КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		ВызватьИсключение "Не найден файл vbFeatureReader.epf!";
	КонецЕсли;	 
	
	Результат = ПодключитьВнешнююОбработкуКлиент(Файл.ПолноеИмя);
	//Сообщить("Результат=" + Результат);
КонецПроцедуры


&НаСервере
Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки)
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		Если НРег(ПромСтр.ИмяФайла) = НРег(ИмяФайла) Тогда //значит этот снипет из того же файла
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		Сообщить("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;
	
	СтрТаблицаИзвестныхStepDefinition                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,"ТаблицаИзвестныхStepDefinition");
КонецПроцедуры


&НаСервере
Процедура ДобавитьСнипетыСервер(МассивСнипетовИзОбработки,ИмяФайла,БылиОшибки)
	Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
		ДобавитьСнипет(Снипет.Снипет,Снипет.ИмяПроцедуры,ИмяФайла,БылиОшибки);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич)
	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог " + КаталогФич + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	
	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка("Ищу снипеты в каталоге " + КаталогПоиска);
	
	
	//Сообщить("КаталогПоиска="+КаталогПоиска);
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		
		
		ИмяОбработки = ПодключитьВнешнююОбработкуКлиент(Файл.ПолноеИмя);
		
		
		
		Попытка
			ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
		Исключение
			//Сообщить("" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		
		Попытка
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			Сообщить("Не смог загрузить снипеты из " + Файл.ПолноеИмя);
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",ФормаОбработки);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		МассивИменКонтекстовОбработок.Добавить(Файл.ПолноеИмя);
		
		ДобавитьСнипетыСервер(МассивСнипетовИзОбработки,Файл.ПолноеИмя,БылиОшибки);
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция ОбходКаталогов(ПутьКаталога,МассивРезультатОбходаКаталогов,Уровень)
	ФайлПутьКаталога = Новый Файл(ПутьКаталога);
	Если ФайлПутьКаталога.ЭтоКаталог() Тогда
		НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*");
	Иначе
		НайденныеФайлы = Новый Массив;//вернём одну фичу
		НайденныеФайлы.Добавить(ФайлПутьКаталога);
	КонецЕсли;	 
	Для каждого ф из НайденныеФайлы цикл
		Если ф.ЭтоКаталог() тогда
			
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень",Уровень);
			СтруткураФайла.Вставить("Каталог",Истина);
			СтруткураФайла.Вставить("Фича",Ложь);
			СтруткураФайла.Вставить("Имя",ф.Имя);
			СтруткураФайла.Вставить("ПолныйПуть",ф.ПолноеИмя);
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			
			//НовСтр = врДерево.Строки.Добавить();
			//НовСтр.Каталог    = Истина;
			//НовСтр.ПолныйПуть = ф.ПолноеИмя;
			//НовСтр.Имя        = ф.Имя;
			Уровень = Уровень + 1;
			ОбходКаталогов(ПутьКаталога+"\"+ф.Имя,МассивРезультатОбходаКаталогов,Уровень);
			Уровень = Уровень - 1;
			
			//Если НовСтр.Строки.Количество() = 0 Тогда
			//	врДерево.Строки.Удалить(НовСтр);
			//КонецЕсли;
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень",Уровень);
			СтруткураФайла.Вставить("Каталог",Ложь);
			СтруткураФайла.Вставить("Фича",Истина);
			СтруткураФайла.Вставить("Имя",ф.ИмяБезРасширения);
			СтруткураФайла.Вставить("ПолныйПуть",ф.ПолноеИмя);
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ф.ПолноеИмя);
			СтруткураФайла.Вставить("ДвоичныеДанные",ДвоичныеДанные);
			
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			
			
			//НовСтр            = врДерево.Строки.Добавить();
			//НовСтр.Фича       = Истина;
			//НовСтр.ПолныйПуть = ф.ПолноеИмя;
			//НовСтр.Имя        = ф.ИмяБезРасширения;
			
			//ЗагрузитьФичу(ф.ПолноеИмя,НовСтр.Строки);
		КонецЕсли;
	КонецЦикла;
КонецФункции


&НаСервере
Процедура УдалитьПустыеКаталогиИзДерева(Дерево)
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Каталог Тогда
			Если Строка.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Строка);
			Иначе	
				УдалитьПустыеКаталогиИзДерева(Строка);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтрокиДереваФичамиСервер(Дерево,FeatureReader,ТзнТаблицаИзвестныхStepDefinition)
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Фича Тогда
			FeatureReader.ЗагрузитьФичу(Строка.ПолныйПуть,Строка.Строки,ТзнТаблицаИзвестныхStepDefinition);
		Иначе	
			ЗаполнитьСтрокиДереваФичамиСервер(Строка,FeatureReader,ТзнТаблицаИзвестныхStepDefinition);
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов,ДвДанныеvbFeatureReader)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	Дерево.Строки.Очистить();
	ТекДерево = Дерево;
	ТекУровень = 0;
	
	Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
		//Сообщить(Элем.ПолныйПуть + ", уровень " + Элем.Уровень);
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			//ТекУровень = Элем.Уровень;
			//ТекСтроки = ТекСтроки.Родитель.Строки;
			ТекДерево = НовСтр;
		Иначе	
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
		КонецЕсли;  
		
		Если Элем.Каталог Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Каталог    = Истина;
			НовСтр.ПолныйПуть = Элем.ПолныйПуть;
			НовСтр.Имя        = Элем.Имя;
		ИначеЕсли Элем.Фича Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Фича        = Истина;
			НовСтр.ТипКартинки = 1;
			НовСтр.ПолныйПуть  = Элем.ПолныйПуть;
			НовСтр.Имя         = Элем.Имя;
		КонецЕсли;  
		
		//ТекДерево = НовСтр;
	КонецЦикла;
	
	УдалитьПустыеКаталогиИзДерева(ОбъектСервер.ДеревоТестов);
	
	
	
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	
	
	ЗаполнитьСтрокиДереваФичамиСервер(Дерево,FeatureReader,ТзнТаблицаИзвестныхStepDefinition);
	
	
	//FeatureReader.ЗагрузитьФичу();
	
	
	
	УдалитьФайлы(ВременноеИмяФайла);
	
	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,"ТаблицаИзвестныхStepDefinition");
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры


&НаКлиенте
Функция ПолучитьПутьКFeatureReader()
	ПутьКФайлу = Объект.КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		ВызватьИсключение "Не найден файл vbFeatureReader.epf!";
	КонецЕсли;	 
	
	Возврат ПутьКФайлу;
КонецФункции



&НаКлиенте
Процедура ЗаполнитьДерево(Каталог)
	Файл = Новый Файл(Каталог);
	
	
	МассивРезультатОбходаКаталогов = Новый Массив;
	
	СтруткураФайла = Новый Структура;
	СтруткураФайла.Вставить("Каталог",Истина);
	СтруткураФайла.Вставить("Имя",Файл.Имя);
	СтруткураФайла.Вставить("ПолныйПуть",Каталог);
	СтруткураФайла.Вставить("Уровень",1);
	
	МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
	
	//НовСтр            = ДеревоЗначений.Строки.Добавить();
	//НовСтр.Каталог    = Истина;
	//НовСтр.Имя        = Файл.Имя;
	//НовСтр.ПолныйПуть = Каталог;
	Уровень = 2;
	ОбходКаталогов(Каталог,МассивРезультатОбходаКаталогов,Уровень);    
	
	
	ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	
	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов,ДвДанныеvbFeatureReader);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьКаталогФич(ПутьКФичам)
	ЗаполнитьДерево(ПутьКФичам);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов = СтруктураПараметров.КаталогИнструментов;
	КаталогФич          = СтруктураПараметров.КаталогФич;
	МассивСообщений     = СтруктураПараметров.МассивСообщений;
	DebugLog            = СтруктураПараметров.DebugLog;
	КаталогиБиблиотек   = СтруктураПараметров.КаталогиБиблиотек;
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат;
	КонецЕсли;	 
	
	
	
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	ТаблицаИзвестныхStepDefinition.Очистить();
	
	
	
	
	Путь = ПутьКФичам.ПолноеИмя;
	Если ПутьКФичам.ЭтоФайл() Тогда
		Путь = ПутьКФичам.Путь;
	КонецЕсли;	 
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь);
	
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение);
	КонецЦикла;
	
	
	
	
	ОбработатьКаталогФич(ПутьКФичам.ПолноеИмя);
	
	
	
	//ДеревоЗначений = Новый ДеревоЗначений;
	//ДеревоЗначений.Колонки.Добавить("Имя");
	//ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	//ДеревоЗначений.Колонки.Добавить("Каталог");
	//ДеревоЗначений.Колонки.Добавить("Фича");
	//ДеревоЗначений.Колонки.Добавить("Сценарий");
	//ДеревоЗначений.Колонки.Добавить("ЭтоScenarioOutline");
	//ДеревоЗначений.Колонки.Добавить("ЭтоКонтекст");
	//ДеревоЗначений.Колонки.Добавить("Примеры");
	//ДеревоЗначений.Колонки.Добавить("ИменованныеПараметры");
	//ДеревоЗначений.Колонки.Добавить("Пример");
	//ДеревоЗначений.Колонки.Добавить("Шаг");
	//ДеревоЗначений.Колонки.Добавить("ЗначенияПараметров");
	//ДеревоЗначений.Колонки.Добавить("Снипет");
	//ДеревоЗначений.Колонки.Добавить("АдресСнипета");
	//ДеревоЗначений.Колонки.Добавить("ЭтоЧужойСнипет");
	//ДеревоЗначений.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	//
	////Если ПутьКФичам.ЭтоКаталог() Тогда
	//ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам.ПолноеИмя,ТаблицаИзвестныхStepDefinition);
	////ДеревоЗначений.ВыбратьСтроку();
	////КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Функция ПроверитьСуществованиеКаталогаИнструментов(ИмяФайла)
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Не найден каталог инструментов: " + ИмяФайла);
		Возврат Ложь;
	КонецЕсли;	   
	
	Возврат Истина;
КонецФункции	

&НаСервере
Процедура ЗаполнитьИДСтрокиДереваСервер()
	ДеревоФорма = Объект.ДеревоТестов;
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	МассивСтрокДереваДанныеФормы = Новый Массив;
	ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов,МассивСтрокДереваДанныеФормы);
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФичи() Экспорт
	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	КаталогиБиблиотек   = Объект.КаталогиБиблиотек;
	
	Если НЕ ПроверитьСуществованиеКаталогаИнструментов(КаталогИнструментов) Тогда
		Возврат;
	КонецЕсли;	 
	
	
	ПарсерФич = "";
	//ПодключитьИнструментПарсерФич();
	//Возврат;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	СтруктураПараметров.Вставить("КаталогиБиблиотек",КаталогиБиблиотек);
	
	
	МассивИменКонтекстовОбработок = Новый Массив;
	ЗаполнитьДеревоФич(СтруктураПараметров);
	
	
	
	
	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;
	
	
	//СкопироватьДеревоНаФорму(ДеревоФич);
	
	//РазврнутьДеревоДоСценариев(ДеревоТестов);
	
	//Элементы.нКаталогФич1.Заголовок = "Каталог фич: " + Объект.КаталогФич;
	
	
	ЗаполнитьИДСтрокиДереваСервер();
	
	
	СделатьСообщение("Фичи загружены.");
	//ПарсерФич.ВычислитьСнипетыДляШагов();
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ПолучитьВерсиюОбработки();
КонецФункции

&НаСервере
Процедура ЗадатьУсловноеОформление();
	//УО = УсловноеОформление.Элементы.Добавить();
	//УО.Оформление.УстановитьЗначениеПараметра("ЦветФона",WebЦвета.Красный);  
	//ЭУ = УО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭУ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДеревоТестов.Имя"); 
	//ЭУ.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	//ЭУ.ПравоеЗначение  = "4";
	//ОП = УО.Поля.Элементы.Добавить();
	//ОП.Поле = Новый ПолеКомпоновкиДанных("Объект.ДеревоТестов.Имя"); 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКаталогИнструментовЕслиОнПустой()
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(Объект().ИспользуемоеИмяФайла);
		КаталогИнструментов = Файл.Путь;
		Если Прав(КаталогИнструментов,1) = "\" Тогда
			КаталогИнструментов = Лев(КаталогИнструментов,СтрДлина(КаталогИнструментов)-1);
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	Объект.КаталогИнструментов =  КаталогИнструментов;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьКонтекстноеМеню()
	//Элементы.ДеревоТестов.КонтекстноеМеню.ПодчиненныеЭлементы.Очистить();
    Пункт1=Элементы.Добавить("ДеревоТестовКонтекстноеМенюПунктВыполнитьСценарий", Тип("КнопкаФормы"), Элементы.ДеревоТестов.КонтекстноеМеню);
    Пункт1.Заголовок="Выполнить выделенный сценарий";
    Пункт1.ИмяКоманды="ВыполнитьВыделенныйСценарий";
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВосстановитьНастройки();
	ЗаполнитьКонтекстноеМеню();
	
	Объект.ИнтервалВыполненияШага = 0.1;
	
	Объект.ВыполнятьШагиАссинхронно = Истина;
	
	ЗаполнитьКаталогИнструментовЕслиОнПустой();
	
	КаталогФич          = Объект.КаталогФич;
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	
	
	ОбновитьКнопкуЗагрузитьФичи();
	Если СокрЛП(КаталогФич) <> "" Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
	
	
	
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиСервер();
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(ПолучитьПутьКОбработкеСервер());
		КаталогИнструментов = Файл.Путь;
	КонецЕсли;	 
	
	ЗадатьУсловноеОформление();
	Объект.КаталогиБиблиотек.ТипЗначения = Новый ОписаниеТипов("Строка");
	
	//Элементы.КаталогиБиблиотекЗначение.
	//Объект.Реквизит1.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФичи();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЕстьПоддержкаНемодальныхФорм = УзнатьЕстьПоддержкаНемодальныхФорм();
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
	
КонецПроцедуры

&НаКлиенте
Процедура Перезагрузить(Команда)
	ЗагрузитьФичи();
КонецПроцедуры


&НаКлиенте
Процедура СделатьПараметрыКорректными()
	Если Прав(Объект.КаталогИнструментов,1) = "\" Тогда
		Объект.КаталогИнструментов = Лев(Объект.КаталогИнструментов,СтрДлина(Объект.КаталогИнструментов)-1);
	КонецЕсли; 
	Если Прав(Объект.КаталогOutputИнструкцияHTML,1) = "\" Тогда
		Объект.КаталогOutputИнструкцияHTML = Лев(Объект.КаталогOutputИнструкцияHTML,СтрДлина(Объект.КаталогOutputИнструкцияHTML)-1);
	КонецЕсли; 
	
КонецПроцедуры


&НаСервере
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		СтрСтроки.Статус     = "";
		Если СтрСтроки.Шаг = Истина Тогда
			СтрСтроки.ТипКартинки = 3;
		КонецЕсли;	 
		//СтрСтроки.РезультатПрохожденияТестовСценария = Неопределено;
		//СтрСтроки.ВремяНачала    = Неопределено;
		//СтрСтроки.ВремяОкончания = Неопределено;
		//СтрСтроки.ОписаниеОшибки = Неопределено;
		
		ОчиститьПоляВДеревеДляПостроенияОтчетов(СтрСтроки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево);
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры


&НаСервере
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Примеры = Истина Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения,ТекПример = Неопределено,ДопПараметры)
	//получим сами именнованные параметры
	
	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Примеры = Истина Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	Если ИменаПараметров = Неопределено Тогда
		СтрОшибки = "Не смог найти у сценария " + СтрокаДерева.Имя + " имена изменяемых параметров!";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			//в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли; 
		
		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя",СтрокаДерева.Имя + " (Пример №" + (Ном-1) + ")");
		СтруктураПараметровСценария.Вставить("СтрокаДерева",СтрСтрокаПримеров.ИДСтроки);
		СтруктураПараметровСценария.Вставить("ИмяФичи",ДопПараметры.ИмяФичи);
		
		
		Шаги = Новый Массив;
		
		Если СтрокаДерева.Родитель.Строки[0].ЭтоКонтекст = Истина Тогда //значит надо добавить шаги контекста к нашим шагам
			Для каждого СтрСтроки Из СтрокаДерева.Родитель.Строки[0].Строки Цикл
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрСтрокаПримеров);
				Шаги.Добавить(СтруктураШага);
			КонецЦикла;
		КонецЕсли;	 
		
		
		Для каждого СтрСтроки Из СтрСтрокаПримеров.Строки Цикл
			//Если СтрСтроки.Примеры = Истина Тогда
			//	Продолжить;
			//КонецЕсли; 
			
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрСтроки.Родитель);
			Шаги.Добавить(СтруктураШага);
		КонецЦикла;
		
		СтруктураПараметровСценария.Вставить("Шаги",Шаги);
		
		
		
		
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;
	
	
	
	
	
	
	
	//Шаги = Новый Массив;
	//
	//Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
	//	СтруктураШага = Новый Структура;
	//	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	//	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	//	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	//	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	//	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	//	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	//	СтруктураШага.Вставить("СтрокаШага",СтрСтроки);
	//	
	//	Шаги.Добавить(СтруктураШага);
	//КонецЦикла;
	//
	//
	//
	//СтруктураПараметров.Вставить("Шаги",Шаги);
	
	//МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаСценария)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария",СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("СтрокаШага",СтрСтроки.ИДСтроки);
	
	Возврат СтруктураШага;
КонецФункции

&НаСервере
Процедура ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения,ДопПараметры)
	Если СтрокаДерева.ЭтоКонтекст = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя",СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("СтрокаДерева",СтрокаДерева.ИдСтроки);
	СтруктураПараметров.Вставить("ИмяФичи",ДопПараметры.ИмяФичи);
	
	
	Шаги = Новый Массив;
	
	Если СтрокаДерева.Родитель.Строки[0].ЭтоКонтекст = Истина Тогда //значит надо добавить шаги контекста к нашим шагам
		Для каждого СтрСтроки Из СтрокаДерева.Родитель.Строки[0].Строки Цикл
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева);
			Шаги.Добавить(СтруктураШага);
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева);
		Шаги.Добавить(СтруктураШага);
	КонецЦикла;
	
	
	
	СтруктураПараметров.Вставить("Шаги",Шаги);
	
	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
	
КонецПроцедуры


&НаСервере
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева,МассивСценариевДляВыполнения,ДопПараметры)
	
	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		//СделатьСообщение("Запуск СценариоАутлайн пока не реализован. " + СтрокаДерева.Имя);
		ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения,,ДопПараметры);
		Возврат;
	КонецЕсли;	 
	
	//Сообщить(СтрокаДерева.Имя);
	
	ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения,ДопПараметры);
КонецПроцедуры


&НаСервере
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения,ТекИДСценария,ДопПараметры)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Фича = Истина Тогда
			ДопПараметры.Вставить("ИмяФичи",ДеревоСтроки.Имя);
		КонецЕсли;	
		
		Если ДеревоСтроки.Сценарий = Истина Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения,ДопПараметры);
		ИначеЕсли ДеревоСтроки.Пример = Истина Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель,МассивСценариевДляВыполнения,ДеревоСтроки,ДопПараметры)
		КонецЕсли; 
	Иначе	
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			
			
			Если СтрДеревоСтроки.Фича = Истина Тогда
				ДопПараметры.Вставить("ИмяФичи",СтрДеревоСтроки.Имя);
			КонецЕсли;	
			
			Если СтрДеревоСтроки.Сценарий = Истина Тогда
				Если ТекИДСценария <> Неопределено Тогда
					Если СтрДеревоСтроки.ИдСтроки = ТекИДСценария Тогда
						ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки,МассивСценариевДляВыполнения,ДопПараметры);
					КонецЕсли;	 
				Иначе	
					ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки,МассивСценариевДляВыполнения,ДопПараметры);
				КонецЕсли;	 
			Иначе	
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки,МассивСценариевДляВыполнения,ТекИДСценария,ДопПараметры);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры


Процедура ПроставитьИДРекурсивно(ДеревоСтроки,ИД,МассивСтрокДереваДанныеФормы)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		СтрокаДерева.ИДСтроки = ИД;
		МассивСтрокДереваДанныеФормы.Добавить();//просто добавим пустой элемент
		ИД = ИД + 1;
		ПроставитьИДРекурсивно(СтрокаДерева.Строки,ИД,МассивСтрокДереваДанныеФормы);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИДСтрокиВДереве(Дерево,МассивСтрокДереваДанныеФормы)
	Ид = 0;
	ПроставитьИДРекурсивно(Дерево.Строки,ИД,МассивСтрокДереваДанныеФормы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения,МассивСтрокДереваДанныеФормы,ТекИДСценария)
	ДеревоФорма = Объект.ДеревоТестов;
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов,МассивСтрокДереваДанныеФормы);
	
	ТекСценарий = Неопределено;
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ОбъектСервер.ДеревоТестов.Строки;
	КонецЕсли; 
	
	ДопПараметры = Новый Структура;
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий,МассивСценариевДляВыполнения,ТекИДСценария,ДопПараметры);
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьСтатусСценария(ИД)
	//СтрокаСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	//СценарийВыполнен = Истина;
	//Для каждого СтрШаг Из СтрокаСценария.Строки Цикл
	//	Если СтрШаг.Статус <> "Success" Тогда
	//		СценарийВыполнен = Ложь;
	//		Статус = СтрШаг.Статус;
	//		СтрокаСценария.ОписаниеОшибки = СтрШаг.ОписаниеОшибки;
	//		Прервать;
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//Если СценарийВыполнен Тогда
	//	ЭлементыФормы.тпДеревоТестов.Свернуть(СтрокаСценария); 
	//	СтрокаСценария.Статус = "Success";
	//Иначе	
	//	СтрокаСценария.Статус = Статус;
	//КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ПолучениеКонтекстаОбработки(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	//ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	//Попытка
	//	Форма = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//Если Форма = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	 
	//
	//
	//СтрТаблицаКонтекстовОбработок           = ТаблицаКонтекстовОбработок.Добавить();
	//СтрТаблицаКонтекстовОбработок.ИмяФайла  = ВыбранноеИмяФайла;
	//СтрТаблицаКонтекстовОбработок.Обработка = ТаблицаКонтекстовОбработок.Количество()-1;
	//
	//МассивКонтекстовОбработок.Добавить(Форма);
	//МассивИменКонтекстовОбработок.Добавить(ВыбранноеИмяФайла);
КонецПроцедуры


&НаКлиенте
Функция ПреобразоватьКДатеСтроку(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр,".");
	День = Число(Лев(Стр,Поз-1));
	Стр = Сред(Стр,Поз+1);
	
	Поз   = Найти(Стр,".");
	Месяц = Число(Лев(Стр,Поз-1));
	Стр   = Сред(Стр,Поз+1);
	
	Год   = Число(Стр);
	Если Год < 100 Тогда
		Год = Год + 2000;
	КонецЕсли;
	
	Зн = Дата(Год,Месяц,День);
	
	Зн = Формат(Зн,"ДФ=yyyyMMdd");
	Зн = "'" + Зн + "'";
	
	//Сообщить("" + НачСтр + " было преобразовано к " + Зн);
	Возврат Зн;
КонецФункции



&НаКлиенте
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	Поз = Найти(ИмяПроцедуры,"(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);
	КонецЕсли;	 
	
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	Если МассивАргументов <> Неопределено Тогда
		Для Ккк = 0 По МассивАргументов.Количество()-1 Цикл
			Элем = МассивАргументов[Ккк];
			Команда = Команда + Элем;
			Если Ккк < МассивАргументов.Количество()-1 Тогда
				Команда = Команда + ",";
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;	 
	
	Команда = Команда + ")";
	
	Отладка("Выполняю: " + Команда);
	Выполнить(Команда);
КонецПроцедуры


&НаКлиенте
Функция СформироватьОписаниеОшибки(Знач Стр,ИмяФайла,ИмяПроцедуры) Экспорт
	Стр = СтрЗаменить(Стр,Символы.ПС,"");
	Стр = СтрЗаменить(Стр,Символы.ВК,"");
	
	//СтрПоиска = "Рефлектор.ВызватьМетод(СтрТабицаКонтекстовОбработок.Обработка, ИмяПроцедуры, МассивАргументов);";
	//Поз = Найти(Стр,СтрПоиска);
	//Если Поз > 0 Тогда
	//	ПромСтр = Сред(Стр,Поз + СтрДлина(СтрПоиска));
	//	Если ПромСтр <> "" Тогда
	//		Стр = ПромСтр;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Поз1 = Найти(Стр,"Метод объекта не обнаружен");
	//Если Поз1 > 0 Тогда
	//	Стр = Сред(Стр,Поз1);
	//	Поз2 = Найти(Стр,")");
	//	Стр = Лев(Стр,Поз2);
	//КонецЕсли;
	////Стр = СтрЗаменить(Стр,СтрПоиска,"");
	
	Стр = Стр + "; ИмяФайла="+ИмяФайла + ", ИмяПроцедуры="+ИмяПроцедуры;
	//Возврат ПерекодировкаДляОтправкиОшибки(Стр);
	Возврат Стр;
КонецФункции


&НаКлиенте
Функция  ПолучитьРезультатПрохожденияТестовСценария(ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено  Тогда
		Сообщить("Неизвестная ошибка в ПолучитьРезультатПрохожденияТестовСценария!");
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МассивРезультатПрохожденияТестовСценария[ИД]; 
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьТранзакциюСервер()
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеЗавершенияСценария(СтрокаСценария)
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередОкончаниемСценария");
	
	ОтменитьТранзакциюСервер();
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкриншот(ИмяФайла)
	Команда = "C:\Distrib\nircmd\nircmd.exe savescreenshot " + ИмяФайла;
	ЗапуститьПриложение(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоВыполненияШага(СтруткураШага)
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	
	ИмяФайлаСкриншота = Объект.КаталогOutputИнструкцияHTML + "\ScreenShot_" + СтрЗаменить(ТекущаяУниверсальнаяДатаВМиллисекундах(),Символы.НПП,"") + ".png";
	
	СделатьСкриншот(ИмяФайлаСкриншота);
	
	
	ТД = Новый ТекстовыйДокумент();
	ТД.Прочитать(ИмяФайлаЛогаИнструкцииHTML,КодировкаТекста.UTF8);
	
	ТД.ДобавитьСтроку("НачалоШага");
	ТД.ДобавитьСтроку("ИмяШага=" + СтруткураШага.Имя);
	ТД.ДобавитьСтроку("Скриншот=" + ИмяФайлаСкриншота);
	
	ТД.Записать(ИмяФайлаЛогаИнструкцииHTML,КодировкаТекста.UTF8);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШаг()
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Если (Шаги.Количество()-1) < ТекИД_ШагаВМассиве Тогда
		//значит все шаги выполнены, запускаем следующий сценарий
		//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария = МассивСтрокДереваДанныеФормы[ИДСтрокиСценария];
		
		ДействияПослеЗавершенияСценария(СтрокаСценария);
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		Возврат;
	КонецЕсли;	 
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	
	//ТекШаг.СтрокаШага.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = ТекШаг.СтрокаШага;
	
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	//ПолучитьЭлементы()
	
	
	//СтрокаШага = Объект.ДеревоТестов.НайтиПоИдентификатору(ИДСтрокиШага);
	СтрокаШага     = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	СтрокаСценария = МассивСтрокДереваДанныеФормы[ИДСтрокиСценария];
	
	Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
	
	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя",СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	
	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда
		//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		
		//СтрокаШага.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СтрокаШага.Статус = "Pending";
		СтрокаШага.ТипКартинки = 6;
		ОписаниеОшибки = "Пустой адрес снипета у шага: " + ТекШаг.Имя;
		//СтрокаШага.ОписаниеОшибки = ОписаниеОшибки;
		
		//СтрокаСценария.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//СтрокаСценария.ОписаниеОшибки = ОписаниеОшибки;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		СделатьСообщение(ОписаниеОшибки);
		
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		ДействияПослеЗавершенияСценария(СтрокаСценария);
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		
		Возврат;
	КонецЕсли;	 
	
	
	//ТаблицаКонтекстовОбработок
	ИД = МассивИменКонтекстовОбработок.Найти(АдресСнипета);
	//Если ИД = Неопределено Тогда
	//	МассивИменКонтекстовОбработок.Добавить(АдресСнипета);
	//	////ОбработкаТеста = ВнешниеОбработки.Создать(АдресСнипета);
	//	//
	//	//ДополнительныеПараметры = Новый Структура;
	//	//Если ЕстьПоддержкаНемодальныхФорм Тогда
	//	//	Оповещение = Вычислить("Новый ОписаниеОповещения(""ПолучениеКонтекстаОбработки"", ЭтаФорма, ДополнительныеПараметры)");
	//	//	Выполнить("НачатьПомещениеФайла(Оповещение,, АдресСнипета, Ложь, УникальныйИдентификатор);");
	//	//Иначе
	//	//	АдресХранилища = "";
	//	//	ПоместитьФайл(АдресХранилища, АдресСнипета, , Ложь, УникальныйИдентификатор);
	//	//	//ПодключитьВнешнююОбработку(АдресХранилища);
	//	//	Результат = Неопределено;
	//	//	ПолучениеКонтекстаОбработки(Результат,АдресХранилища,АдресСнипета,ДополнительныеПараметры);
	//	//КонецЕсли;
	//	//
	//	////МассивКонтекстовОбработок.Добавить(ОбработкаТеста);
	//	ИД = МассивИменКонтекстовОбработок.Количество()-1;
	//КонецЕсли;	 
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	
	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;
	
	
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		Если Элем.Тип = "Строка" Тогда
			МассивПараметров.Добавить("""" + Элем.Значение + """");
		ИначеЕсли Элем.Тип = "Число" Тогда
			МассивПараметров.Добавить(Элем.Значение);
		ИначеЕсли Элем.Тип = "Дата" Тогда
			МассивПараметров.Добавить(ПреобразоватьКДатеСтроку(Элем.Значение));
		КонецЕсли;	 
	КонецЦикла;
	
	
	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	Попытка
		ОбработкаТеста.Контекст = ОбъектКонтекст;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		ОбъектКонтекст = ОбработкаТеста.Контекст;
		
		ШагВыполнен = Истина;
		
	Исключение
		Отладка("ОписаниеОшибки()="+ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		Если Найти(ОписаниеОшибкиСтр,"}: Не реализовано.") > 0 Тогда //тогда это Pending
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не реализован.");
			СтрОшибка = "Не реализовано.";
			ШагНеРеализован = Истина;
		Иначе
			//значит возникла ошибка
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не выполнен.");
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибки(),АдресСнипета,ИмяПроцедуры);
			СделатьСообщение(СтрОшибка);
		КонецЕсли;
	КонецПопытки;
	
	
	//СтрокаШага = ТекШаг.СтрокаШага;	
	//СтрокаШага.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	
	Если ШагВыполнен Тогда
		СтрокаШага.Статус = "Success";
		СтрокаШага.ТипКартинки = 4;
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		ПерейтиКВыполнениюСледующегоШага();
	Иначе	
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
			СтрокаШага.ТипКартинки = 6;
		Иначе
			СтрокаШага.Статус = "Failed";
			СтрокаШага.ТипКартинки = 5;
		КонецЕсли; 
		//СтрокаШага.ОписаниеОшибки = СтрОшибка;
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",СтрОшибка);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		//СтрокаСценария                = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		//СтрокаСценария.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//СтрокаСценария.ОписаниеОшибки = СтрОшибка;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",СтрОшибка);
		
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		ДействияПослеЗавершенияСценария(СтрокаСценария);
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		
		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД_ШагаВМассиве,РезультатПрохожденияТестовШагов);
		
		
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапретитьВыполнениеШагов() Экспорт
	Объект.ОстановитьВыполнениеШагов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеШагов() Экспорт
	Объект.ОстановитьВыполнениеШагов = Ложь;
	ПерейтиКВыполнениюСледующегоШага();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТранзакцияАктивнаСервер()
	Возврат ТранзакцияАктивна();
КонецФункции	

&НаКлиенте
Процедура ПерейтиКВыполнениюСледующегоШага()
	Если Объект.ОстановитьВыполнениеШагов Тогда
		Возврат;
	КонецЕсли;	 
	
	
	Если ТекИД_ШагаВМассиве >= 0 Тогда
		//логируем выполненный шаг
		Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
		ТекШаг = Шаги[ТекИД_ШагаВМассиве];
		ДобавитьВЛогИнструкцииHTMLНачалоВыполненияШага(ТекШаг);	
	КонецЕсли;	 
	
	
	
	ТекИД_ШагаВМассиве = ТекИД_ШагаВМассиве + 1;
	
	
	
	Если (НЕ Объект.ВыполнятьШагиАссинхронно) или ТранзакцияАктивнаСервер() Тогда //если транзакция активна, то нельзя использовать таймер
		ВыполнитьШаг();//просто вызываем следующий шаг
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьШаг",Объект.ИнтервалВыполненияШага,Истина); //вызвываем шаг через таймер, чтобы дать всем формам прорисоваться
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД,РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид+1;
		Если Шаги.Количество() < (Ид+1) Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекШаг = Шаги[Ид];
		
		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя",ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки","Пропущен");
		РезультатПрохожденияШага.Вставить("Статус","Skipped");
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Функция ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева)
	Если СтрокаДерева.Фича = Истина Тогда
		Возврат СтрокаДерева.ПолныйПуть;
	КонецЕсли;	 
	
	Возврат ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДерева.ПолучитьРодителя());
КонецФункции	


&НаКлиенте
Функция ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета)
	ИД = МассивИменКонтекстовОбработок.Найти(АдресСнипета);
	Если ИД = Неопределено Тогда
		ВызватьИсключение "Не известная ошибка в ПолучитьКонтекстТестаПоАдресСнипета. АдресСнипета="+АдресСнипета;
	Иначе
		ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	КонецЕсли;	 
	
	Возврат ОбработкаТеста;
КонецФункции	

&НаКлиенте
Процедура ВызватьМетодСценарияЕслиОнЕсть(СтрокаДереваСценария, ИмяПроцедуры,МассивПараметров = Неопределено)
	ИмяФичаФайла = ОпределитьИмяФичаФайлаПоСтрокеДерева(СтрокаДереваСценария);
	Если ИмяФичаФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Файл         = Новый Файл(ИмяФичаФайла);
	КаталогФичи  = Файл.Путь;
	АдресСнипета = КаталогФичи + "step_definitions\" + Файл.ИмяБезРасширения + ".epf";
	
	
	ФайлПроверкаСуществования = Новый Файл(АдресСнипета);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Возврат;
	КонецЕсли;	 
	
	ОбработкаТеста = ПолучитьКонтекстТестаПоАдресСнипета(АдресСнипета);
	
	ОбработкаТеста.Контекст = ОбъектКонтекст;
	ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
	ОбъектКонтекст = ОбработкаТеста.Контекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьСозданиеИнструкцииHTML()
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	ФайлПроверкаСуществования = Новый Файл(Объект.КаталогOutputИнструкцияHTML);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Стр = "Файл КаталогOutputИнструкцияHTML: " + Объект.КаталогOutputИнструкцияHTML + " не существует!";
		Сообщить(Стр);
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	Если Прав(Объект.КаталогOutputИнструкцияHTML,1) = "\" Тогда
		Объект.КаталогOutputИнструкцияHTML = Сред(Объект.КаталогOutputИнструкцияHTML,СтрДлина(Объект.КаталогOutputИнструкцияHTML)-1);
	КонецЕсли;	 
	
	ИмяФайлаЛогаИнструкцииHTML = СтрЗаменить(Объект.КаталогOutputИнструкцияHTML + "\InstrHTML_" + СтрЗаменить(СтрЗаменить(ТекущаяДата(),":","")," ","_") + "_" + ТекущаяУниверсальнаяДатаВМиллисекундах() + "_log.txt",Символы.НПП,"");
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Записать(ИмяФайлаЛогаИнструкцииHTML,КодировкаТекста.UTF8);
	
	//ДобавитьЛогИнструкцииHTML(ИмяФайлаЛогаИнструкцииHTML,"");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнинтьСценарийАссинхронноТаймер()
	ОбъектКонтекст = Новый Структура;
	
	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве-1);
	КонецЕсли; 
	
	Если (МассивСценариевДляВыполнения.Количество()-1) < ТекИД_СценарияВМассиве Тогда
		Сообщить(" ");
		
		СоздатьФайлHTMLИнструкции();
		
		СделатьСообщение("Все сценарии обработаны!");
		
		
		//Если ДелатьОтчетВФорматеАллюр Тогда
		//	СформироватьОтчетАллюр();
		//КонецЕсли; 
		
		Возврат;
	КонецЕсли;	 
	
	Сообщить(" ");
	СделатьСообщение("Работаю по сценарию: " + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	
	//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	
	РезультатПрохожденияТестовСценария = Новый Структура;
	РезультатПрохожденияТестовСценария.Вставить("ИДСтроки",ИДСтроки);
	РезультатПрохожденияТестовСценария.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов",РезультатПрохожденияТестовШагов);
	
	
	ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария,ИДСтроки);
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария = МассивСтрокДереваДанныеФормы[ИДСтрокиСценария];
	Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСценария.ПолучитьИдентификатор();
	//ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = СтрокаДерева;
	
	
	ДобавитьВЛогИнструкцииHTMLНачалоСценария(МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве]);
	
	
	ВызватьМетодСценарияЕслиОнЕсть(СтрокаСценария, "ПередНачаломСценария");
	
	ТекИД_ШагаВМассиве = -1;
	ПерейтиКВыполнениюСледующегоШага();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВЛогИнструкцииHTMLНачалоСценария(СтруктураСценария)
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;  
	
	ТД = Новый ТекстовыйДокумент();
	ТД.Прочитать(ИмяФайлаЛогаИнструкцииHTML,КодировкаТекста.UTF8);
	
	ТД.ДобавитьСтроку("НачалоСценария");
	ТД.ДобавитьСтроку("ИмяСценария=" + СтруктураСценария.Имя);
	ТД.ДобавитьСтроку("ИмяФичи=" + СтруктураСценария.ИмяФичи);
	
	ТД.Записать(ИмяФайлаЛогаИнструкцииHTML,КодировкаТекста.UTF8);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария,ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено Тогда
		МассивИДСтрокиДерева.Добавить(ИДСтроки);
		МассивРезультатПрохожденияТестовСценария.Добавить(РезультатПрохожденияТестовСценария);
	Иначе
		МассивРезультатПрохожденияТестовСценария[ИД] = РезультатПрохожденияТестовСценария;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы)
	Для каждого ЭлементДерева Из ДеревоФормы Цикл
		ИДСтроки = ЭлементДерева.ИДСтроки;
		МассивСтрокДереваДанныеФормы[ИДСтроки] = ЭлементДерева;
		
		ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормы()
	ДеревоФормы = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарии(ТекСценарий = Неопределено) Экспорт
	Объект.ОстановитьВыполнениеШагов = Ложь;
	
	ОчиститьПоляВДеревеДляПостроенияОтчетовСервер();
	
	//МассивКонтекстовОбработок     = Новый Массив;
	//МассивИменКонтекстовОбработок = Новый Массив;
	
	
	МассивИДСтрокиДерева                     = Новый Массив;
	МассивРезультатПрохожденияТестовСценария = Новый Массив;
	
	
	
	
	МассивСценариевДляВыполнения = Новый Массив;
	МассивСтрокДереваДанныеФормы = Новый Массив;
	ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения,МассивСтрокДереваДанныеФормы,ТекСценарий);
	
	
	ЗапомнитьСтрокиДереваДанныеФормы();
	
	
	
	ПодготовитьСозданиеИнструкцииHTML();	
	
	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = 0;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;	 
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарииФорма(Команда)
	СделатьПараметрыКорректными();
	
	
	ОчиститьСообщения();
	
	ВыполнитьСценарии();
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьФайлHTMLИнструкции()
	Если НЕ Объект.СоздаватьИнструкциюHTML Тогда
		Возврат;
	КонецЕсли;	
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайлаЛогаИнструкцииHTML,КодировкаТекста.UTF8);
	
	МассивСценариев = Новый Массив;
	МассивШагов     = Неопределено;
	
	КолСтрок = ТД.КоличествоСтрок();
	Для Ккк = 1 По КолСтрок Цикл
		Стр = ТД.ПолучитьСтроку(Ккк);
		
		Если Стр = "НачалоСценария" Тогда
			ТекСтруктура = Новый Структура;
			МассивШагов  = Новый Массив;
			
			ТекСтруктура.Вставить("МассивШагов",МассивШагов);
			
			МассивСценариев.Добавить(ТекСтруктура);
			Продолжить;
		ИначеЕсли Стр = "НачалоШага" Тогда
			ТекСтруктура = Новый Структура;
			
			МассивШагов.Добавить(ТекСтруктура);
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр,"=");
		Если Поз = 0 Тогда
			ВызватьИсключение "Странный параметр в логе инструкции HTML: " + Стр;
		КонецЕсли;	 
		
		ИмяПараметра      = Лев(Стр,Поз-1);
		ЗначениеПараметра = Сред(Стр,Поз+1);
		
		ТекСтруктура.Вставить(ИмяПараметра,ЗначениеПараметра);
	КонецЦикла;
	
	
	
	Страница = Новый ТекстовыйДокумент;
	Страница.ДобавитьСтроку("<html>");
	Страница.ДобавитьСтроку("<body>");
	//Страница.ДобавитьСтроку("Привет мир");
	
	Для каждого Сценарий Из МассивСценариев Цикл
		Страница.ДобавитьСтроку("<p align=""center"" style=""font-size:40px"">" + Сценарий.ИмяСценария + "</p>");
		
		МассивШагов = Сценарий.МассивШагов;
		НомШага = 0;
		Для каждого Шаг Из МассивШагов Цикл
			НомШага = НомШага + 1;
			Страница.ДобавитьСтроку("");
			Страница.ДобавитьСтроку("<p align=""left"" style=""font-size:30px"">" + ПолучитьФорматированныйНомерШага(НомШага) + ". " + Шаг.ИмяШага + "</p>");
			Страница.ДобавитьСтроку("<img src=" + Шаг.Скриншот + ">");
		КонецЦикла;
	КонецЦикла;
	
	
	Страница.ДобавитьСтроку("</body>");
	Страница.ДобавитьСтроку("/<html>");
	Страница.Записать(Объект.КаталогOutputИнструкцияHTML + "\Insr.HTML");

	// 
	//ИмяФайлаЛогаИнструкцииHTML
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФорматированныйНомерШага(НомШага)
	Стр = Строка(НомШага);
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Пока СтрДлина(Стр) < 2 Цикл
		Стр = "0" + Стр;
	КонецЦикла; 
	
	Возврат Стр; 
КонецФункции	




//портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//был взят релиз 3.0.0.3
//{ МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;
	
КонецПроцедуры


&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Период.ДатаНачала или _Дата > _Период.ДатаОкончания Тогда
		представление = ПредставлениеПериода(_Период.ДатаНачала, _Период.ДатаОкончания, "ФП = Истина");
		СообщениеОшибки = "Переданный параметр ("+Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")+") не входит в период "+представление+", а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Дата2-2 или _Дата > _Дата2+2 Тогда
		СообщениеОшибки = "Переданная дата ("+Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")+") не равна дате ("+Формат(_Дата2, "ДФ='dd.MM.yyyy HH:mm:ss'")+") с точностью до 2-х секунд, а хотели, чтобы они равнялись." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
		ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
		ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ("Ожидали, что вторым параметром будет передан массив параметров для метода <"+ИмяМетода+">, а получили другой объект с типом <"+ТипПараметра+">");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = "Параметры")
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ("Ожидали, что третьим параметром будет передан массив параметров для метода <"+ИмяМетода+">, а получили другой объект с типом <"+ТипПараметра+">");
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ВызватьОшибкуПроверки("Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	Если фЗаполнено Тогда
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ВызватьИсключение ("ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ВызватьОшибкуПроверки("Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<"+строка+">";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<"+подстрокаПоиска+">";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		СообщениеОшибки = "Искали в "+ПредставлениеСтроки+" подстроку "+ПредставлениеПодСтроки+", но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") или ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие") 
		или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = "Утверждение ""ПроверитьВхождениеВКоллекцию"" не умеет работать с типом коллекции <"+ТипКоллекции+">." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = "Не нашли элемент <"+Элемент+"> в коллекции, а хотели, чтобы он был в коллекции." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = "")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "") Экспорт
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "") Экспорт
	Объект().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры


&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектНаСервере;
КонецФункции


&НаСервере
Процедура ДобавитьШагиВМассив(ДеревоСтроки,Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Примеры = Истина Тогда
			//эти сценарии уже учтены
			Продолжить;
		КонецЕсли; 
		
		Если СтрДеревоСтроки.Шаг = Истина Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить("Имя",СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить("АдресСнипета",СтрДеревоСтроки.АдресСнипета);
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;	 
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
	КонецЦикла	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки,МассивФич,МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Фича = Истина Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;	 
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки,МассивФич,МассивШагов);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров,МассивФич,МассивШагов)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Дерево = ОбъектСервер.ДеревоТестов;
	
	
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки,МассивФич,МассивШагов);
	
	
	//СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	
	//ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	//ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	//FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	СтруктураПараметров.Вставить("КонтекстVanessaBehavoir",ОбъектСервер);
	
	
	//СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	//FeatureReader.СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	//УдалитьФайлы(ВременноеИмяФайла);
	
	СтруктураПараметров.КонтекстVanessaBehavoir = "";
	
	//ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры



&НаКлиенте
Процедура ВыполнитьКомандуОС(Стр)
	КомандаСистемы(Стр);
КонецПроцедуры

&НаКлиенте
Функция ВПеременнойPathЕстьUnpackV8_exe()
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	Стр = "V8Unpack.exe > " + ИмяФайлаЛога;
	
	ВыполнитьКомандуОС(Стр);
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаЛога,"UTF-8");
	
	СтрокаВозврата = Неопределено;
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		
		//"V8Upack Version 2.00 Copyright (c) 2008 Denis Demidov 2008-03-30"
		Если Найти(НРег(Стр),"version") > 0 Тогда
			Текст.Закрыть();
			Возврат Истина;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	
	Возврат Ложь;
КонецФункции


&НаКлиенте
Процедура ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников,ИмяФайлаОригинала)
	
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если ФайлВерсии.Существует() Тогда
		УдалитьФайлы(ФайлВерсии.ПолноеИмя);
	КонецЕсли;	 
	
	Файл   = Новый Файл(ИмяФайлаОригинала);
	Версия = Строка(Файл.ПолучитьВремяИзменения());
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаВерсииИсходников,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку("Версия="+Версия); 
	
	ЗТ.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция РаспаковатьEPF(ИмяФайла)
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	ЭтоУФ               = Истина;
	Попытка
		
		Файл = Новый Файл(ИмяФайла);
		
		ИмяКаталогаДляИсходников = Файл.Путь + "Src";
		ИмяФайлаВерсииИсходников = Файл.Путь + "Src\" + Файл.ИмяБезРасширения + "\SrcVersion.vb";
		
		Если ГенерироватьУФ Тогда
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\Form\Форма\Форма.txt";
		Иначе	
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		КонецЕсли;	 
		
		
		//ВерсияИсходников = ПолучитьВерсиюИсходников(ИмяФайлаВерсииИсходников);
		//Если ВерсияИсходников = Строка(Файл.ПолучитьВремяИзменения()) Тогда
		//	Отладка("Не стал распаковывать " + ИмяФайла + ", т.к. совпали версия файла и исходников. " + ВерсияИсходников);
		//	Возврат ПутьКФайлуМодуля;
		//КонецЕсли;	 
		//СделатьСообщение("Надо распаковывать " + ИмяФайла + ", т.к. не совпали версия файла и исходников.");
		
		
		УдалитьФайлы(ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения);
		ФайлКаталогSrc = Новый Файл(ИмяКаталогаДляИсходников);
		Если Не ФайлКаталогSrc.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаДляИсходников);
		КонецЕсли;	 
		
		СтрокаРазборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py  """ +  ИмяФайла + """ """ + ИмяКаталогаДляИсходников + """";
		СделатьСообщение("Делаю распаковку " + Файл.ПолноеИмя);
		Отладка("Строка распаковки: " + СтрокаРазборкиEpf);
		
		#Если Клиент Тогда
		КомандаСистемы(СтрокаРазборкиEpf,КаталогИнструментов);
		#КонецЕсли
		//ВыполнитьКомандуОС(СтрокаРазборкиEpf);
		
		
		Файл = Новый Файл(ПутьКФайлуМодуля);
		Если Не Файл.Существует() Тогда
			СделатьСообщение("Не найден файл после распаковки: " + ПутьКФайлуМодуля);
			Если ЭтоУФ Тогда
				СделатьСообщение("Возможно это обработка для обычных форм, а не для управляемых форм.");
			Иначе	
				СделатьСообщение("Возможно это обработка для управляемых форм, а не для обычных форм.");
			КонецЕсли;	 
			Возврат Неопределено;
		КонецЕсли;	 
		
		ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников,ИмяФайла);
		
		Возврат ПутьКФайлуМодуля;
	Исключение
		СделатьСообщение("Не смог распаковать " + ИмяФайла);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции


&НаКлиенте
Функция СоздатьПустуюСтруктуруEpf()
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи","");
	Стр.Вставить("ИмяФайлаEpf","");
	Стр.Вставить("ВременноеИмяМодуля","");
	Стр.Вставить("ТелоМодуля","");//таблица значений
	Стр.Вставить("ИмяМодуляEpf","");
	Стр.Вставить("КаталогИсходников","");
	Стр.Вставить("ФайлEpfПересоздавался",Ложь);
	
	Возврат Стр;
КонецФункции


&НаСервере
Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные,ШагСтрокДляМодуля)
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	
	
	ПромФайл = Новый Файл(ПутьКФайлу);
	Если Не ПромФайл.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует!";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗначениеВСтрокуВнутр(Тзн);
КонецФункции	

&НаКлиенте
Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	//ВызватьИсключение "НЕ реализовано ЗагрузитьТелоМодуляВТаблицуЗначений";
	ФайлПроверкаСуществования = Новый Файл(ПутьКФайлу);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		СтрОшибки = "Файл """ + ПутьКФайлу + """ не существует!";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;	 
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные,ШагСтрокДляМодуля);
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ДвДанныеvbFeatureReader)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	
	FeatureReader.ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ДвДанныеvbFeatureReader)
	ДобавитьНачальноеЗаполнениеВМодульСервер(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ДвДанныеvbFeatureReader);
	//ВызватьИсключение "Не реализовано ДобавитьНачальноеЗаполнениеВМодуль";
КонецПроцедуры

&НаКлиенте
Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ИмяТекущейФичи,GenerateEpf,ДвДанныеvbFeatureReader)
	КаталогИнструментов = Объект.КаталогИнструментов;
	ГенерироватьУФ      = Объект.ГенерироватьУФ;
	
	
	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + ".epf";
	
	//СтруктураОписанияEpf.ИмяМодуляEpf       = КаталогИнструментов + "\src" + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + "\ObjectModule.txt";
	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если ФайлEpf.Существует() Тогда //т.е. если мы не первый раз работаем с данной фичей
			//Если ЭтоФайлДляОбычныхФорм(СтруктураОписанияEpf.ИмяФайлаEpf) Тогда
			//КонецЕсли;	 
			
			СтруктураОписанияEpf.ИмяМодуляEpf          = РаспаковатьEPF(СтруктураОписанияEpf.ИмяФайлаEpf);
			СтруктураОписанияEpf.ФайлEpfПересоздавался = Истина;
		КонецЕсли;	 
	КонецЕсли;
	
	СтруктураОписанияEpf.КаталогИсходников = КаталогИнструментов + "\lib\TemplateEpf";
	Если ГенерироватьУФ Тогда
		СтруктураОписанияEpf.КаталогИсходников = КаталогИнструментов + "\lib\TemplateEpfUF";
	КонецЕсли;	   
	
	//если уже были исходники, то надо использовать их
	ЕстьКаталогИсходников = Ложь;
	ПромИмяФайла = ОтносительныйКаталогФичи + "\step_definitions\src\" + ИмяТекущейФичи;
	ПромИсходникиФайл = Новый Файл(ПромИмяФайла);
	Если ПромИсходникиФайл.Существует() Тогда
		ЕстьКаталогИсходников = Истина;
		СтруктураОписанияEpf.КаталогИсходников = ПромИмяФайла;
	КонецЕсли;	 
	
	
	СтруктураОписанияEpf.ВременноеИмяМодуля = СтруктураОписанияEpf.КаталогИсходников + "\ObjectModule_" + ИмяТекущейФичи + ".txt";
	Если ГенерироватьУФ Тогда
		СтруктураОписанияEpf.ВременноеИмяМодуля = СтруктураОписанияEpf.КаталогИсходников + "\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0_" + ИмяТекущейФичи + ".txt";
	КонецЕсли;	 
	
	//ПромИмяФайла = ОтносительныйКаталогФичи + "\step_definitions\src\" + ИмяТекущейФичи + "\ObjectModule_" + ИмяТекущейФичи + ".txt";
	
	//Сообщить("СтруктураОписанияEpf.ИмяМодуляEpf="+СтруктураОписанияEpf.ИмяМодуляEpf);
	
	
	УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	
	Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если Не Файл.Существует() Тогда
		//Сообщить(СтруктураОписанияEpf.ВременноеИмяМодуля);
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		ЗТ.Закрыть();
	КонецЕсли;
	
	
	Файл = Новый Файл(СтруктураОписанияEpf.ИмяМодуляEpf); //значит надо загрузить модуль из исходников
	Если Файл.Существует() Тогда
		СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ИмяМодуляEpf);
	Иначе
		СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
		//значит создаём файл первый разделим
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ДвДанныеvbFeatureReader);
	КонецЕсли;
	
	
	
	
	//МассивДляСозданияEpf.Добавить(СтруктураОписанияEpf);
	//Отладка("Добавляю фичу " + СтруктураОписанияEpf.ИмяФичи + " в МассивДляСозданияEpf.");
	
	
	Возврат СтруктураОписанияEpf;
КонецФункции

&НаСервереБезКонтекста
Функция СнипетыПолучитьСнипетыПоШагам(Шаги,ДвДанныеvbFeatureReader)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	Возврат FeatureReader.СнипетыПолучитьСнипетыПоШагам(Шаги);
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля,Снипеты,ДвДанныеvbFeatureReader,ИмяФайлаФичи)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	FeatureReader.ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля,Снипеты,Истина,ИмяФайлаФичи);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,Шаг,ШагСтрокДляМодуля,АдресСнипета,ГенерироватьУФ,ДвДанныеvbFeatureReader)
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	FeatureReader.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,Шаг,ШагСтрокДляМодуля,АдресСнипета,ГенерироватьУФ,Истина);
КонецПроцедуры


&НаСервере
Функция ПолучитьТелоМодуляВМассивСервер(Стр)
	ТелоМодуля = ЗначениеИзСтрокиВнутр(Стр);
	ТелоМодуля.Сортировать("НомСтр");
	Массив = ТелоМодуля.ВыгрузитьКолонку("Стр");
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура УдалитьИзФайлаМодуляФормыУФТестМодуляФормы(ИмяФайлаФормаУФ)
	Файл = Новый Файл(ИмяФайлаФормаУФ);
	
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "УдалитьИзФайлаМодуляФормыУФТестМодуляФормы. Файл " + ИмяФайлаФормаУФ + " не найден!";
	КонецЕсли;	 
	
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("txt");
	//Сообщить("ВременноеИмяФайла=" + ВременноеИмяФайла);
	
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
	
	
	НачалоМодуля = -1;
	КонецМодуля  = -1;
	
	НашлиМодуль = Ложь;
	
	КолСкобок1  = 0;
	КолСкобок2  = 0;
	НомерСтроки = 0;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомерСтроки = НомерСтроки + 1;
		
		КолСкобок1 = КолСкобок1 + СтрЧислоВхождений(Стр,"{");
		КолСкобок2 = КолСкобок2 + СтрЧислоВхождений(Стр,"}");
		
		//Сообщить("Строка №" + НомерСтроки + ", " + КолСкобок1 + ", " + КолСкобок2 + ": " + Стр);
		
		//Если НомерСтроки = 303 Тогда
		//	ыва = 1;
		//КонецЕсли;	 
		
		
		
		
		
		Если (НачалоМодуля > 0) И НЕ НашлиМодуль Тогда
			Если Лев(Стр,1) = "{" Тогда
				КонецМодуля = НомерСтроки;
				ЗТ.ЗаписатьСтроку(""","); 
				ЗТ.ЗаписатьСтроку(Стр); 
				НашлиМодуль = Истина;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если (НомерСтроки > 2) И (НачалоМодуля = -1) И НЕ НашлиМодуль Тогда
			Если (КолСкобок1 - КолСкобок2) = 1 Тогда //значит сейчас начинается модуль
				НачалоМодуля = НомерСтроки;
				ЗТ.ЗаписатьСтроку("},""//начало текста модуля"); 
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		
		Если (НачалоМодуля > 0) и НЕ НашлиМодуль Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
		
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	
	Если Не НашлиМодуль Тогда
		ВызватьИсключение "Не смог найти код модуля формы в файле ИмяФайлаФормаУФ!";
	КонецЕсли;	 
	
	
	Отладка("Копирю файл " + ВременноеИмяФайла + " в " + ИмяФайлаФормаУФ);
	КопироватьФайл(ВременноеИмяФайла,ИмяФайлаФормаУФ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,ИмяФичи)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлОсноваОбработки,"UTF-8");
	
	
	ВременноеИмяФайла = ИмяФайлОсноваОбработки + "_Temp";
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,"TemplateEpf",ИмяФичи);
		Стр = СтрЗаменить(Стр,"Template epf",ИмяФичи);
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	Текст = "";
	//Приостановить(500);
	
	
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	ПереместитьФайл(ВременноеИмяФайла,ИмяФайлОсноваОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Файл = Новый Файл(Путь);
	Если Путь = "" Тогда
		ВызватьИсключение "Передан пустой путь в процедуру ""СоздатьКаталогЕслиЕгоНет""!";
	КонецЕсли;	 
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
		Отладка("Создан каталог: " + Путь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf)
	
	ЭтоУФ = Истина;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать("НомСтр");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
	КонецЕсли;	 
	
	
	
	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если ГенерироватьУФ Тогда
		ИмяФайлаФормаУФ = КаталогИнструментов + "\lib\TemplateEpfUF\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0_template";
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			ИмяФайлаФормаУФ = СтруктураОписанияEpf.КаталогИсходников + "\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
			
			УдалитьИзФайлаМодуляФормыУФТестМодуляФормы(ИмяФайлаФормаУФ);
			
			ФайлИмяФайлаФормаУФ = Новый Файл(ИмяФайлаФормаУФ);
			Если Не ФайлИмяФайлаФормаУФ.Существует() Тогда
				ВызватьИсключение "Ошибка перегенерации EPF. Файл " + ИмяФайлаФормаУФ + " не найден.";
			КонецЕсли;	 
		КонецЕсли;	 
		//ИмяФайлаФормаУФ = СтруктураОписанияEpf.ВременноеИмяМодуля;
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
		
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			ЗТ.ЗаписатьСтроку(Стр); 
			
			Если Стр = "},""//начало текста модуля" Тогда
				Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
					Если СтрТелоМодуля = "//начало текста модуля" Тогда
						Продолжить;
					КонецЕсли;	 
					
					//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
					СтрТелоМодуля = СтрЗаменить(СтрТелоМодуля,"""","""""");
					ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
					//ЗТ.Записать(Символы.ПС); 
				КонецЦикла;
			КонецЕсли;	 
		КонецЦикла;	
		
		
		Текст.Закрыть();
		ЗТ.Закрыть();
	Иначе	
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
			ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
			//ЗТ.Записать(Символы.ПС); 
		КонецЦикла;
		ЗТ.Закрыть();
	КонецЕсли;	 
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	
	//ПутьКИсходникам = КаталогИнструментов + "\lib\TemplateEpf\";
	//ИмяФайлаМодуляДляСборки = КаталогИнструментов + "\lib\TemplateEpf\ObjectModule.txt";
	
	//ФайлВременноеИмяМодуля = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
	
	
	
	ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "\ObjectModule.txt";
	Если ГенерироватьУФ Тогда
		ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
	КонецЕсли;	 
	
	УдалитьФайлы(ИмяФайлаМодуляДляСборки);
	ПереместитьФайл(СтруктураОписанияEpf.ВременноеИмяМодуля,ИмяФайлаМодуляДляСборки);
	Отладка("Переименовал в " + ИмяФайлаМодуляДляСборки);
	
	
	//ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
	//ИмяФайлОсноваОбработки         = КаталогИнструментов + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	ИмяФайлОсноваОбработкиTemplate = ПутьКИсходникам + "\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
	ИмяФайлОсноваОбработки         = ПутьКИсходникам + "\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	Если ГенерироватьУФ Тогда
		ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		ИмяФайлОсноваОбработки         = КаталогИнструментов + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	КонецЕсли;	 
	
	Файл_template = Новый Файл(ИмяФайлОсноваОбработкиTemplate);
	Если Файл_template.Существует() Тогда
		//это значит обработка создаётся в первый раз
		КопироватьФайл(ИмяФайлОсноваОбработкиTemplate,ИмяФайлОсноваОбработки);
		ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,СтруктураОписанияEpf.ИмяФичи);
	КонецЕсли;	 
	
	
	ИмяВременнойEPF = ПолучитьИмяВременногоФайла("epf");
	
	ФайлРеальногоEPF = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
	СоздатьКаталогЕслиЕгоНет(ФайлРеальногоEPF.Путь);
	
	ФайлУжеЕсть = ФайлРеальногоEPF.Существует();
	
	Если ФайлУжеЕсть Тогда
		СделатьСообщение("Пересоздаю " + СтруктураОписанияEpf.ИмяФайлаEpf);
	Иначе	
		СделатьСообщение("Создаю " + СтруктураОписанияEpf.ИмяФайлаEpf);
	КонецЕсли; 
	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + ИмяВременнойEPF + """";
	//Если ГенерироватьУФ Тогда
	//	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py --compile " +  КаталогИнструментов + "\lib\TemplateEpfUF " + СтруктураОписанияEpf.ИмяФайлаEpf;
	//КонецЕсли;	 
	Отладка("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	
	
	ФайлВременногоEPF = Новый Файл(ИмяВременнойEPF);
	
	
	//retCode = "";
	//ЗапуститьПриложение(СтрокаСборкиEpf,,Истина,retCode);
	//КомандаСистемы(СтрокаСборкиEpf);
	ВыполнитьКомандуОС(СтрокаСборкиEpf);
	Если ФайлВременногоEPF.Существует() Тогда
		Если ФайлРеальногоEPF.Существует() Тогда
			УдалитьФайлы(ФайлРеальногоEPF.ПолноеИмя);
		КонецЕсли;	 
		КопироватьФайл(ФайлВременногоEPF.ПолноеИмя,ФайлРеальногоEPF.ПолноеИмя);
		Отладка("Файл " + ФайлРеальногоEPF.ПолноеИмя + " создан.");
	Иначе	
		СделатьСообщение("Ошибка создания файла " + ФайлРеальногоEPF.ПолноеИмя + "!!!");
		БылиОшибки = Истина;
	КонецЕсли;	 
	//Сообщить("retCode=" + retCode);
	УдалитьФайлы(ИмяФайлаМодуляДляСборки);
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	УдалитьФайлы(ФайлВременногоEPF.ПолноеИмя);
	

КонецПроцедуры


&НаКлиенте
Процедура УдалитьИсходникиEPF(ИмяФайлаEpf)
	ФайлEpf = Новый Файл(ИмяФайлаEpf);
	Если Не ФайлEpf.Существует() Тогда
		ВызватьИсключение "Файл " + ИмяФайлаEpf + " не существует!";
	КонецЕсли;	 
	
	
	Путь = ФайлEpf.Путь + "Src";
	ФайлИсходники = Новый Файл(Путь);
	Если ФайлИсходники.Существует() Тогда
		УдалитьФайлы(Путь);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf(СтруктураПараметров)
	
	Если Не ВПеременнойPathЕстьUnpackV8_exe() Тогда
		Сообщить("В переменной PATH не указан путь к ""v8unpack.exe"". Невозможно сделать сбор epf из исходников.");
		Возврат;
	КонецЕсли;	 
	
	
	
	ГенерироватьУФ          = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля       = СтруктураПараметров.ШагСтрокДляМодуля;
	DebugLog                = СтруктураПараметров.DebugLog;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	КонтекстVanessaBehavoir = СтруктураПараметров.КонтекстVanessaBehavoir;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	ДвДанныеvbFeatureReader = СтруктураПараметров.ДвДанныеvbFeatureReader;
	
	
	//ТаблицаКонтекстовОбработок = Новый ТаблицаЗначений;
	//ТаблицаКонтекстовОбработок.Колонки.Добавить("ИмяФайла");
	//ТаблицаКонтекстовОбработок.Колонки.Добавить("Обработка");
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	
	
	
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение);
	КонецЦикла;
	
	
	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном+1;
		Шаги = МассивШагов.Получить(Ном-1);
		
		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		СделатьСообщение("Работаю по фиче: " + ИмяФайлаФичи);
		
		МассивДляСозданияEpf = Новый Массив;
		//ОтносительныйКаталогФичи = СтрЗаменить(ФайлФичи.Путь,КаталогИнструментов,"");
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Прав(ОтносительныйКаталогФичи,1) = "\" Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи,СтрДлина(ОтносительныйКаталогФичи)-1);
		КонецЕсли;	 
		
		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ФайлФичи.ИмяБезРасширения,Истина,ДвДанныеvbFeatureReader);
		
		
		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги,ДвДанныеvbFeatureReader);
		ЗаполнитьПроцедуруПолучитьСписокТестов(СтруктураОписанияEpf.ТелоМодуля,Снипеты,ДвДанныеvbFeatureReader,ИмяФайлаФичи);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,ЭлемСнипет.StepDefinition,ЭлемСнипет.Шаг,ШагСтрокДляМодуля,ЭлемСнипет.АдресСнипета,ГенерироватьУФ,ДвДанныеvbFeatureReader);
		КонецЦикла;
		
		БылиОшибки = Ложь;
		СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf);
		
		
		Если СтруктураОписанияEpf.ФайлEpfПересоздавался Тогда
			УдалитьИсходникиEPF(СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;	 
	КонецЦикла;
	
	
	СделатьСообщение("Создание epf по фичам закончено.");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров)
	СделатьСообщение("Запускаю генерацию epf.");
	
	СделатьGenerateEpf(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработок() Экспорт
	Если Не Объект.РежимСамотестирования Тогда
		ОчиститьСообщения();
	КонецЕсли;  
	СделатьПараметрыКорректными();	
	
	//ПарсерФич = ПолучитьИнструментПарсерФич();
	//ПодключитьИнструментПарсерФич();
	
	ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	
	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",Объект.КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",Объект.КаталогФич);
	СтруктураПараметров.Вставить("DebugLog",Объект.DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ",Объект.ГенерироватьУФ);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля",ШагСтрокДляМодуля);
	//СтруктураПараметров.Вставить("КонтекстVanessaBehavoir",ЭтаФорма);
	СтруктураПараметров.Вставить("КаталогиБиблиотек",Объект.КаталогиБиблиотек);
	
	
	
	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДеревуИСоздатьEPFПоМассивуФич(СтруктураПараметров,МассивФич,МассивШагов);
	
	
	СтруктураПараметров.Вставить("МассивФич",МассивФич);
	СтруктураПараметров.Вставить("МассивШагов",МассивШагов);
	СтруктураПараметров.Вставить("ДвДанныеvbFeatureReader",ДвДанныеvbFeatureReader);
	
	
	
	СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	//ПарсерФич.СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	ЭтаФорма.Активизировать();
	
	
	//GenerateEpf = Истина;
	//TestRun     = Ложь;
	//ВыполнитьОбработку();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблоныОбработокКоманда(Команда)
	СоздатьШаблоныОбработок();
КонецПроцедуры
//} МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 


//портирован блок генерации данных из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//был взят релиз 3.0.0.3
// { Методы генерации тестовых данных

// количествоСозданныхОбъектов учитывает только созданные элементы справочников, документы и пользователей ИБ. Записи регистров сведений не считаются!
&НаКлиенте
Функция СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения = Неопределено, ИмяКолонкиЗамещения = Неопределено) Экспорт
	Данные = СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Данные;
КонецФункции

&НаСервере
Функция СоздатьДанныеПоТабличномуДокументуСервер(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения) //Экспорт
	Данные = Объект().СоздатьДанныеПоТабличномуДокументу(ТабличныйДокумент, РежимыЗагрузкиИлиИмяКолонкиЗамещения, ИмяКолонкиЗамещения);
	Возврат Неопределено; //Данные;
КонецФункции
//}

// { работа с данными текущего теста

&НаКлиенте
Процедура УстановитьДанныеТекущегоТеста(ДанныеТекущегоТеста)
	
	//УстановитьКонтекст(ДанныеТекущегоТеста, ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТекущегоТеста()
	
	//УдалитьКонтекст(ИдентификаторКонтекстаДанныхТекущегоТеста());
	
КонецПроцедуры

&НаКлиенте
Функция ПустыеДанныеТекущегоТеста()
	
	ДанныеТеста = Новый Структура;
	ДанныеТеста.Вставить("Имя", "");
	ДанныеТеста.Вставить("ПолныйПуть", "");
	ДанныеТеста.Вставить("СостояниеТеста", "");
	
	Возврат ДанныеТеста;
	
КонецФункции

Функция ИдентификаторКонтекстаДанныхТекущегоТеста()
	
	Возврат "xUnitFor1C_ДанныеТекущегоТеста";
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВыделенныйСценарий(Команда)
	Если Элементы.ДеревоТестов.ТекущиеДанные.Сценарий <> Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	
	ИД = Элементы.ДеревоТестов.ТекущиеДанные.ИДСтроки;
	
	ВыполнитьСценарии(ИД);
	
	//ЭлементыДерева = Элементы.ДеревоТестов.ТекущиеДанные.ПолучитьЭлементы();
	
	//Элементы.ДеревоТестов.ТекущиеДанные.
КонецПроцедуры

// }





ВыполнятьСценарииАсинхронно = Истина;

ШагСтрокДляМодуля    = 10000;