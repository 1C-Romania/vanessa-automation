&НаКлиенте
Перем WinSocket,СтримAdobe,МассивДляСозданияEpf,МассивНайденыхФич,ШагСтрокДляМодуля;
&НаКлиенте
Перем ОшибкаВнутриОбработкиВызоваBDD,АргументыКоманднойСтроки,БылиОшибкиЗапускаКукумбера;


&НаКлиенте
Процедура ЗаписатьВЖурнал(ТипСобытия, ТекстСобытия)
	Сообщить("" + ТекущаяДата() + " " + ТипСобытия +": " + ТекстСобытия);
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыполнениеСкрипта(ТекстИсключения) Экспорт
	ВызватьИсключение(ТекстИсключения);
КонецПроцедуры


&НаКлиенте
Процедура Приостановить(Интервал)
	//Сообщить("Начало sleep...");
	НовЗнач = ТекущаяУниверсальнаяДатаВМиллисекундах() + Интервал;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < НовЗнач Цикл
		Продолжить;
	КонецЦикла; 
	//Сообщить("Окончание sleep...");
КонецПроцедуры


&НаКлиенте
Функция ПерекодировкаДляОтправкиОшибки(Стр="",Кодировка="windows-1251") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="utf-8";
	СтримAdobe.Open();
	СтримAdobe.WriteText(Стр);
	СтримAdobe.Position=0;
	СтримAdobe.charset=Кодировка;
	Рез=СтримAdobe.ReadText(-1);
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


&НаКлиенте
Функция Перекодировка(Стр="",Кодировка="utf-8") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="windows-1251";
	СтримAdobe.Open();
	Попытка
		СтримAdobe.WriteText(Стр);
		СтримAdobe.Position=0;
		СтримAdobe.charset=Кодировка;
		Рез=СтримAdobe.ReadText(-1);
	Исключение
		//перекодировка падает на invoke, видимо из-за разной кодировки строк
		Рез = Стр;
	КонецПопытки;
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


&НаСервере
Процедура ВосстановитьНастройки()
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehavior");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", Объект.DebugLog);
		Настройки.Свойство("GenerateEpf", Объект.GenerateEpf);
		Настройки.Свойство("TestRun", Объект.TestRun);
		Настройки.Свойство("КаталогПроекта", Объект.КаталогПроекта);
		Настройки.Свойство("КаталогФич", Объект.КаталогФич);
	КонецЕсли;
	
	//Элементы.DebugLog.Пометка = Объект.DebugLog;
	//Элементы.GenerateEpf.Пометка = Объект.GenerateEpf;
	//Элементы.TestRun.Пометка = Объект.TestRun;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", Объект.DebugLog);
	Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("КаталогПроекта", Объект.КаталогПроекта);
	Настройки.Вставить("КаталогФич", Объект.КаталогФич);
	ХранилищеОбщихНастроек.Сохранить("VanessaBehavior",, Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Не ЭтоЗапускИзКоманднойСтроки Тогда
		СохранитьНастройки();
	КонецЕсли;
	WinSocket = Неопределено;
КонецПроцедуры


//часть WinSocket - начало

&НаКлиенте
Процедура WinSocketError(Number, Description, Scode, Source, HelpFile, HelpContext, CancelDisplay)
	Сообщить(Description);
КонецПроцедуры


&НаКлиенте
Функция ОбработатьПараметрыВызоваBDD(ТкстСообщения)

	

КонецФункции // ()


&НаКлиенте
Процедура WinSocketDataArrival(bytesTotal)
	
 	ТкстСообщения = "";
    WinSocket.GetData(ТкстСообщения);
	//Сообщить("1. " + ТкстСообщения);
	ТкстСообщения = Перекодировка(ТкстСообщения);
	Сообщить("Получено сообщение: " + ТкстСообщения);
	
	
	Приостановить(300);
	
	Результат = ОбработатьПараметрыВызоваBDD(ТкстСообщения);
	
	ЧтоВернем = Результат + Символы.ПС;
	WinSocket.SendData(ЧтоВернем);
	
	
	КолСекундПростоя = 0;
	ПодключитьОбработчикОжидания("Таймер",1);
КонецПроцедуры

&НаКлиенте
Процедура WinSocketConnect()
	Сообщить("Покдлючение к " + WinSocket.RemoteHost + " успешно.");
КонецПроцедуры

&НаКлиенте
Процедура WinSocketConnectionRequest(requestID)
	Сообщить("Запрос подключения");

    Сост = "Подключение";

    Если НЕ WinSocket.State = 0 Тогда
        WinSocket.Close()
    КонецЕсли;

    WinSocket.Accept(requestID);

    Сообщить("Приконнектился "+WinSocket.RemoteHostIP);
КонецПроцедуры

&НаКлиенте
Процедура WinSocketClose()
	Сообщить("WinSocketClose");
КонецПроцедуры

&НаКлиенте
Функция СоздатьWinsock()
	Если WinSocket <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Попытка	
		WinSocket = Новый COMОбъект("mswinsock.winsock"); 
	Исключение 
		Сообщить("Не смог создать объект winsock.");
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки; 
	
	WinSocket.RemoteHost = "127.0.0.1";
	WinSocket.LocalPort  = 54321;
	
	ДобавитьОбработчик WinSocket.Close, WinSocketClose; 
	ДобавитьОбработчик WinSocket.ConnectionRequest, WinSocketConnectionRequest; 
	ДобавитьОбработчик WinSocket.Connect, WinSocketConnect; 
	ДобавитьОбработчик WinSocket.DataArrival, WinSocketDataArrival; 
	ДобавитьОбработчик WinSocket.Error, WinSocketError; 
	//ДобавитьОбработчик WinSocket.SendComplete, SendComplete; 
	//ДобавитьОбработчик WinSocket.SendProgress, SendProgress; 
	
	Сообщить("Создал winsock.");
	
	Возврат Истина
КонецФункции // ()
//часть WinSocket - конец



&НаКлиенте
Процедура Инициализация()
	ИмяТекущейФичи       = "";
	МассивДляСозданияEpf = Новый Массив;
	МассивНайденыхФич    = Новый Массив;
	ШагСтрокДляМодуля    = 1000;
	
	//ТаблицаИзвестныхStepDefinition = Новый ТаблицаЗначений;
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ИмяФайла");
	////ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ТаблицаПроцедур");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Id");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Параметры");
	
	//ТабицаКонтекстовОбработок = Новый ТаблицаЗначений;
	//ТабицаКонтекстовОбработок.Колонки.Добавить("ИмяФайла");
	//ТабицаКонтекстовОбработок.Колонки.Добавить("Обработка");
	
	ОшибкаВнутриОбработкиВызоваBDD = Ложь;
	
	АргументыКоманднойСтроки = Новый Массив;
	
КонецПроцедуры



&НаСервере
Функция УбратьКаталогПроекта(Путь,КаталогПроекта)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.УбратьКаталогПроекта(Путь,КаталогПроекта);
КонецФункции


&НаКлиенте
Процедура ПроставитьТегВФичу(ПутьКФайлу)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");


	Файл = Новый Файл(ПутьКФайлу);
	ИмяФичи = "@[ИмяФичи]=" + Файл.ИмяБезРасширения + ";" + УбратьКаталогПроекта(Файл.Путь,Объект.КаталогПроекта);
	
	
	НадоПерезаписатьТег   = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Лев(СокрЛП(Стр),1) = "@" Тогда 
			Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
				Если Стр <> ИмяФичи Тогда
					НадоПерезаписатьТег = Истина;
				КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	Текст.Закрыть();
	
	Если Не НадоПерезаписатьТег Тогда
		Возврат;
	КонецЕсли;
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	ИмяТемпФайла = ПутьКФайлу + "Temp";
	УдалитьФайлы(ИмяТемпФайла);
	
	ЗТ = Новый ЗаписьТекста(ИмяТемпФайла,"UTF-8",,Истина); 
	
	ДобавитьТегСледующейСтрокой = Ложь;
	УжеЗаписывалТег             = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НадоПерезаписатьТег Тогда 
			Если Лев(СокрЛП(Стр),1) = "@" Тогда 
				Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
					//Файл = Новый Файл(ПутьКФайлу);
					Стр = ИмяФичи;
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе	
			Если (Лев(СокрЛП(Стр),1) <> "#") и (СтрДлина(СокрЛП(Стр)) > 0) Тогда 
				ДобавитьТегСледующейСтрокой = Истина;
			КонецЕсли;	
		КонецЕсли;	 
		
		
		Если ДобавитьТегСледующейСтрокой и (Не УжеЗаписывалТег) Тогда 
			//Файл = Новый Файл(ПутьКФайлу);
			СтрФича = ИмяФичи;
			ЗТ.Записать(СтрФича); 
			ЗТ.Записать(Символы.ПС); 
			ЗТ.Записать(Символы.ПС); 
			
			ДобавитьТегСледующейСтрокой = Ложь;
			УжеЗаписывалТег = Истина;
		КонецЕсли;	 
		
		ЗТ.Записать(Стр); 
		ЗТ.Записать(Символы.ПС); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	УдалитьФайлы(ПутьКФайлу);
	ПереместитьФайл(ИмяТемпФайла,ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог)
	//Сообщить("НачальныйКаталог= " + НачальныйКаталог);
	МассивФайлов = НайтиФайлы(НачальныйКаталог,"*.feature",Истина);
	Для Каждого Элем Из МассивФайлов Цикл
		//Сообщить("Найден файл " + Элем.Имя);
		ПроставитьТегВФичу(Элем.ПолноеИмя);
		
		СтруктураФичи = Новый Структура;
		СтруктураФичи.Вставить("ИмяФичи",Элем.ИмяБезРасширения);
		СтруктураФичи.Вставить("ПолныйПуть",Элем.Путь);
		
		//Стр = СтрЗаменить(СтруктураФичи.ПолныйПуть,КаталогПроекта);
		
		
		МассивНайденыхФич.Добавить(СтруктураФичи);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогФич(СтрКаталогПроекта,СтрКаталогФич)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ПолучитьКаталогФич(СтрКаталогПроекта,СтрКаталогФич);
КонецФункции



&НаКлиенте
Процедура ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера)
	КаталогПроекта = Объект.КаталогПроекта;
	КаталогФич     = Объект.КаталогФич;
	Сервер = "";
	//Сервер = Новый TCPСервер(54321);
	//Сервер.Запустить();
	
	
	
	
	
	
	
	//Путь = "E:\commons\Rep\cuke4onec\cuke4onec.epf";
	//Путь = КаталогПроекта + "\cuke4onec.epf";
	//cuke4onec = ОЛЕ.ExternalDataProcessors.Create(Путь);
	
	//StepsDir = "E:\commons\Rep\cuke4onec\features\step_definitions";
	//StepsDir = КаталогПроекта + "\features\step_definitions";
	//cuke4onec._Create(StepsDir);
	//cuke4onec._Purge();
	
	//СтрокаЗапускаКукумбер = "Cucumber --dry-run --no-snippets """ + КаталогПроекта + "\features"" > " + КаталогПроекта + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets  """ + КаталогПроекта + "\features"" > " + КаталогПроекта + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber  --no-snippets """ + КаталогПроекта + "\features""";
	
	
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets --no-color """ + КаталогПроекта + "\features"" > " + КаталогПроекта + //"\CucumberConsoleLog.txt" + " 2>" + КаталогПроекта + "\CucumberConsolErr.txt";
	
	
	СтрокаЗапускаКукумбер = "cucumber --no-snippets -r " + КаталогПроекта + "\host.wire """ + ПолучитьКаталогФич(КаталогПроекта,КаталогФич) + """ > " + КаталогПроекта + "\CucumberConsoleLog.txt" + " 2>" + КаталогПроекта + "\CucumberConsolErr.txt";
	//СтрокаЗапускаКукумбер = "cucumber """ + КаталогПроекта + "\features"" ";

	WinSocket.Listen();
	ЗаписатьВЖурнал("INFO", "Жду соединения");

	Сообщить("Строка для запуска Cucumber: " + СтрокаЗапускаКукумбер);
	УдалитьФайлы(Объект.КаталогПроекта + "\CucumberConsolErr.txt");
	
	ИмяCmd = ПолучитьИмяВременногоФайла("cmd");
	УдалитьФайлы(ИмяCmd);
	ЗТ = Новый ЗаписьТекста(ИмяCmd,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку(СтрокаЗапускаКукумбер); 
	ЗТ.Закрыть();
	
	
	
	КомандаСистемы("start cmd.exe /c " + ИмяCmd);
	//КомандаСистемы("cmd E:\commons\Rep\Test.cmd");
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf()
	ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(ПолучитьКаталогФич(Объект.КаталогПроекта,Объект.КаталогФич));
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера);
	Если БылиОшибкиЗапускаКукумбера Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	КонецЕсли;
	//
	//Если ОшибкаВнутриОбработкиВызоваBDD Тогда
	//	ПрерватьВыполнениеСкрипта("ОшибкаВнутриОбработкиВызоваBDD");
	//КонецЕсли;
	//
	//Если GenerateEpf Тогда
	//	БылиОшибки = Ложь;
	//	СоздатьФайлыОбработок(БылиОшибки);
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	
	
	Если Не СоздатьWinsock() Тогда
		Возврат;
	КонецЕсли;	 
	//Исключение 
	//КонецПопытки; 	Возврат;
	
	Инициализация();
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	//Сообщить("WinSocket1.State = " + WinSocket1.State);
	Если WinSocket.State = 8 Тогда
		WinSocket.Close();
	КонецЕсли;	 
	
	
	Если Объект.TestRun и Объект.GenerateEpf Тогда
		ВызватьИсключение "Нельзя одновременно ставить TestRun и GenerateEpf!";
	КонецЕсли;	 
	
	Если Объект.GenerateEpf Тогда
		СделатьGenerateEpf();
	КонецЕсли;	 
	//
	//
	//Если TestRun Тогда
	//	СделатьTestRun();
	//КонецЕсли;	 
	//
	//
	//Возврат;
	//
	//WinSocket1 = ЭлементыФормы.WinSocket;
	//WinSocket1.Listen();
	//WinSocket1.Connect();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВосстановитьНастройки();
КонецПроцедуры



СтримAdobe = Новый COMОбъект("Adodb.Stream");
