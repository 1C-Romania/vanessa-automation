//начало текста модуля

#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)","ЯПодключаюКлиентТестированияСПараметрами","Когда Я подключаю клиент тестирования с параметрами:");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	ДанныеКлиентовТестирования.Очистить();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Я подключаю клиент тестирования с параметрами:
//@ЯПодключаюКлиентТестированияСПараметрами(ТабПарам)
Процедура ЯПодключаюКлиентТестированияСПараметрами(ТабПарам) Экспорт
	
	Если ТабПарам.Количество() <> 2 Тогда
		ВызватьИсключение "Должно быть передано 2 строки";
	КонецЕсли;
	ИмяКлиентаТестирования = ПолучитьПараметрыПодключения(ТабПарам);
	
	Ванесса.Шаг("И Я подключаю клиент тестирования """+ИмяКлиентаТестирования+""" из таблицы клиентов тестирования");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодключения(ТабПарам)


	
	ЭтоLinux = Ложь;
	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		ЭтоLinux = Истина;
	КонецЕсли;
	
	Стр = Новый Структура;
	Стр.Вставить("Имя", "");
	Стр.Вставить("ПутьКПлатформе", "");
	Стр.Вставить("ПутьКИнфобазе", "");
	Стр.Вставить("Порт", "");
	Стр.Вставить("ДопПараметры", "");
	
	ИменаПараметров    = ТабПарам[0];// шапка
	ЗначенияПараметров = ТабПарам[1];
	СтрокаАутентификации = "";
	Логин = "";
	ДопПараметр = "";
	
	Для ккк = 1 По ИменаПараметров.Количество() Цикл
		ИмяПараметра = "";
		ЗначениеПараметра = "";
		
		ИменаПараметров.Свойство("Кол" + ккк, ИмяПараметра);
		ЗначенияПараметров.Свойство("Кол" + ккк, ЗначениеПараметра);
		
		Если ВРег(ИмяПараметра) = ВРег("Имя подключения") Тогда
			Стр.Имя = ЗначениеПараметра;
			// проверка заполнения данных
			Если Не ЗначениеЗаполнено(Стр.Имя) Тогда
				ВызватьИсключение "Параметр <Имя подключения> является обязательным!";
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Путь к платформе") Тогда
			Стр.ПутьКПлатформе = ЗначениеПараметра;
			Если Не ЗначениеЗаполнено(Стр.ПутьКПлатформе) Тогда
				СтрокаЗапуска1с = КаталогПрограммы() + "1cv8c";
				Если ЭтоLinux = Ложь Тогда
					СтрокаЗапуска1с = СтрокаЗапуска1с + ".exe";
				КонецЕсли;
				Стр.ПутьКПлатформе = СтрокаЗапуска1с;
			Иначе
				// проверить существование файла
				Файл = Новый Файл(Стр.ПутьКПлатформе);
				Если Не Файл.Существует() Тогда
					ВызватьИсключение "Параметр <Путь к платформе> указывает на не существующий файл!";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Строка соединения") Тогда
			Стр.ПутьКИнфобазе  = ЗначениеПараметра;
			Если Не ЗначениеЗаполнено(Стр.ПутьКИнфобазе) Тогда
				Стр.ПутьКИнфобазе = СтрокаСоединенияИнформационнойБазы();
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Порт") Тогда
			Стр.Порт = ЗначениеПараметра;
			Если Не ЗначениеЗаполнено(Стр.Порт) Тогда
				Стр.Порт = 1538;  // сделать проверку свободно порта и что этого порта еще нет в таблице
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Логин") Тогда
			Логин = ЗначениеПараметра;
			Если Не ПустаяСтрока(Логин) Тогда 
				СтрокаАутентификации = "/N"+Логин;
				Если Найти(Логин, " ") > 0 Тогда 
					СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
				КонецЕсли;
			КонецЕсли;
		
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Пароль") Тогда
			Если Не ПустаяСтрока(ЗначениеПараметра) Тогда 
				СтрокаАутентификации = СтрокаАутентификации + " /P"+ЗначениеПараметра;
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("Запускаемая обработка") Тогда
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				Файл = Новый Файл(ЗначениеПараметра);
				Если Не Файл.Существует() Тогда
					ВызватьИсключение "Параметр <Запускаемая обработка> указывает на не существующий файл!";
				КонецЕсли;			
				ДопПараметр = ДопПараметр + " /EXECUTE " + """" + ЗначениеПараметра + """";			
			КонецЕсли;

		КонецЕсли;	
	КонецЦикла;
	
	Если СтрокаАутентификации <> "" И Найти(СтрокаАутентификации, "/N") = 0 Тогда
		ВызватьИсключение "Параметр <Логин> не задан";
	КонецЕсли;
	Стр.ДопПараметры = СтрокаАутентификации + " " +ДопПараметр;
	
	ДанныеКлиентовТестирования = Ванесса.ДанныеКлиентовТестирования;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", Стр.Имя);
	
	НайденныеСтроки = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ДанныеКлиентовТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	Иначе
		ВызватьИсключение "Подключение с именем <"+Стр.Имя+"> уже есть в таблице подключений";
	КонецЕсли;
	
	Возврат Стр.Имя;

КонецФункции

//окончание текста модуля