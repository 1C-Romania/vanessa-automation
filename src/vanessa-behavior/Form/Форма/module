Перем ШагСтрокДляМодуля;
Перем ОбъектКонтекст;
 
Перем ЭтоУФ;
 
Перем ВыполнятьСценарииАсинхронно;
 
Перем МассивСценариевДляВыполнения;
Перем ТекИД_СценарияВМассиве;
Перем ТекИД_ШагаВМассиве;
 
Перем МассивКонтекстовОбработок;
Перем МассивИменКонтекстовОбработок;
 
Перем ЦветУспешно;
Перем ЦветОжидает;
Перем ЦветНеУспешно;
Перем ЦветЧужойСнипет;
 
 
 
Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	
	ТипСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);
	
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение, ТипСообщения);
КонецПроцедуры
 
Процедура Отладка(Знач Сообщение) Экспорт
	Если DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры
 
Процедура Приостановить(Интервал)
	//Сообщить("Начало sleep...");
	НовЗнач = ТекущаяУниверсальнаяДатаВМиллисекундах() + Интервал;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < НовЗнач Цикл
		Продолжить;
	КонецЦикла; 
	//Сообщить("Окончание sleep...");
КонецПроцедуры
 
 
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов);
	Поз = Найти(ИмяПроцедуры,"(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);
	КонецЕсли;	 
	
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	Для Ккк = 0 По МассивАргументов.Количество()-1 Цикл
		Элем = МассивАргументов[Ккк];
		Команда = Команда + Элем;
		Если Ккк < МассивАргументов.Количество()-1 Тогда
			Команда = Команда + ",";
		КонецЕсли;	 
	КонецЦикла;
	
	Команда = Команда + ")";
	
	Отладка("Выполняю: " + Команда);
	Выполнить(Команда);
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьНастройки();
	//WinSocket1 = ЭлементыФормы.WinSocket;
	//WinSocket1.Close();
КонецПроцедуры
 
Процедура ОсновныеДействияФормыНачатьЗапись(Кнопка)
	ОбъектКонтекст.ТестируемоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
КонецПроцедуры
 
Процедура ОсновныеДействияФормыОстановитьЗапись(Кнопка)
	Стр = ОбъектКонтекст.ТестируемоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
	
	
	ПутьКОбработке = КаталогИнструментов + "\vendor\1C\UILogToScript.epf";
	Файл = Новый Файл(ПутьКОбработке);
	Если Файл.Существует() Тогда
		Обработка = ВнешниеОбработки.Создать(ПутьКОбработке); 
		Результат = Обработка.Convert(Стр);
		ОчиститьСообщения();
		Сообщить(Результат);
	Иначе	
		Сообщить(Стр);
	КонецЕсли;	 
	
КонецПроцедуры
 
Процедура ВосстановитьНастройки()
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehavior");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", DebugLog);
		//Настройки.Свойство("GenerateEpf", GenerateEpf);
		//Настройки.Свойство("TestRun", TestRun);
		Настройки.Свойство("ГенерироватьУФ", ГенерироватьУФ);
		Настройки.Свойство("КаталогИнструментов", КаталогИнструментов);
		Настройки.Свойство("КаталогФич", КаталогФич);
		Настройки.Свойство("ДелатьОтчетВФорматеАллюр", ДелатьОтчетВФорматеАллюр);
		Настройки.Свойство("КаталогOutput", КаталогOutput);
	КонецЕсли;
	
	//Элементы.DebugLog.Пометка = Объект.DebugLog;
	//Элементы.GenerateEpf.Пометка = Объект.GenerateEpf;
	//Элементы.TestRun.Пометка = Объект.TestRun;
КонецПроцедуры
 
Процедура СохранитьНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", DebugLog);
	//Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	//Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("ГенерироватьУФ", ГенерироватьУФ);
	Настройки.Вставить("КаталогИнструментов", КаталогИнструментов);
	Настройки.Вставить("КаталогФич", КаталогФич);
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("КаталогOutput", КаталогOutput);
	ХранилищеОбщихНастроек.Сохранить("VanessaBehavior",, Настройки);
КонецПроцедуры
 
 
 
Процедура ПриОткрытии()
	ВосстановитьНастройки();
	
	
	ОбновитьКнопкуЗагрузитьФичи();
	Если СокрЛП(КаталогФич) <> "" Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
	
	
	//ПроверитьЧтоУстановленНужныйAciveX();
	
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработки();
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
		КаталогИнструментов = Файл.Путь;
	КонецЕсли;	 
	
	Если ВнешниеПереданныеПараметры <> Неопределено Тогда
		Для каждого Зн Из ВнешниеПереданныеПараметры Цикл
			ЭтотОбъект[Зн.Ключ] = Зн.Значение;
		КонецЦикла;
	КонецЕсли;	 
	
	Если ВыполнитьОбработкуПриОткрытии Тогда
		//ВыполнитьОбработку();
	КонецЕсли;	 
	
	//Если ЗакрытьФормуПослеВыполненияОбработки Тогда
	//	ЭтаФорма.Закрыть();
	//КонецЕсли;	 
КонецПроцедуры
 
Процедура ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// Вставить содержимое обработчика.
	ЭлементыФормы.тпДеревоТестов.Видимость = Истина;
КонецПроцедуры
 
Процедура ДобавитьШагиВМассив(ДеревоСтроки,Шаги)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Примеры = Истина Тогда
			//эти сценарии уже учтены
			Продолжить;
		КонецЕсли; 
		
		Если СтрДеревоСтроки.Шаг = Истина Тогда
			СтруктураШага = Новый Структура;
			СтруктураШага.Вставить("Имя",СтрДеревоСтроки.Имя);
			СтруктураШага.Вставить("АдресСнипета",СтрДеревоСтроки.АдресСнипета);
			Шаги.Добавить(СтруктураШага);
		КонецЕсли;	 
		ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
	КонецЦикла	
КонецПроцедуры
 
 
Процедура ДобавитьИменаФайловФичИзДереваВМассив(ДеревоСтроки,МассивФич,МассивШагов)
	Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
		Если СтрДеревоСтроки.Фича = Истина Тогда
			МассивФич.Добавить(СтрДеревоСтроки.ПолныйПуть);
			Шаги = Новый Массив;
			ДобавитьШагиВМассив(СтрДеревоСтроки.Строки,Шаги);
			МассивШагов.Добавить(Шаги);
		КонецЕсли;	 
		ДобавитьИменаФайловФичИзДереваВМассив(СтрДеревоСтроки.Строки,МассивФич,МассивШагов);
	КонецЦикла;
КонецПроцедуры
 
 
Процедура ПолучитьСписокФичПоДереву(Дерево,МассивФич,МассивШагов)
	ДобавитьИменаФайловФичИзДереваВМассив(Дерево.Строки,МассивФич,МассивШагов);
	
КонецПроцедуры
 
 
Процедура кнСоздатьШаблоныОбработокНажатие(Элемент)
	ОчиститьСообщения();
	СделатьПараметрыКорректными();	
	
	ПарсерФич = ПолучитьИнструментПарсерФич();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	СтруктураПараметров.Вставить("ГенерироватьУФ",ГенерироватьУФ);
	СтруктураПараметров.Вставить("ШагСтрокДляМодуля",ШагСтрокДляМодуля);
	
	МассивФич   = Новый Массив;
	МассивШагов = Новый Массив;
	ПолучитьСписокФичПоДереву(ДеревоТестов,МассивФич,МассивШагов);
	СтруктураПараметров.Вставить("МассивФич",МассивФич);
	СтруктураПараметров.Вставить("МассивШагов",МассивШагов);
	
	
	ПарсерФич.СоздатьEPFПоМассивуФич(СтруктураПараметров);
	
	//GenerateEpf = Истина;
	//TestRun     = Ложь;
	//ВыполнитьОбработку();
КонецПроцедуры
 
 
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Примеры = Истина Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
 
 
 
 
Процедура ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения,ТекПример = Неопределено)
	//получим сами именнованные параметры
	
	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Примеры = Истина Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	Если ИменаПараметров = Неопределено Тогда
		СтрОшибки = "Не смог найти у сценария " + СтрокаДерева.Имя + " имена изменяемых параметров!";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			//в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли; 
		
		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя",СтрокаДерева.Имя + " (Пример №" + (Ном-1) + ")");
		СтруктураПараметровСценария.Вставить("СтрокаДерева",СтрСтрокаПримеров);
		
		
		Шаги = Новый Массив;
		
		Если СтрокаДерева.Родитель.Строки[0].ЭтоКонтекст = Истина Тогда //значит надо добавить шаги контекста к нашим шагам
			Для каждого СтрСтроки Из СтрокаДерева.Родитель.Строки[0].Строки Цикл
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрСтрокаПримеров);
				Шаги.Добавить(СтруктураШага);
			КонецЦикла;
		КонецЕсли;	 
		
		
		Для каждого СтрСтроки Из СтрСтрокаПримеров.Строки Цикл
			//Если СтрСтроки.Примеры = Истина Тогда
			//	Продолжить;
			//КонецЕсли; 
			
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрСтроки.Родитель);
			Шаги.Добавить(СтруктураШага);
		КонецЦикла;
		
		СтруктураПараметровСценария.Вставить("Шаги",Шаги);
		
		
		
		
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;
	
	
	
	
	
	
	
	//Шаги = Новый Массив;
	//
	//Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
	//	СтруктураШага = Новый Структура;
	//	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	//	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	//	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	//	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	//	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	//	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	//	СтруктураШага.Вставить("СтрокаШага",СтрСтроки);
	//	
	//	Шаги.Добавить(СтруктураШага);
	//КонецЦикла;
	//
	//
	//
	//СтруктураПараметров.Вставить("Шаги",Шаги);
	
	//МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
КонецПроцедуры


Функция ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаСценария)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария",СтрокаСценария);
	СтруктураШага.Вставить("СтрокаШага",СтрСтроки);
	
	Возврат СтруктураШага;
КонецФункции

 
Процедура ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения)
	Если СтрокаДерева.ЭтоКонтекст = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя",СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("СтрокаДерева",СтрокаДерева);
	
	
	Шаги = Новый Массив;
	
	Если СтрокаДерева.Родитель.Строки[0].ЭтоКонтекст = Истина Тогда //значит надо добавить шаги контекста к нашим шагам
		Для каждого СтрСтроки Из СтрокаДерева.Родитель.Строки[0].Строки Цикл
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева);
			Шаги.Добавить(СтруктураШага);
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева);
		Шаги.Добавить(СтруктураШага);
	КонецЦикла;
	
	
	
	СтруктураПараметров.Вставить("Шаги",Шаги);
	
	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
	
КонецПроцедуры
 
 
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева,МассивСценариевДляВыполнения)
	
	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		//СделатьСообщение("Запуск СценариоАутлайн пока не реализован. " + СтрокаДерева.Имя);
		ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения);
		Возврат;
	КонецЕсли;	 
	
	//Сообщить(СтрокаДерева.Имя);
	
	ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения);
КонецПроцедуры
 
 
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Сценарий = Истина Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения);
		ИначеЕсли ДеревоСтроки.Пример = Истина Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель,МассивСценариевДляВыполнения,ДеревоСтроки)
		КонецЕсли; 
	Иначе	
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Сценарий = Истина Тогда
				ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки,МассивСценариевДляВыполнения);
			Иначе	
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки,МассивСценариевДляВыполнения);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры
 
Функция СформироватьОписаниеОшибки(Знач Стр,ИмяФайла,ИмяПроцедуры) Экспорт
	Стр = СтрЗаменить(Стр,Символы.ПС,"");
	Стр = СтрЗаменить(Стр,Символы.ВК,"");
	
	//СтрПоиска = "Рефлектор.ВызватьМетод(СтрТабицаКонтекстовОбработок.Обработка, ИмяПроцедуры, МассивАргументов);";
	//Поз = Найти(Стр,СтрПоиска);
	//Если Поз > 0 Тогда
	//	ПромСтр = Сред(Стр,Поз + СтрДлина(СтрПоиска));
	//	Если ПромСтр <> "" Тогда
	//		Стр = ПромСтр;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Поз1 = Найти(Стр,"Метод объекта не обнаружен");
	//Если Поз1 > 0 Тогда
	//	Стр = Сред(Стр,Поз1);
	//	Поз2 = Найти(Стр,")");
	//	Стр = Лев(Стр,Поз2);
	//КонецЕсли;
	////Стр = СтрЗаменить(Стр,СтрПоиска,"");
	
	Стр = Стр + "; ИмяФайла="+ИмяФайла + ", ИмяПроцедуры="+ИмяПроцедуры;
	//Возврат ПерекодировкаДляОтправкиОшибки(Стр);
	Возврат Стр;
КонецФункции
 
 
Функция ПреобразоватьКДатеСтроку(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр,".");
	День = Число(Лев(Стр,Поз-1));
	Стр = Сред(Стр,Поз+1);
	
	Поз   = Найти(Стр,".");
	Месяц = Число(Лев(Стр,Поз-1));
	Стр   = Сред(Стр,Поз+1);
	
	Год   = Число(Стр);
	Если Год < 100 Тогда
		Год = Год + 2000;
	КонецЕсли;
	
	Зн = Дата(Год,Месяц,День);
	
	Зн = Формат(Зн,"ДФ=yyyyMMdd");
	Зн = "'" + Зн + "'";
	
	//Сообщить("" + НачСтр + " было преобразовано к " + Зн);
	Возврат Зн;
КонецФункции


Процедура ВыполнинтьШагАссинхронноТаймер()
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Если (Шаги.Количество()-1) < ТекИД_ШагаВМассиве Тогда
		//значит все шаги выполнены, запускаем следующий сценарий
		//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СтрокаСценария                     = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		Возврат;
	КонецЕсли;	 
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	//ТекШаг.СтрокаШага.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = ТекШаг.СтрокаШага;
	
	СтрокаШага                         = ТекШаг.СтрокаШага;
	СтрокаСценария                     = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = СтрокаСценария.РезультатПрохожденияТестовСценария;
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя",СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	
	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда
		//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		
		//СтрокаШага.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СтрокаШага.Статус = "Pending";
		ОписаниеОшибки = "Не реализован. Пустой адрес снипета у шага: " + ТекШаг.Имя;
		//СтрокаШага.ОписаниеОшибки = ОписаниеОшибки;
		
		//СтрокаСценария.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//СтрокаСценария.ОписаниеОшибки = ОписаниеОшибки;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		СделатьСообщение(ОписаниеОшибки);
		
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		
		Возврат;
	КонецЕсли;	 
	
	
	ИД = МассивИменКонтекстовОбработок.Найти(АдресСнипета);
	Если ИД = Неопределено Тогда
		МассивИменКонтекстовОбработок.Добавить(АдресСнипета);
		ОбработкаТеста = ВнешниеОбработки.Создать(АдресСнипета);
		МассивКонтекстовОбработок.Добавить(ОбработкаТеста);
	Иначе
		ОбработкаТеста = МассивКонтекстовОбработок[ИД];
	КонецЕсли;	 
	
	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	МассивАргументов = ТекШаг.ЗначенияПараметров;
	
	
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивАргументов Цикл
		Если Элем.Тип = "Строка" Тогда
			МассивПараметров.Добавить("""" + Элем.Значение + """");
		ИначеЕсли Элем.Тип = "Число" Тогда
			МассивПараметров.Добавить(Элем.Значение);
		ИначеЕсли Элем.Тип = "Дата" Тогда
			МассивПараметров.Добавить(ПреобразоватьКДатеСтроку(Элем.Значение));
		КонецЕсли;	 
	КонецЦикла;
	
	
	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	Попытка
		ОбработкаТеста.Контекст = ОбъектКонтекст;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		ОбъектКонтекст = ОбработкаТеста.Контекст;
		
		ШагВыполнен = Истина;
	Исключение
		Отладка("ОписаниеОшибки()="+ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		Если Найти(ОписаниеОшибкиСтр,"}: Не реализовано.") > 0 Тогда //тогда это Pending
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не реализован.");
			СтрОшибка = "Не реализовано.";
			ШагНеРеализован = Истина;
		Иначе
			//значит возникла ошибка
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не выполнен.");
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибки(),АдресСнипета,ИмяПроцедуры);
			СделатьСообщение(СтрОшибка);
		КонецЕсли;
	КонецПопытки;
	
	
	СтрокаШага = ТекШаг.СтрокаШага;	
	//СтрокаШага.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	
	Если ШагВыполнен Тогда
		СтрокаШага.Статус = "Success";
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		ТекИД_ШагаВМассиве       = ТекИД_ШагаВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьШагАссинхронноТаймер",0.1,Истина);
	Иначе	
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
		Иначе
			СтрокаШага.Статус = "Failed";
		КонецЕсли; 
		//СтрокаШага.ОписаниеОшибки = СтрОшибка;
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",СтрОшибка);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		СтрокаСценария                = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		//СтрокаСценария.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//СтрокаСценария.ОписаниеОшибки = СтрОшибка;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",СтрОшибка);
		
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		
		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД_ШагаВМассиве,РезультатПрохожденияТестовШагов);
		
		
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;
	
	
	
КонецПроцедуры


Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД,РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид+1;
		Если Шаги.Количество() < (Ид+1) Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекШаг = Шаги[Ид];
		
		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя",ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки","Пропущен");
		РезультатПрохожденияШага.Вставить("Статус","Skipped");
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
	КонецЦикла;
КонецПроцедуры

 
Процедура ОбработатьСтатусСценария(ИД)
	//СтрокаСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	//СценарийВыполнен = Истина;
	//Для каждого СтрШаг Из СтрокаСценария.Строки Цикл
	//	Если СтрШаг.Статус <> "Success" Тогда
	//		СценарийВыполнен = Ложь;
	//		Статус = СтрШаг.Статус;
	//		СтрокаСценария.ОписаниеОшибки = СтрШаг.ОписаниеОшибки;
	//		Прервать;
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//Если СценарийВыполнен Тогда
	//	ЭлементыФормы.тпДеревоТестов.Свернуть(СтрокаСценария); 
	//	СтрокаСценария.Статус = "Success";
	//Иначе	
	//	СтрокаСценария.Статус = Статус;
	//КонецЕсли; 
КонецПроцедуры

Процедура ЗаписатьСтатусВШагИлиСценарий(ОбъектДляЗаписи,Статус)
	Если Статус = "Success" Тогда
		ОбъектДляЗаписи.status = "passed";
	ИначеЕсли Статус = "Pending" Тогда
		ОбъектДляЗаписи.status = "pending";
	ИначеЕсли Статус = "Failed" Тогда
		ОбъектДляЗаписи.status = "failed";
	ИначеЕсли Статус = "Skipped" Тогда
		ОбъектДляЗаписи.status = "skipped";
	Иначе	
		ОбъектДляЗаписи.status = "skipped";
	КонецЕсли; 
	

КонецПроцедуры


Процедура ОбойтиДеревоДляОтчетаАллюр(Дерево,Фабрика,ТекущаяФича = Неопределено,СписокСценариев = Неопределено,СписокШагов = Неопределено)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если      СтрСтроки.Фича = Истина Тогда
			ЗаписьXML = Новый ЗаписьXML;
			GUID      = Новый УникальныйИдентификатор();
			
			ИмяФайлаXML = КаталогOutput + "\" + GUID +"-testsuite.xml";
			ЗаписьXML.ОткрытьФайл(ИмяФайлаXML);			
			
			ТипTestSuiteResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-suite-result");
			ТекущаяФича        = Фабрика.Создать(ТипTestSuiteResult);
			ТекущаяФича.name   = СтрСтроки.Имя;
			
			ТипTestCasesResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-cases-result");
			СписокСценариев    = Фабрика.Создать(ТипTestCasesResult);
			
			ОбойтиДеревоДляОтчетаАллюр(СтрСтроки,Фабрика,ТекущаяФича,СписокСценариев,СписокШагов);
			
			ТекущаяФича.test_cases = СписокСценариев;
			
			
			Фабрика.ЗаписатьXML(ЗаписьXML, ТекущаяФича);
			
			Сообщить("Файл отчета Allure-report (" + ИмяФайлаXML + ") записан.");
		ИначеЕсли (СтрСтроки.Сценарий = Истина) или (СтрСтроки.Пример = Истина) Тогда
			Если (СтрСтроки.ЭтоКонтекст = Истина) Тогда
				//его не неадо добавлять в отчет, т.к. этот сценарий включается в каждый сценарий
				
			ИначеЕсли (СтрСтроки.ЭтоScenarioOutline = Истина) или (СтрСтроки.Строки.Количество() = 0) Тогда
				//его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаАллюр(СтрСтроки,Фабрика,ТекущаяФича,СписокСценариев,СписокШагов);
			Иначе
				
				
				РезультатПрохожденияТестовСценария = СтрСтроки.РезультатПрохожденияТестовСценария;
				
				ТипTestCaseResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-case-result");
				Сценарий          = Фабрика.Создать(ТипTestCaseResult);
				
				Если СтрСтроки.Пример = Истина Тогда
					Сценарий.name     = СтрСтроки.Родитель.Родитель.Имя + " №" + (СтрСтроки.Родитель.Строки.индекс(СтрСтроки));
				Иначе	
					Сценарий.name     = СтрСтроки.Имя;
				КонецЕсли; 
				
				Сценарий.start = СтрСтроки.РезультатПрохожденияТестовСценария.ВремяНачала;
				Сценарий.stop  = СтрСтроки.РезультатПрохожденияТестовСценария.ВремяОкончания;
				
				
				ТипSteps    = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "steps");
				СписокШагов = Фабрика.Создать(ТипSteps);
				
				
				
				Если СтрСтроки.ЭтоScenarioOutline = Истина Тогда
					ОбойтиДеревоДляОтчетаАллюр(СтрСтроки,Фабрика,ТекущаяФича,СписокСценариев,СписокШагов);
				Иначе
					Для каждого СтрРезультатПрохожденияТестовШагов Из РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов Цикл
						ТипStep  = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "step");
						Шаг      = Фабрика.Создать(ТипStep);
						Шаг.name = СтрРезультатПрохожденияТестовШагов.Имя;
						
						Если СтрРезультатПрохожденияТестовШагов.ВремяНачала <> Неопределено Тогда
							Шаг.start = СтрРезультатПрохожденияТестовШагов.ВремяНачала;
							Шаг.stop  = СтрРезультатПрохожденияТестовШагов.ВремяОкончания;
						КонецЕсли; 
						
						ЗаписатьСтатусВШагИлиСценарий(Шаг,СтрРезультатПрохожденияТестовШагов.Статус);
						
						СписокШагов.step.Добавить(Шаг);
					КонецЦикла;
				КонецЕсли;	 
				
				
				
				
				ЗаписатьСтатусВШагИлиСценарий(Сценарий,СтрСтроки.Статус);
				Если (СтрСтроки.Статус = "Failed") или (СтрСтроки.Статус = "Pending") Тогда
					ТипFailure            = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "failure");
					ОбъектFailure         = Фабрика.Создать(ТипFailure);
					ОбъектFailure.message = СтрСтроки.РезультатПрохожденияТестовСценария.ОписаниеОшибки;
					
					Сценарий.failure = ОбъектFailure;
				КонецЕсли; 
				Сценарий.steps = СписокШагов;
				//СтрСтроки.Статус
				
				СписокСценариев.test_case.Добавить(Сценарий);
				//Сообщить(СтрСтроки.Имя);
			КонецЕсли; 
		ИначеЕсли СтрСтроки.Шаг = Истина Тогда
			Если СтрСтроки.Родитель.ЭтоScenarioOutline = Истина Тогда
				//его не неадо добавлять в отчет, т.к. этот сценарий явно не выполняется
				ОбойтиДеревоДляОтчетаАллюр(СтрСтроки,Фабрика,ТекущаяФича,СписокСценариев,СписокШагов);
			Иначе	
				ТипStep  = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "step");
				Шаг      = Фабрика.Создать(ТипStep);
				Шаг.name = СтрСтроки.Имя;
				
				Если СтрСтроки.ВремяНачала <> Неопределено Тогда
					Шаг.start = СтрСтроки.ВремяНачала;
					Шаг.stop  = СтрСтроки.ВремяОкончания;
				КонецЕсли; 
				
				ЗаписатьСтатусВШагИлиСценарий(Шаг,СтрСтроки.Статус);
				
				СписокШагов.step.Добавить(Шаг);
			КонецЕсли; 
			
			
		Иначе	
			ОбойтиДеревоДляОтчетаАллюр(СтрСтроки,Фабрика,ТекущаяФича,СписокСценариев,СписокШагов);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры


Процедура СформироватьОтчетАллюр()
	Файл = Новый Файл(КаталогOutput);
	Если Не Файл.Существует() Тогда
		Сообщить("Не могу сфомировать отчет Allure. Не существует каталог для вывода отчета.");
		Возврат;
	КонецЕсли; 
	
	ИмяФайла     = КаталогИнструментов + "\vendor\allure-framework\allure.xsd"; 
	Фабрика      = СоздатьФабрикуXDTO(ИмяФайла);
	
	//ТипTestSuiteResult = Фабрика.Тип("urn:model.allure.qatools.yandex.ru", "test-suite-result");
	//СписокФич          = Фабрика.Создать(ТипTestSuiteResult);
	
	//ЗаписьXML = Новый ЗаписьXML;
	Если Прав(КаталогOutput,1) = "\" Тогда
		КаталогOutput = Лев(КаталогOutput,СтрДлина(КаталогOutput)-1);
	КонецЕсли; 
	//ЗаписьXML.ОткрытьФайл(КаталогOutput + "\AllureReport.xml");
	
	
	ОбойтиДеревоДляОтчетаАллюр(ДеревоТестов,Фабрика);
	
	//ДанныеXML = ЗаписьXML.Закрыть();	
	
КонецПроцедуры


 
Процедура ВыполнинтьСценарийАссинхронноТаймер()
	
	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве-1);
	КонецЕсли; 
	
	Если (МассивСценариевДляВыполнения.Количество()-1) < ТекИД_СценарияВМассиве Тогда
		Сообщить(" ");
		СделатьСообщение("Все сценарии обработаны!");
		
		
		Если ДелатьОтчетВФорматеАллюр Тогда
			СформироватьОтчетАллюр();
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	 
	
	Сообщить(" ");
	СделатьСообщение("Работаю по сценарию: " + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	
	//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	СтрокаДерева = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаДерева.РезультатПрохожденияТестовСценария = Новый Структура;
	СтрокаДерева.РезультатПрохожденияТестовСценария.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	СтрокаДерева.РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов",РезультатПрохожденияТестовШагов);
	
	
	ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = СтрокаДерева;
	
	ТекИД_ШагаВМассиве = 0;
	ПодключитьОбработчикОжидания("ВыполнинтьШагАссинхронноТаймер",0.1,Истина);
	
	
КонецПроцедуры
 

Процедура ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		  СтрСтроки.РезультатПрохожденияТестовСценария = Неопределено;
		//СтрСтроки.ВремяНачала    = Неопределено;
		//СтрСтроки.ВремяОкончания = Неопределено;
		//СтрСтроки.ОписаниеОшибки = Неопределено;
		
		ОчиститьПоляВДеревеДляПостроенияОтчетов(СтрСтроки);
	КонецЦикла;
КонецПроцедуры


Процедура ВыполнитьСценарии(ТекСценарий = Неопределено)
	
	ОчиститьПоляВДеревеДляПостроенияОтчетов(ДеревоТестов);
	
	МассивКонтекстовОбработок     = Новый Массив;
	МассивИменКонтекстовОбработок = Новый Массив;
	ОбъектКонтекст                = Новый Структура;
	
	МассивСценариевДляВыполнения = Новый Массив;
	
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ДеревоТестов.Строки;
	КонецЕсли; 
	
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий,МассивСценариевДляВыполнения);
	
	
	
	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = 0;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;	 
	
	
	
	//ПарсерФич = ПолучитьИнструментПарсерФич();
	//
	//СтруктураПараметров = Новый Структура;
	//СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	//СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	//
	//МассивСообщений = Новый Массив;
	//СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	//СтруктураПараметров.Вставить("DebugLog",DebugLog);
	//
	//ДеревоФич = ПарсерФич.ВыполнитьСценарии(СтруктураПараметров);
	//
	//Для каждого Элем Из МассивСообщений Цикл
	//	Сообщить(Элем);
	//КонецЦикла;
	//
	//Если ДеревоФич = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	 
	//
	////ОбновитьСтатусы(ДеревоФич);
	////
	////РазврнутьДеревоДоСценариев(ДеревоТестов);
	////
	
	//СделатьСообщение("Сценарии выполнены.");
	//ПарсерФич.ВычислитьСнипетыДляШагов();
КонецПроцедуры
 
Процедура СделатьПараметрыКорректными()
	Если Прав(КаталогИнструментов,1) = "\" Тогда
		КаталогИнструментов = Лев(КаталогИнструментов,СтрДлина(КаталогИнструментов)-1);
	КонецЕсли; 
КонецПроцедуры
 
 
 
Процедура кнЗапуститьСценарииНажатие(Элемент)
	
	СделатьПараметрыКорректными();
	
	
	ОчиститьСообщения();
	
	ВыполнитьСценарии();
	
	//GenerateEpf = Ложь;
	//TestRun     = Истина;
	//ВыполнитьОбработку();
КонецПроцедуры
 
Процедура СкопироватьСтрокиДерева(ДеревоОткудаСтроки,ДеревоКудаСтроки)
	Для каждого СтрДеревоОткудаСтроки Из ДеревоОткудаСтроки Цикл
		СтрДеревоКудаСтроки = ДеревоКудаСтроки.Добавить();
		Если СтрДеревоОткудаСтроки.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДерева(СтрДеревоОткудаСтроки.Строки,СтрДеревоКудаСтроки.Строки)
		КонецЕсли;	 
		ЗаполнитьЗначенияСвойств(СтрДеревоКудаСтроки,СтрДеревоОткудаСтроки);
	КонецЦикла;
	
КонецПроцедуры
 
Процедура СкопироватьДеревоНаФорму(ДеревоФич)
	ДеревоТестов.Строки.Очистить();
	СкопироватьСтрокиДерева(ДеревоФич.Строки,ДеревоТестов.Строки);
	//ДеревоТестов = ДеревоФич.Скопировать();
	//ЭлементыФормы.тпДеревоТестов.СоздатьКолонки();
	//ДеревоТестов.Строки.ЗагрузитьКолонку(ДеревоФич.Строки.ВыгрузитьКолонку());
КонецПроцедуры
 
 
Функция ПолучитьИнструментПарсерФич()
	ПутьКФайлу = КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		Возврат Неопределено;
	КонецЕсли;	 
	ПарсерФич = ВнешниеОбработки.Создать(ПутьКФайлу);
	
	Возврат  ПарсерФич;
КонецФункции
 
 
Процедура РазврнутьДеревоДоСценариев(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		Если (СтрСтроки.Каталог = Истина) или (СтрСтроки.Фича = Истина) Тогда
			ЭлементыФормы.тпДеревоТестов.Развернуть(СтрСтроки,Ложь);
		КонецЕсли;	 
		РазврнутьДеревоДоСценариев(СтрСтроки);
	КонецЦикла;
КонецПроцедуры
 
 
Процедура ЗагрузитьФичи()
	ПарсерФич = ПолучитьИнструментПарсерФич();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	
	Попытка
		ДеревоФич = ПарсерФич.ПолучитьДеревоФич(СтруктураПараметров);
	Исключение
		Сообщить("Ошибка при постсроении дерева.");
		Сообщить("" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;
	
	Если ДеревоФич = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	СкопироватьДеревоНаФорму(ДеревоФич);
	
	РазврнутьДеревоДоСценариев(ДеревоТестов);
	
	
	СделатьСообщение("Фичи загружены.");
	//ПарсерФич.ВычислитьСнипетыДляШагов();
КонецПроцедуры
 
 
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогФич = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;
 
	ЗагрузитьФичи();
КонецПроцедуры
 
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
 
	ЗагрузитьФичи();
КонецПроцедуры
 
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		ЭлементыФормы.кнЗагрузитьФичи.Заголовок = "Загрузить фичи из каталога";
	ИначеЕсли текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		ЭлементыФормы.кнЗагрузитьФичи.Заголовок = "Загрузить одну фичу";
	ИначеЕсли текЗначениеОперации = "" Тогда
	Иначе	
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + текЗначениеОперации;
		Сообщить(Стр);	
		ВызватьИсключение Стр;
	КонецЕсли;	 
КонецПроцедуры
 
 
Процедура КнЗагрузитьТестыЗагрузитьФичиИзКаталога(Кнопка)
	текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры
 
Процедура КнЗагрузитьФичиЗагрузитьОднуФичу(Кнопка)
	текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры
 
Процедура ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки)
	Если ДанныеСтроки.Статус = "Success" Тогда
		Если ДанныеСтроки.Шаг = Истина Тогда
			ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиПометкаЗеленый.Картинка);		
		ИначеЕсли (ДанныеСтроки.Сценарий = Истина) или (ДанныеСтроки.Пример = Истина) Тогда
			ОформлениеСтроки.Ячейки.Имя.ЦветФона = ЦветУспешно;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Статус = "Pending" Тогда
		Если ДанныеСтроки.Шаг = Истина Тогда
			ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиПометкаЖелтый.Картинка);		
		ИначеЕсли (ДанныеСтроки.Сценарий = Истина) или (ДанныеСтроки.Пример = Истина) Тогда
			ОформлениеСтроки.Ячейки.Имя.ЦветФона = ЦветОжидает;
		КонецЕсли;	
	ИначеЕсли ДанныеСтроки.Статус = "Failed" Тогда
		Если ДанныеСтроки.Шаг = Истина Тогда
			ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиПометкаКрасный.Картинка);		
		ИначеЕсли (ДанныеСтроки.Сценарий = Истина) или (ДанныеСтроки.Пример = Истина) Тогда
			ОформлениеСтроки.Ячейки.Имя.ЦветФона = ЦветНеУспешно;
		КонецЕсли;	
	КонецЕсли; 
КонецПроцедуры
 
 
Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.Каталог = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка);		
	ИначеЕсли ДанныеСтроки.Фича = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиФича.Картинка);		
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	ИначеЕсли ДанныеСтроки.Сценарий = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиСценарий.Картинка);		
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	ИначеЕсли ДанныеСтроки.Шаг = Истина Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(ЭлементыФормы.ПолеКартинкиШагСерый.Картинка);		
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
		
		Если ДанныеСтроки.ЭтоЧужойСнипет = Истина Тогда
			ОформлениеСтроки.Ячейки.ПолныйПуть.ЦветФона = ЦветЧужойСнипет;
			ОформлениеСтроки.Ячейки.Снипет.ЦветФона = ЦветЧужойСнипет;
			ОформлениеСтроки.Ячейки.АдресСнипета.ЦветФона = ЦветЧужойСнипет;
		КонецЕсли; 
	ИначеЕсли ДанныеСтроки.Пример = Истина Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт("Lucida Console",10);
		ОбновитьИконкуСтатуса(ОформлениеСтроки,ДанныеСтроки);
	КонецЕсли;	 
КонецПроцедуры
 
Процедура кнЗагрузитьФичиНажатие(Элемент)
	Если текЗначениеОперации = "" Тогда
		ЗагрузитьТестыЗагрузитьФичиИзКаталога();
		Возврат;
	КонецЕсли;	 
	
	Если текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		ЗагрузитьТестыЗагрузитьФичиИзКаталога();
	ИначеЕсли текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		ЗагрузитьТестыЗагрузитьОднуФичу();
	Иначе
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + текЗначениеОперации;
		Сообщить(Стр);	
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
КонецПроцедуры
 
Процедура кнПерезагрузитьНажатие(Элемент)
	ЗагрузитьФичи();
КонецПроцедуры
 
Процедура ОбновлениеОтображения()
	ЭлементыФормы.нКаталогФич1.Заголовок = КаталогФич;
	ЭлементыФормы.нКаталогФич2.Заголовок = КаталогФич;
КонецПроцедуры

Процедура КонтекстноеМенюДеревоВыполнитьОдинСценарий(Кнопка)
	ТекСтрокаДерева = ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока;
	Если ТекСтрокаДерева.Сценарий = Истина Тогда
		ВыполнитьСценарии(ТекСтрокаДерева);
	ИначеЕсли ТекСтрокаДерева.Пример = Истина Тогда
		ВыполнитьСценарии(ТекСтрокаДерева);
	Иначе
		Сообщить("Это не строка сценария.");
	КонецЕсли; 
	
КонецПроцедуры
 
 
 
 
 
//WinSocket1 = ЭлементыФормы.WinSocket;
//СтримAdobe = Новый COMОбъект("Adodb.Stream");
 
//RegExp            = Новый COMОбъект("VBScript.RegExp");
//RegExp.IgnoreCase = Истина; //Игнорировать регистр
//RegExp.Global     = Истина; //Поиск всех вхождений шаблона
//RegExp.MultiLine  = Ложь; //Многострочный режим
 
ЭтоУФ = Ложь;
 
 
 
ДеревоТестов.Колонки.Добавить("Имя");
ДеревоТестов.Колонки.Добавить("Статус");
ДеревоТестов.Колонки.Добавить("ПолныйПуть");
ДеревоТестов.Колонки.Добавить("Каталог");
ДеревоТестов.Колонки.Добавить("Фича");
ДеревоТестов.Колонки.Добавить("Сценарий");
ДеревоТестов.Колонки.Добавить("ЭтоScenarioOutline");
ДеревоТестов.Колонки.Добавить("ЭтоКонтекст");
ДеревоТестов.Колонки.Добавить("Примеры");
ДеревоТестов.Колонки.Добавить("ИменованныеПараметры");
ДеревоТестов.Колонки.Добавить("Пример");
ДеревоТестов.Колонки.Добавить("Шаг");
ДеревоТестов.Колонки.Добавить("ЗначенияПараметров");
ДеревоТестов.Колонки.Добавить("Снипет");
ДеревоТестов.Колонки.Добавить("АдресСнипета");
ДеревоТестов.Колонки.Добавить("ЭтоЧужойСнипет");
ДеревоТестов.Колонки.Добавить("СтрокаРеальнойПроцедуры");

ДеревоТестов.Колонки.Добавить("РезультатПрохожденияТестовСценария");
//ДеревоТестов.Колонки.Добавить("ВремяНачала");
//ДеревоТестов.Колонки.Добавить("ВремяОкончания");
//ДеревоТестов.Колонки.Добавить("ОписаниеОшибки");
 
 
ШагСтрокДляМодуля    = 10000;
 
 
ВыполнятьСценарииАсинхронно = Истина;
 
ЦветУспешно     = Новый Цвет(154,250,117);
ЦветОжидает     = Новый Цвет(244,255,91);
ЦветНеУспешно   = Новый Цвет(255,53,35);
ЦветЧужойСнипет = Новый Цвет(192,192,192);


//где читать про Аллюр репорт
//https://github.com/allure-framework/allure-core/wiki/Creating-Allure-Adapter