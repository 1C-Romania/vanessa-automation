
Процедура Подождать(Парам = 500)
	
	ПромДат = ТекущаяУниверсальнаяДатаВМиллисекундах() + Парам;
	//ПромДат = ТекущаяДата() + Парам;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ПромДат Цикл
		Продолжить;
	КонецЦикла;
КонецПроцедуры

Процедура ПередНачаломСценария() Экспорт
	
	Сообщить("Подключаю COMConnector...");
	COMConnector = Новый COMОбъект("V83.COMConnector");	
	СтрокаПодключения = "File=""E:\Bases\Бух30"";Usr=""Абдулов (директор)"";"; 
	ComСоединение = COMConnector.Connect(СтрокаПодключения);

	Контекст.Вставить("ComСоединение",ComСоединение);
	Сообщить("COMConnector готово.");
	
	
	
	
	
	Сообщить("Запускаю тестируемый сеанс 1С...");
	Стр = """C:\Program Files (x86)\1cv8\8.3.6.1760\bin\1cv8.exe"" ENTERPRISE /FE:\Bases\Бух30 /N""Абдулов (директор)"" /TESTCLIENT /RunModeManagedApplication";
	Сообщить(Стр);
	ЗапуститьПриложение(Стр);
	
	ТестируемоеПриложение = Новый ТестируемоеПриложение("localhost");
	
	// Пытаемся подключаться не более одной минуты
	
	ВремяОкончанияОжидания = ТекущаяДата() + 60;
	Подключен = Ложь;
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		Попытка
			ТестируемоеПриложение.УстановитьСоединение();
			Подключен = Истина;
			Прервать;
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	
	
	Если Не Подключен Тогда
		// Завершаем работу теста
		ТестируемоеПриложение = Неопределено;
		Сообщить("Не удалось установить соединение!");
		Возврат;
	КонецЕсли;	
	
	Сообщить("Подключен=" + Подключен);
	
	
	Контекст.Вставить("ТестируемоеПриложение",ТестируемоеПриложение);
	Сообщить("Тестируемый сеанс 1С готово.");
КонецПроцедуры

Процедура ПередОкончаниемСценария() Экспорт
	Контекст = "";
КонецПроцедуры

//есть Конфигурация 'Бухгалтерия 3.0 (Такси)'
//@ЕстьКонфигурация(Парам01Строка)
Процедура ЕстьКонфигурация(Парам01Строка) Экспорт
	ТестируемоеПриложение = Контекст.ТестируемоеПриложение;
	
	Сообщить("Ищу главное окно.");
	ГлавноеОкноТестКлиента = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемоеОкноКлиентскогоПриложения"),"Демонстрационная база*",,30);
	
	Сообщить("Пытаюсь активизировать гланое окно.");
	ГлавноеОкноТестКлиента.Активизировать();
	Контекст.Вставить("ГлавноеОкноТестКлиента",ГлавноеОкноТестКлиента);
КонецПроцедуры


Процедура УдалитьВсехКонтрагентовСТакимИменемИИхДоговора(ИмяКонтрагента)
	ComСоединение = Контекст.ComСоединение;
	
	//удалим созданные предыдущими тестами договоры - начало
	Запрос = ComСоединение.NewObject("Запрос");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", ИмяКонтрагента);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Сообщить("Удаляю договор " + ВыборкаДетальныеЗаписи.Ссылка.Наименование);
		ДоговорОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДоговорОбъект.Удалить();
	КонецЦикла;
	//удалим созданные предыдущими тестами договоры - конец
	
	
	
	
	//удалим созданные предыдущими тестами контрагентов - начало
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование";

	Запрос.УстановитьПараметр("Наименование", ИмяКонтрагента);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Сообщить("Удаляю контрагента " + ВыборкаДетальныеЗаписи.Ссылка.Наименование);
		КонтрагентОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		КонтрагентОбъект.Удалить();
	КонецЦикла;
	//удалим созданные предыдущими тестами контрагентов - начало
КонецПроцедуры


//существует Контрагент 'тестовый Контрагент'
//@СуществуетКонтрагент(Парам01Строка)
Процедура СуществуетКонтрагент(ИмяКонтрагента) Экспорт
	УдалитьВсехКонтрагентовСТакимИменемИИхДоговора(ИмяКонтрагента);
	
	
	
	
	ГлавноеОкноТестКлиента = Контекст.ГлавноеОкноТестКлиента;
	ТестируемоеПриложение  = Контекст.ТестируемоеПриложение;
	
	Подождать();
	ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/list/Справочник.Контрагенты");
	
	Подождать();
	ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/command/Справочник.Контрагенты.Команда.Создать");
	
	ФормаКонтрагента = ТестируемоеПриложение.НайтиОбъект(Тип("ТестируемаяФорма"), "Контрагент (создание)*");
	
	Подождать();
	Поле = ФормаКонтрагента.НайтиОбъект(Тип("ТестируемоеПолеФормы"), "Наименование");
	Поле.Активизировать();	
	
	Подождать();
	Поле.ВвестиТекст(ИмяКонтрагента);
	
	Подождать();
	КнопкаЗаписатьИЗакрыть = ФормаКонтрагента.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Записать");
	КнопкаЗаписатьИЗакрыть.Нажать();	
КонецПроцедуры

//существует договор 'тестовый договор Контрагента 1' с датой договора 01.01.2014
//@СуществуетДоговорСДатойДоговора(Парам01Строка,Парам02Дата)
Процедура СуществуетДоговорСДатойДоговора(Парам01Строка,Парам02Дата) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//существует услуга 'тестовая услуга 1'
//@СуществуетУслуга(Парам01Строка)
Процедура СуществуетУслуга(Парам01Строка) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//существует Документ 'РеализацияТоваровИУслуг1' от 01.01.2014  по контрагенту 'тестовый Контрагент' по договору 'тестовый договор Контрагента 1' по услуге 'тестовая услуга 1' на сумму 1000 руб.
//@СуществуетДокументОтПоКонтрагентуПоДоговоруПоУслугеНаСуммуРуб(Парам01Строка,Парам02Дата,Парам03Строка,Парам04Строка,Парам05Строка,Парам06Число)
Процедура СуществуетДокументОтПоКонтрагентуПоДоговоруПоУслугеНаСуммуРуб(Парам01Строка,Парам02Дата,Парам03Строка,Парам04Строка,Парам05Строка,Парам06Число) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//Введена учетная политика
//@ВведенаУчетнаяПолитика()
Процедура ВведенаУчетнаяПолитика() Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//'тестовый Контрагент' хочет оплатить сумму 1100 руб.
//@ХочетОплатитьСуммуРуб(Парам01Строка,Парам02Число)
Процедура ХочетОплатитьСуммуРуб(Парам01Строка,Парам02Число) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//фиксируется оплата по  'тестовый Контрагент' по договору 'тестовый договор Контрагента 1'  на сумму 1100 рублей
//@ФиксируетсяОплатаПоПоДоговоруНаСуммуРублей(Парам01Строка,Парам02Строка,Парам03Число)
Процедура ФиксируетсяОплатаПоПоДоговоруНаСуммуРублей(Парам01Строка,Парам02Строка,Парам03Число) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//формируется проводка по счету '62.01' на сумму 1000, где 'субконто3' заполнено как Документ 'РеализацияТоваровИУслуг1' от 01.01.2014
//@ФормируетсяПроводкаПоСчетуНаСуммуГдеЗаполненоКакДокументОт(Парам01Строка,Парам02Число,Парам03Строка,Парам04Строка,Парам05Дата)
Процедура ФормируетсяПроводкаПоСчетуНаСуммуГдеЗаполненоКакДокументОт(Парам01Строка,Парам02Число,Парам03Строка,Парам04Строка,Парам05Дата) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//на счете '62.01'  остается долг в размере 200 рублей по 'субконто3' Документ 'РеализацияТоваровИУслуг2' от 02.01.2014
//@НаСчетеОстаетсяДолгВРазмереРублейПоДокументОт(Парам01Строка,Парам02Число,Парам03Строка,Парам04Строка,Парам05Дата)
Процедура НаСчетеОстаетсяДолгВРазмереРублейПоДокументОт(Парам01Строка,Парам02Число,Парам03Строка,Парам04Строка,Парам05Дата) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

//формируется проводка аванса по счету '62.02' на сумму 700, где 'субконто3' заполнено как сам документ поступления оплаты
//@ФормируетсяПроводкаАвансаПоСчетуНаСуммуГдеЗаполненоКакСамДокументПоступленияОплаты(Парам01Строка,Парам02Число,Парам03Строка)
Процедура ФормируетсяПроводкаАвансаПоСчетуНаСуммуГдеЗаполненоКакСамДокументПоступленияОплаты(Парам01Строка,Парам02Число,Парам03Строка) Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

