//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)","ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования","И Я подключаю клиент тестирования ""ИмяКлиентаТестирования"" из таблицы клиентов тестирования");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОтключаюТекущегоКлиентТестирования()","ЯОтключаюТекущегоКлиентТестирования","И Я отключаю текущего клиент тестирования");
	
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)","ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем","Когда Я подключаю клиент тестирования ""ИмяКлиентаТестирования"" из таблицы клиентов тестирования от имени ""Логин"" с паролем ""Пароль""");
	
	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////

&НаКлиенте
Процедура ЗапомнитьКлиентаТестированияВСохраняемомКонтексте(КлиентТестирования) 
	Если КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда     
		Если ТипЗнч(КонтекстСохраняемый.ТестовоеПриложение) = Тип("ТестируемоеПриложение") Тогда
			Попытка
				КонтекстСохраняемый.РазорватьСоединение();
			Исключение
				//	
			КонецПопытки;
			
			КонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		КонецЕсли;
		
		КонтекстСохраняемый.ТестовоеПриложение = КлиентТестирования;
	Иначе
		КонтекстСохраняемый.Вставить("ТестовоеПриложение", КлиентТестирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьГлавноеОкноКлиентаТестирования(КлиентТестирования) 
	Результат = Неопределено;
	
	ИскомыеОкна = КлиентТестирования.НайтиОбъекты(Тип("ТестируемоеОкноКлиентскогоПриложения"));
	Для Каждого НайденноеОкно Из ИскомыеОкна Цикл
		Если НайденноеОкно.Основное Тогда
			Результат = НайденноеОкно;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗапомнитьГлавноеОкноКлиентаТестированияВСохраняемомКонтексте(ГлавноеОкноКлиентаТестирования) 
	Если КонтекстСохраняемый.Свойство("ГлавноеОкноТестируемого") Тогда     
		Если ТипЗнч(КонтекстСохраняемый.ГлавноеОкноТестируемого) = Тип("ТестируемоеОкноКлиентскогоПриложения") Тогда
			КонтекстСохраняемый.ГлавноеОкноТестируемого = Неопределено;
		КонецЕсли;
		
		КонтекстСохраняемый.ГлавноеОкноТестируемого = ГлавноеОкноКлиентаТестирования;
	Иначе
		КонтекстСохраняемый.Вставить("ГлавноеОкноТестируемого", ГлавноеОкноКлиентаТестирования);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////

&НаКлиенте
//И Я подключаю клиент тестирования "ИмяКлиентаТестирования" из таблицы клиентов тестирования
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования)
Процедура ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования) Экспорт

	Если НЕ ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, "") Тогда
		ВызватьИсключение "Не смог подключить TestClient!";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, ДопПараметр = "")

	КлиентТестирования = Ванесса.ПолучитьКлиентаТестирования(ИмяКлиентаТестирования, ДопПараметр);
	Если КлиентТестирования = Неопределено Тогда
		ВызватьИсключение "Не удалось подключить клиент тестирования.";
	КонецЕсли;
	
	ЗапомнитьКлиентаТестированияВСохраняемомКонтексте(КлиентТестирования);
	
	ОкноКлиентскогоПриложения = ПолучитьГлавноеОкноКлиентаТестирования(КлиентТестирования);
	Если ОкноКлиентскогоПриложения = Неопределено Тогда
		ВызватьИсключение "Не удалось получить главное окно клиента тестирования.";
	КонецЕсли;
	
	ЗапомнитьГлавноеОкноКлиентаТестированияВСохраняемомКонтексте(ОкноКлиентскогоПриложения);
	
	ОкноКлиентскогоПриложения.Активизировать();
	
	Возврат Истина;

КонецФункции

&НаКлиенте
//И Я отключаю текущего клиент тестирования
//@ЯОтключаюТекущегоКлиентТестирования()
Процедура ЯОтключаюТекущегоКлиентТестирования() Экспорт
	Если КонтекстСохраняемый.Свойство("ТестовоеПриложение") Тогда     
		Если ТипЗнч(КонтекстСохраняемый.ТестовоеПриложение) = Тип("ТестируемоеПриложение") Тогда
			Попытка
				КонтекстСохраняемый.РазорватьСоединение();
			Исключение
				//	
			КонецПопытки;
			
			КонтекстСохраняемый.ТестовоеПриложение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подключен", Истина);
	
	НайденныеСтроки = Ванесса.ДанныеКлиентовТестирования.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Подключен = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
//Когда Я подключаю клиент тестирования "СуриноваИН" из таблицы клиентов тестирования от имени "Логин" с паролем "Пароль"
//@ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования,Логин,Пароль)
Процедура ЯПодключаюКлиентТестированияИзТаблицыКлиентовТестированияОтИмениСПаролем(ИмяКлиентаТестирования, Знач Логин = "", Знач Пароль = "") Экспорт
	
	СтрокаАутентификации = "";
	Логин = СокрЛП(Логин); 
	Пароль = СокрЛП(Пароль);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	
	Если Не ПустаяСтрока(Логин) Тогда 
		СтрокаАутентификации = "/N"+Логин;
		Если Найти(Логин, " ") > 0 Тогда 
			СтрокаАутентификации = "/N""" + СокрЛП(Логин)+ """";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Пароль) Тогда 
			СтрокаАутентификации = СтрокаАутентификации + " /P"+Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПодключитьTestClientИзТаблицыКлиентовТестирования(ИмяКлиентаТестирования, "/out""" + ИмяВременногоФайла + """" + " "+ СтрокаАутентификации) Тогда
		ВызватьИсключение "Не смог подключить TestClient!";
	КонецЕсли;
	
КонецПроцедуры

//окончание текста модуля