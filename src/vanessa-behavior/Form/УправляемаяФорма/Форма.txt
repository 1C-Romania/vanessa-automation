&НаКлиенте
Перем WinSocket,СтримAdobe,МассивДляСозданияEpf,МассивНайденыхФич,ШагСтрокДляМодуля;
&НаКлиенте
Перем ОшибкаВнутриОбработкиВызоваBDD,АргументыКоманднойСтроки,БылиОшибкиЗапускаКукумбера;

&НаКлиенте
Перем КолСекундПростоя,МассивФайловФичДляГенерации,ТекущаяПозицияМассивФайловФичДляГенерации,СостояниеИдетГенерация,ИмяТекущейФичи,RegExp,ЭтоУФ;



&НаКлиенте
Процедура СделатьСообщение(Знач Сообщение) Экспорт
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВЖурнал(ТипСобытия, ТекстСобытия)
	Сообщить("" + ТекущаяДата() + " " + ТипСобытия +": " + ТекстСобытия);
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьВыполнениеСкрипта(ТекстИсключения) Экспорт
	ВызватьИсключение(ТекстИсключения);
КонецПроцедуры


&НаКлиенте
Процедура Приостановить(Интервал)
	//Сообщить("Начало sleep...");
	НовЗнач = ТекущаяУниверсальнаяДатаВМиллисекундах() + Интервал;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < НовЗнач Цикл
		Продолжить;
	КонецЦикла; 
	//Сообщить("Окончание sleep...");
КонецПроцедуры


&НаКлиенте
Функция ПерекодировкаДляОтправкиОшибки(Стр="",Кодировка="windows-1251") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="utf-8";
	СтримAdobe.Open();
	СтримAdobe.WriteText(Стр);
	СтримAdobe.Position=0;
	СтримAdobe.charset=Кодировка;
	Рез=СтримAdobe.ReadText(-1);
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


&НаКлиенте
Функция Перекодировка(Стр="",Кодировка="utf-8") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="windows-1251";
	СтримAdobe.Open();
	Попытка
		СтримAdobe.WriteText(Стр);
		СтримAdobe.Position=0;
		СтримAdobe.charset=Кодировка;
		Рез=СтримAdobe.ReadText(-1);
	Исключение
		//перекодировка падает на invoke, видимо из-за разной кодировки строк
		Рез = Стр;
	КонецПопытки;
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


&НаСервере
Процедура ВосстановитьНастройки()
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehavior");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", Объект.DebugLog);
		Настройки.Свойство("GenerateEpf", Объект.GenerateEpf);
		Настройки.Свойство("TestRun", Объект.TestRun);
		Настройки.Свойство("ГенерироватьУФ", Объект.ГенерироватьУФ);
		Настройки.Свойство("КаталогПроекта", Объект.КаталогПроекта);
		Настройки.Свойство("КаталогФич", Объект.КаталогФич);
	КонецЕсли;
	
	//Элементы.DebugLog.Пометка = Объект.DebugLog;
	//Элементы.GenerateEpf.Пометка = Объект.GenerateEpf;
	//Элементы.TestRun.Пометка = Объект.TestRun;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", Объект.DebugLog);
	Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	Настройки.Вставить("КаталогПроекта", Объект.КаталогПроекта);
	Настройки.Вставить("КаталогФич", Объект.КаталогФич);
	ХранилищеОбщихНастроек.Сохранить("VanessaBehavior",, Настройки);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если Не ЭтоЗапускИзКоманднойСтроки Тогда
		СохранитьНастройки();
	КонецЕсли;
	WinSocket = Неопределено;
КонецПроцедуры


//часть WinSocket - начало

&НаКлиенте
Процедура WinSocketError(Number, Description, Scode, Source, HelpFile, HelpContext, CancelDisplay)
	Сообщить(Description);
КонецПроцедуры

&НаСервере
Функция Это_step_matches_name_to_match(ПромСтр,ПолезноеЗначение)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.Это_step_matches_name_to_match(ПромСтр,ПолезноеЗначение);
КонецФункции


&НаКлиенте
Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition)
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
КонецПроцедуры


&НаКлиенте
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


&НаКлиенте
Функция ДобавитьПараметрStepDefinition(Знач Стр,КолПараметров) Экспорт
	КолПараметровСтр = СокрЛП(КолПараметров);
	Если СтрДлина(КолПараметровСтр) = 1 Тогда
		КолПараметровСтр = "0" + КолПараметровСтр;
	КонецЕсли;
	
	Стр = СтрЗаменить(Стр,"<Параметр","<Парам" + КолПараметровСтр) + ",";
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	
	Возврат Стр;
КонецФункции


&НаКлиенте
Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции


&НаКлиенте
Функция ПолучитьStepDefinition(Знач Стр,args) 
	
	StepDefinition = "";
	args = "";
	ПараметрыЧисла  = Новый Массив;
	ПараметрыСтроки = Новый Массив;
	ПараметрыДаты   = Новый Массив;
	
	//найдём параметры строки
	RegExp.Pattern = "\'[^\']+\'"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПромСтр = Item.Value;
		Если Лев(ПромСтр,1) = "'" Тогда
			ПромСтр = Сред(ПромСтр,2);
		КонецЕсли;
		Если Прав(ПромСтр,1) = "'" Тогда
			ПромСтр = Лев(ПромСтр,СтрДлина(ПромСтр)-1);
		КонецЕсли;
		
		//ПромСтр = СтрЗаменить(ПромСтр,"\\","\");
		
		ПараметрыСтроки.Добавить(ПромСтр);
		//Сообщить("Item.Value строка = " + Item.Value);
	КонецЦикла;
	
	стр=RegExp.Replace(стр, "<ПараметрСтрока>"); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры даты
	RegExp.Pattern = "\d\d\.\d\d\.(\d\d\d\d|\d\d)"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыДаты.Добавить(Item.Value);
		//Сообщить("Item.Value дата = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, "<ПараметрДата>"); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры числа
	//RegExp.Pattern = "\d+"; 
	RegExp.Pattern = "[-+]?\b[0-9]*\.?[0-9]+\b"; 
	//RegExp.Pattern = "/^-{0,1}\d+\.{0,1}\d*$/"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыЧисла.Добавить(Item.Value);
		//Сообщить("Item.Value число = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, "<ПараметрЧисло>"); 
	
	//Сообщить("стр="+стр);
	
	
	УбратьЗапрещенныеСимволыИзStepDefinition(стр);
	//стр = СтрЗаменить(Стр,":","");//надо убрать некоторые спец символы
	
	
	
	//разделим на слова
	//в VBScript нет метода Split, поэтому сделаем иначе
	RegExp.Pattern = "\s+"; 
	ПромСтр=RegExp.Replace(стр,"+|||+"); 
	//Сообщить("ПромСтр="+ПромСтр);
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ПромСтр,"+|||+",Истина);
	КолПараметров       = 0;
	КолПараметровЧисло  = 0;
	КолПараметровСтрока = 0;
	КолПараметровДата   = 0;
	СтрокаПараметров = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		//Сообщить("Элем="+Элем);
		Если Элем = "<ПараметрСтрока>" Тогда
			КолПараметров       = КолПараметров       + 1;
			КолПараметровСтрока = КолПараметровСтрока + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			//Сообщить("ПараметрыСтроки[КолПараметровСтрока-1]=" + ПараметрыСтроки[КолПараметровСтрока-1]);
			args             = args + "{""val"":""{" + ПараметрыСтроки[КолПараметровСтрока-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрЧисло>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыЧисла[КолПараметровЧисло-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрДата>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата  + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыДаты[КолПараметровДата-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Если СтрокаПараметров <> "" Тогда
		СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);

	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	Если СтрДлина(args) > 0 Тогда
		args = Лев(args,СтрДлина(args)-1);//убрали запятую
	КонецЕсли;
	//Сообщить("args="+args);
	
	
	Возврат StepDefinition;
	//Сообщить(стр);
КонецФункции

&НаКлиенте
Функция Это_begin_scenario_tags(Знач Стр,ИмяФ,ПутьКФ) Экспорт
	СтрПоиска = "[""begin_scenario"",{""tags"":[""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Стр = СокрЛП(Сред(Стр,СтрДлина(СтрПоиска)+1));
		//Сообщить("ПолезноеЗначение1="+ПолезноеЗначение);
		Стр = Лев(Стр,СтрДлина(Стр)-4);
		Поз = Найти(Стр,";");
		Стр1 = Лев(Стр,Поз-1);
		ИмяФ = СтрЗаменить(Стр1,"[ИмяФичи]=","");
		ПутьКФ = Сред(Стр,Поз+1);
		ПутьКФ = СтрЗаменить(ПутьКФ,"\\","\");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ВыполнитьПроцедуруОбработки(ИмяФайлаEpf,ИмяПроцедуры);
	ВызватьИсключение """ВыполнитьПроцедуруОбработки"" не реализована!";
КонецФункции



&НаКлиенте
Функция Это_end_scenario_tags(Знач Стр) Экспорт
	СтрПоиска = "[""end_scenario"",{""tags"":[""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


&НаКлиенте
Функция Это_invoke(Знач Стр,ИмяМетода,ЗначенияПараметров) Экспорт
	СтрПоиска = "[""invoke"",{""id"":""";
	Если Лев(Стр,СтрДлина(СтрПоиска)) = СтрПоиска Тогда
		Стр = СокрЛП(Сред(Стр,СтрДлина(СтрПоиска)+1));
		//Сообщить("Стр="+Стр);
		
		СтрПоиска2 = """args"":[";
		Поз = Найти(Стр,СтрПоиска2);
		ИмяМетода = Лев(Стр,Поз-3);
		ЗначенияПараметров = Сред(Стр,Поз+СтрДлина(СтрПоиска2)-1);
		ЗначенияПараметров = Лев(ЗначенияПараметров,СтрДлина(ЗначенияПараметров)-2);
		Сообщить("ИмяМетода="+ИмяМетода);
		Сообщить("ЗначенияПараметров="+ЗначенияПараметров);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции


&НаКлиенте
Функция СделатьInvoke(ИмяМетода,ЗначенияПараметров)
	СтрокаВозврата = "";
	
	
	//Сообщить("Invoke: ИмяМетода=" + ИмяМетода);
	//Сообщить("Invoke: ЗначенияПараметров=" + ЗначенияПараметров);
	
	ВызватьИсключение """СделатьInvoke"" не реализован!";
	
	//СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(ИмяМетода,"ID");
	//Если СтрТаблицаИзвестныхStepDefinition = Неопределено Тогда
	//	СтрокаВозврата = СтрокаВозврата = "[""fail"",{""message"":""" + "В epf файлах фич не обнаружен снипет:" + ИмяМетода + """}]";
	//	Возврат СтрокаВозврата;
	//КонецЕсли;
	//
	//МассивПараметров = РазобратьСтрокуЗначенийПараметров(ЗначенияПараметров,СтрТаблицаИзвестныхStepDefinition.Параметры);
	////Сообщить(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
	////в этом файле мы будем запускать данный шаг
	//
	//СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
	//Поз = Найти(СтрокаРеальнойПроцедуры,"(");
	//Если Поз > 0 Тогда
	//	СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,Поз-1);
	//КонецЕсли;
	//
	//СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтрокаРеальнойПроцедуры,МассивПараметров);
	//
	//Возврат СтрокаВозврата;
КонецФункции


&НаСервере
Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Истина)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Объект1.ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ);
КонецПроцедуры


&НаКлиенте
Функция ОбработатьПараметрыВызоваBDD(СтрокаВызова)
	TestRun        = Объект.TestRun;
	GenerateEpf    = Объект.GenerateEpf;
	КаталогПроекта = Объект.КаталогПроекта;
	КаталогФич     = Объект.КаталогФич;
	DebugLog       = Объект.DebugLog;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
	//Если DebugLog Тогда
	//	ЗаписатьВЖурнал("INFO", "Получен вызов BDD:" + СтрокаВызова);
	//КонецЕсли;	
	
	СтрокаВозврата = "[""success""]";
	//СтрокаВозврата = "[""success"",[{""id"":""1"", ""args"":[]}]]";
	
	StepDefinition               = "";
	ПолезноеЗначение             = "";
	ПримерИспользованияПроцедуры = "";
	ПромСтр = СтрокаВызова;
	Если Это_step_matches_name_to_match(ПромСтр,ПолезноеЗначение) Тогда
		//Сообщить("ПолезноеЗначение="+ПолезноеЗначение);
		args = "";
		//Сообщить("ПолезноеЗначение=" + ПолезноеЗначение);
		Если Найти(ПолезноеЗначение,"[") > 0 Тогда
			ПрерватьВыполнениеСкрипта("Не верное определение имени фичи: " + ПолезноеЗначение);
		КонецЕсли;
		StepDefinition = ПолучитьStepDefinition(ПолезноеЗначение,args);
		ПримерИспользованияПроцедуры   = ПолезноеЗначение;
		Сообщить("StepDefinition="+StepDefinition);
		
		СтрокаВозврата = "[""success"",[{""id"":""" + StepDefinition + """, ""args"":[" + args +"]}]]";
	КонецЕсли;
	
	ИмяФ                     = "";
	ОтносительныйКаталогФичи = "";
	ПромСтр                  = СтрокаВызова;
	Если Это_begin_scenario_tags(ПромСтр,ИмяФ,ОтносительныйКаталогФичи) Тогда
		Если ИмяТекущейФичи <> ИмяФ Тогда
			
			Если TestRun Тогда
				//если мы в режиме генерации, то глобальная переменная ИмяТекущейФичи уже была инициализирована в таймере "ТаймерДляГенерацииФич"
				ИмяТекущейФичи = ИмяФ;
			КонецЕсли;	
			
			Если TestRun Тогда
				ОбъектКонтекст = Новый Структура;//контекст один на всю фичу, а не на весь сценарий (в фиче может быть много сценариев)
				ОбъектКонтекст.Вставить("КаталогПроекта",КаталогПроекта);
				ОбъектКонтекст.Вставить("КаталогФич",КаталогФич);
				
				СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи);
			КонецЕсли;
		КонецЕсли;
		
		
		//СтрокаВозврата = "[""success""]";
		Если TestRun Тогда
			Если ИмяТекущейФичи = "" Тогда
				ПрерватьВыполнениеСкрипта("Ошибка в Это_begin_scenario_tags! Переменная ""ИмяТекущейФичи"" не заполнена!");
			КонецЕсли;	 
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи);
			СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтруктураОписанияEpf.ИмяФайлаEpf,"ПередНачаломСценария");
		КонецЕсли;
		Если DebugLog Тогда
			Сообщить("ИмяТекущейФичи="+ИмяТекущейФичи + ", ОтносительныйКаталогФичи="+ОтносительныйКаталогФичи);
		КонецЕсли;
	КонецЕсли;
	
	ПромСтр = СтрокаВызова;
	Если Это_end_scenario_tags(ПромСтр) Тогда
		Если TestRun Тогда
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи);
			СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтруктураОписанияEpf.ИмяФайлаEpf,"ПередОкончаниемСценария");
		КонецЕсли;
		//СтрокаВозврата = "[""success""]";
	КонецЕсли;
	
	ПромСтр            = СтрокаВызова;
	ИмяМетода          = "";
	ЗначенияПараметров = "";
	Если Это_invoke(ПромСтр,ИмяМетода,ЗначенияПараметров) Тогда
		Если TestRun Тогда
			СтрокаВозврата = СделатьInvoke(ИмяМетода,ЗначенияПараметров);
		Иначе
			СтрокаВозврата = "[""pending"", ""I'll do it later""]";
		КонецЕсли;
	КонецЕсли;
	
	//Возврат "[""error1"",[]]";
	//СтрокаВозврата = "qqq";
	Сообщить("СтрокаВозврата="+СтрокаВозврата);
	Сообщить(" ");
	//sleep(1500);
	
	Если GenerateEpf Тогда
		//СоздатьИлиДополнитьСтруктурыДляEpfФайлов(StepDefinition,ПримерИспользованияПроцедуры,ОтносительныйКаталогФичи);
		Если StepDefinition <> "" Тогда
			Если ИмяТекущейФичи = "" Тогда
				ПрерватьВыполнениеСкрипта("Ошибка! Переменная ""ИмяТекущейФичи"" не заполнена!");
			КонецЕсли;	 
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи);
			//ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,ГенерироватьУФ);
			ПоложитьТелоМодуляВСтруктураОписанияEpf(ИмяТекущейФичи,СтруктураОписанияEpf);
			//СтруктураОписанияEpf.ТелоМодуля = ТелоМодуля;
			//Сообщить(ТелоМодуля);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаВозврата;
КонецФункции


&НаКлиенте
Процедура WinSocketDataArrival(bytesTotal)
	
 	ТкстСообщения = "";
    WinSocket.GetData(ТкстСообщения);
	//Сообщить("1. " + ТкстСообщения);
	ТкстСообщения = Перекодировка(ТкстСообщения);
	Сообщить("Получено сообщение: " + ТкстСообщения);
	
	
	Приостановить(300);
	
	Результат = ОбработатьПараметрыВызоваBDD(ТкстСообщения);
	
	ЧтоВернем = Результат + Символы.ПС;
	WinSocket.SendData(ЧтоВернем);
	
	
	КолСекундПростоя = 0;
	//ПодключитьОбработчикОжидания("Таймер",1);
КонецПроцедуры

&НаКлиенте
Процедура WinSocketConnect()
	Сообщить("Покдлючение к " + WinSocket.RemoteHost + " успешно.");
КонецПроцедуры

&НаКлиенте
Процедура WinSocketConnectionRequest(requestID)
	Сообщить("Запрос подключения");

    Сост = "Подключение";

    Если НЕ WinSocket.State = 0 Тогда
        WinSocket.Close()
    КонецЕсли;

    WinSocket.Accept(requestID);

    Сообщить("Приконнектился "+WinSocket.RemoteHostIP);
КонецПроцедуры

&НаКлиенте
Процедура WinSocketClose()
	Сообщить("WinSocketClose");
КонецПроцедуры

&НаКлиенте
Функция СоздатьWinsock()
	Если WinSocket <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Попытка	
		WinSocket = Новый COMОбъект("mswinsock.winsock"); 
	Исключение 
		Сообщить("Не смог создать объект winsock.");
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки; 
	
	WinSocket.RemoteHost = "127.0.0.1";
	WinSocket.LocalPort  = 54321;
	
	ДобавитьОбработчик WinSocket.Close, WinSocketClose; 
	ДобавитьОбработчик WinSocket.ConnectionRequest, WinSocketConnectionRequest; 
	ДобавитьОбработчик WinSocket.Connect, WinSocketConnect; 
	ДобавитьОбработчик WinSocket.DataArrival, WinSocketDataArrival; 
	ДобавитьОбработчик WinSocket.Error, WinSocketError; 
	//ДобавитьОбработчик WinSocket.SendComplete, SendComplete; 
	//ДобавитьОбработчик WinSocket.SendProgress, SendProgress; 
	
	Сообщить("Создал winsock.");
	
	Возврат Истина
КонецФункции // ()
//часть WinSocket - конец



&НаКлиенте
Процедура Инициализация()
	ИмяТекущейФичи       = "";
	МассивДляСозданияEpf = Новый Массив;
	МассивНайденыхФич    = Новый Массив;
	ШагСтрокДляМодуля    = 1000;
	
	//ТаблицаИзвестныхStepDefinition = Новый ТаблицаЗначений;
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ИмяФайла");
	////ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ТаблицаПроцедур");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Id");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Параметры");
	
	//ТабицаКонтекстовОбработок = Новый ТаблицаЗначений;
	//ТабицаКонтекстовОбработок.Колонки.Добавить("ИмяФайла");
	//ТабицаКонтекстовОбработок.Колонки.Добавить("Обработка");
	
	ОшибкаВнутриОбработкиВызоваBDD = Ложь;
	
	АргументыКоманднойСтроки = Новый Массив;
	
	КолСекундПростоя = 0;
	
КонецПроцедуры



&НаСервере
Функция УбратьКаталогПроекта(Путь,КаталогПроекта)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.УбратьКаталогПроекта(Путь,КаталогПроекта);
КонецФункции


&НаКлиенте
Процедура ПроставитьТегВФичу(ПутьКФайлу)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");

	КаталогПроекта = Объект.КаталогПроекта;
	
	Файл = Новый Файл(ПутьКФайлу);
	ИмяФичи = "@[ИмяФичи]=" + Файл.ИмяБезРасширения + ";" + УбратьКаталогПроекта(Файл.Путь,КаталогПроекта);
	
	
	НадоПерезаписатьТег   = Ложь;
	УжеЕстьПравильныйТег  = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Лев(СокрЛП(Стр),1) = "@" Тогда 
			Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
				Если Стр <> ИмяФичи Тогда
					НадоПерезаписатьТег = Истина;
				Иначе
					УжеЕстьПравильныйТег = Истина;
				КонецЕсли;
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	Текст.Закрыть();
	
	Если УжеЕстьПравильныйТег Тогда
		Возврат;
	КонецЕсли;
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	ИмяТемпФайла = ПутьКФайлу + "Temp";
	УдалитьФайлы(ИмяТемпФайла);
	
	ЗТ = Новый ЗаписьТекста(ИмяТемпФайла,"UTF-8",,Истина); 
	
	ДобавитьТегСледующейСтрокой = Ложь;
	УжеЗаписывалТег             = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НадоПерезаписатьТег Тогда 
			Если Лев(СокрЛП(Стр),1) = "@" Тогда 
				Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
					//Файл = Новый Файл(ПутьКФайлу);
					Стр = ИмяФичи;
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе	
			Если (Лев(СокрЛП(Стр),1) <> "#") и (СтрДлина(СокрЛП(Стр)) > 0) Тогда 
				ДобавитьТегСледующейСтрокой = Истина;
			КонецЕсли;	
		КонецЕсли;	 
		
		
		Если ДобавитьТегСледующейСтрокой и (Не УжеЗаписывалТег) Тогда 
			//Файл = Новый Файл(ПутьКФайлу);
			СтрФича = ИмяФичи;
			ЗТ.Записать(СтрФича); 
			ЗТ.Записать(Символы.ПС); 
			ЗТ.Записать(Символы.ПС); 
			
			ДобавитьТегСледующейСтрокой = Ложь;
			УжеЗаписывалТег = Истина;
		КонецЕсли;	 
		
		ЗТ.Записать(Стр); 
		ЗТ.Записать(Символы.ПС); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	УдалитьФайлы(ПутьКФайлу);
	ПереместитьФайл(ИмяТемпФайла,ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог)
	//Сообщить("НачальныйКаталог= " + НачальныйКаталог);
	МассивФайлов = НайтиФайлы(НачальныйКаталог,"*.feature",Истина);
	Для Каждого Элем Из МассивФайлов Цикл
		//Сообщить("Найден файл " + Элем.Имя);
		ПроставитьТегВФичу(Элем.ПолноеИмя);
		
		СтруктураФичи = Новый Структура;
		СтруктураФичи.Вставить("ИмяФичи",Элем.ИмяБезРасширения);
		СтруктураФичи.Вставить("ПолныйПуть",Элем.Путь);
		
		//Стр = СтрЗаменить(СтруктураФичи.ПолныйПуть,КаталогПроекта);
		
		
		МассивНайденыхФич.Добавить(СтруктураФичи);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогФич(СтрКаталогПроекта,СтрКаталогФич)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ПолучитьКаталогФич(СтрКаталогПроекта,СтрКаталогФич);
КонецФункции


&НаКлиенте
Процедура АнализЛогаКукумбера(ИмяФайла,БылиОшибкиЗапускаКукумбера)
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		БылиОшибкиЗапускаКукумбера = Истина;
		Сообщить("Не найден файл " + ИмяФайла);
		Возврат;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	НайденаОшибка = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НРег(Лев(Стр,12)) = НРег("*** WARNING:") Тогда
			Продолжить;
		КонецЕсли;
	
		БылиОшибкиЗапускаКукумбера = Истина;
		Сообщить("Обнаружена ошибка Cucumber.");
		Сообщить(Стр);
		НайденаОшибка = Истина;
		Прервать;// ошибка содержится в первой строке
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Если Не НайденаОшибка Тогда
		Сообщить("Ошибок в логе Cucumber не найдено.");
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
		Сообщить("Создан каталог: " + Путь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,ИмяФичи)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлОсноваОбработки,"UTF-8");

	
	ВременноеИмяФайла = ИмяФайлОсноваОбработки + "_Temp";
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,"TemplateEpf",ИмяФичи);
		Стр = СтрЗаменить(Стр,"Template epf",ИмяФичи);
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	ПереместитьФайл(ВременноеИмяФайла,ИмяФайлОсноваОбработки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТелоМодуляВМассивСервер(Стр)
	Тзн = ЗначениеИзСтрокиВнутр(Стр);
	Тзн.Сортировать("НомСтр");
	Возврат Тзн.ВыгрузитьКолонку("Стр");
КонецФункции

&НаКлиенте
Процедура СоздатьФайлыОбработок(БылиОшибки)
	КаталогПроекта = Объект.КаталогПроекта;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
		
	Для Каждого СтруктураОписанияEpf Из МассивДляСозданияEpf Цикл
		ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
		Если ЭтоУФ Тогда
			ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
		Иначе
			ТелоМодуля.Сортировать("НомСтр");
			ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
		КонецЕсли;	 
		
		СделатьСообщение("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		//Продолжить;
		
		УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
		Если ГенерироватьУФ Тогда
			ИмяФайлаФормаУФ = КаталогПроекта + "\lib\TemplateEpfUF\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0_template";
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
			
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			
			Пока Истина Цикл
				Стр = Текст.ПрочитатьСтроку();
				Если Стр = Неопределено Тогда
					Прервать;
				КонецЕсли;	 
				
				ЗТ.ЗаписатьСтроку(Стр); 
				
				Если Стр = "},""//начало текста модуля" Тогда
					Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
						//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
						СтрТелоМодуля = СтрЗаменить(СтрТелоМодуля,"""","""""");
						ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
						//ЗТ.Записать(Символы.ПС); 
					КонецЦикла;
				КонецЕсли;	 
			КонецЦикла;	
			
			
			Текст.Закрыть();
			ЗТ.Закрыть();
		Иначе	
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
				//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
				ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
				//ЗТ.Записать(Символы.ПС); 
			КонецЦикла;
			ЗТ.Закрыть();
		КонецЕсли;	 
		СделатьСообщение("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		ИмяФайлаМодуляДляСборки = КаталогПроекта + "\lib\TemplateEpf\ObjectModule.txt";
		Если ГенерироватьУФ Тогда
			ИмяФайлаМодуляДляСборки = КаталогПроекта + "\lib\TemplateEpfUF\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
		КонецЕсли;	 
		
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		ПереместитьФайл(СтруктураОписанияEpf.ВременноеИмяМодуля,ИмяФайлаМодуляДляСборки);
		СделатьСообщение("Переименовал в " + ИмяФайлаМодуляДляСборки);
		
		
		ИмяФайлОсноваОбработкиTemplate = КаталогПроекта + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		ИмяФайлОсноваОбработки         = КаталогПроекта + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
		Если ГенерироватьУФ Тогда
			ИмяФайлОсноваОбработкиTemplate = КаталогПроекта + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
			ИмяФайлОсноваОбработки         = КаталогПроекта + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
		КонецЕсли;	 
		
		КопироватьФайл(ИмяФайлОсноваОбработкиTemplate,ИмяФайлОсноваОбработки);
		ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,СтруктураОписанияEpf.ИмяФичи);
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		СоздатьКаталогЕслиЕгоНет(Файл.Путь);
		
		Если Файл.Существует() Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;	 
		
		СтрокаСборкиEpf = КаталогПроекта + "\vendor\precommit1c\pyv8unpack.py --compile " +  КаталогПроекта + "\lib\TemplateEpf " + СтруктураОписанияEpf.ИмяФайлаEpf;
		Если ГенерироватьУФ Тогда
			СтрокаСборкиEpf = КаталогПроекта + "\vendor\precommit1c\pyv8unpack.py --compile " +  КаталогПроекта + "\lib\TemplateEpfUF " + СтруктураОписанияEpf.ИмяФайлаEpf;
		КонецЕсли;	 
		Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
		
		//retCode = "";
		//ЗапуститьПриложение(СтрокаСборкиEpf,,Истина,retCode);
		КомандаСистемы(СтрокаСборкиEpf);
		Если Файл.Существует() Тогда
			Сообщить("Файл " + Файл.ПолноеИмя + " создан.");
		Иначе	
			Сообщить("Ошибка создания файла " + Файл.ПолноеИмя + "!!!");
			БылиОшибки = Истина;
		КонецЕсли;	 
		//Сообщить("retCode=" + retCode);
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		УдалитьФайлы(ИмяФайлОсноваОбработки);
		
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаймерОжиданияСеансаОбмена()
	КолСекундПростоя = КолСекундПростоя + 1;
	КаталогПроекта   = Объект.КаталогПроекта;
	GenerateEpf      = Объект.GenerateEpf;
	TestRun          = Объект.TestRun;
	
	//Если GenerateEpf Тогда
	//	Если КолСекундПростоя > 2 Тогда
	//		СостояниеИдетГенерация = Ложь;
	//	КонецЕсли;	 
	//КонецЕсли;	 
	
	//Сообщить("КолСекундПростоя="+КолСекундПростоя);
	
	Если КолСекундПростоя >= 3 Тогда
		Если НЕ WinSocket.State = 0 Тогда
			WinSocket.Close()
		КонецЕсли;
		ОтключитьОбработчикОжидания("ТаймерОжиданияСеансаОбмена");
		КолСекундПростоя = 0;
		АнализЛогаКукумбера(КаталогПроекта + "\CucumberConsolErr.txt",БылиОшибкиЗапускаКукумбера);
		Если БылиОшибкиЗапускаКукумбера Тогда
			Возврат;
		КонецЕсли;	 
		Если GenerateEpf Тогда
			БылиОшибки = Ложь;
			СоздатьФайлыОбработок(БылиОшибки);
			Если Не БылиОшибки Тогда
				Сообщить("Ошибок при создании обработок не было.");
			Иначе	
				Сообщить("Были ошибки при создании обработок.");
			КонецЕсли;	 
			Сообщить(" ");
			СостояниеИдетГенерация = Ложь;
		КонецЕсли;
		
		Если TestRun Тогда
			Сообщить("Запуск тестов закончен.");
		КонецЕсли;	 
	КонецЕсли;	 
	//Сообщить("КолСекундПростоя = " + КолСекундПростоя);
КонецПроцедуры


&НаКлиенте
Процедура ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера,ПереданноеИмяФичи = "")
	КаталогПроекта = Объект.КаталогПроекта;
	КаталогФич     = Объект.КаталогФич;
	Сервер = "";
	//Сервер = Новый TCPСервер(54321);
	//Сервер.Запустить();
	
	
	
	
	
	
	
	//Путь = "E:\commons\Rep\cuke4onec\cuke4onec.epf";
	//Путь = КаталогПроекта + "\cuke4onec.epf";
	//cuke4onec = ОЛЕ.ExternalDataProcessors.Create(Путь);
	
	//StepsDir = "E:\commons\Rep\cuke4onec\features\step_definitions";
	//StepsDir = КаталогПроекта + "\features\step_definitions";
	//cuke4onec._Create(StepsDir);
	//cuke4onec._Purge();
	
	//СтрокаЗапускаКукумбер = "Cucumber --dry-run --no-snippets """ + КаталогПроекта + "\features"" > " + КаталогПроекта + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets  """ + КаталогПроекта + "\features"" > " + КаталогПроекта + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber  --no-snippets """ + КаталогПроекта + "\features""";
	
	
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets --no-color """ + КаталогПроекта + "\features"" > " + КаталогПроекта + //"\CucumberConsoleLog.txt" + " 2>" + КаталогПроекта + "\CucumberConsolErr.txt";
	
	Если ПереданноеИмяФичи = "" Тогда
		ПараметрФича = ПолучитьКаталогФич(КаталогПроекта,КаталогФич);
	Иначе
		ПараметрФича = ПереданноеИмяФичи;
	КонецЕсли;	 
	
	СтрокаЗапускаКукумбер = "cucumber --no-snippets -r " + КаталогПроекта + "\host.wire """ + ПараметрФича + """ > " + КаталогПроекта + "\CucumberConsoleLog.txt" + " 2>" + КаталогПроекта + "\CucumberConsolErr.txt";
	//СтрокаЗапускаКукумбер = "cucumber """ + КаталогПроекта + "\features"" ";

	WinSocket.Listen();
	ЗаписатьВЖурнал("INFO", "Жду соединения");

	Сообщить("Строка для запуска Cucumber: " + СтрокаЗапускаКукумбер);
	УдалитьФайлы(Объект.КаталогПроекта + "\CucumberConsolErr.txt");
	
	ИмяCmd = ПолучитьИмяВременногоФайла("cmd");
	УдалитьФайлы(ИмяCmd);
	ЗТ = Новый ЗаписьТекста(ИмяCmd,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку(СтрокаЗапускаКукумбер); 
	ЗТ.Закрыть();
	
	
	
	КомандаСистемы("start cmd.exe /c " + ИмяCmd);
	
	ПодключитьОбработчикОжидания("ТаймерОжиданияСеансаОбмена",1);
КонецПроцедуры


//&НаСервере
//Функция НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf)
//	Объект1 = РеквизитФормыВЗначение("Объект");
//	Возврат Объект1.НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
//КонецФункции

&НаКлиенте
Функция НайтиФичуВМассиве(Стр) Экспорт
	Для Каждого Элем Из МассивДляСозданияEpf Цикл
		Если Элем.ИмяФичи = Стр Тогда
			Возврат Элем;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПоложитьТелоМодуляВСтруктураОписанияEpf(Стр,СтруктураОписанияEpf)
	Для Каждого Элем Из МассивДляСозданияEpf Цикл
		Если Элем.ИмяФичи = Стр Тогда
			Элем.ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение "Ошибка в ""ПоложитьТелоМодуляВСтруктураОписанияEpf""! Не найдена фича: " + Стр;
КонецПроцедуры


&НаСервере
Функция СоздатьПустуюСтруктуруEpf()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.СоздатьПустуюСтруктуруEpf();
КонецФункции


&НаСервереБезКонтекста
Функция ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные,ШагСтрокДляМодуля)
	//Если ТипЗнч(ФайлВХранилище) <> Тип("ДвоичныеДанные") Тогда
	//	ДвоичныеДанные = ФайлВХранилище.Получить();
	//Иначе
	//	ДвоичныеДанные = ФайлВХранилище;
	//КонецЕсли; 
	
	//ДвоичныеДанные = ФайлВХранилище.Получить();
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат ЗначениеВСтрокуВнутр(Тзн);
КонецФункции // ()


&НаКлиенте
Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	//ФайлВХранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
	
	Возврат ЗагрузитьТелоМодуляВТаблицуЗначенийСервер(ДвоичныеДанные,ШагСтрокДляМодуля);
КонецФункции


&НаСервере
Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ)
	Объект1 = РеквизитФормыВЗначение("Объект");
	Объект1.ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи)
	КаталогПроекта = Объект.КаталогПроекта;
	КаталогФич     = Объект.КаталогФич;
	ГенерироватьУФ = Объект.ГенерироватьУФ;
	
	Файл = Новый Файл(КаталогПроекта + "\lib\TemplateEpf");
	Если Не Файл.Существует() Тогда
		Сообщить("Не найден служебный каталог \lib\TemplateEpf !!!");
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейФичи = "" Тогда
		Сообщить("Не определилась текущая фича из тегов feature файла.");
		Возврат;
	КонецЕсли;
	
	СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи);
	Если СтруктураОписанияEpf = Неопределено Тогда
		СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
		СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
		СтруктураОписанияEpf.ИмяФайлаEpf        = КаталогПроекта + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + ".epf";
		СтруктураОписанияEpf.ИмяМодуляEpf       = КаталогПроекта + "\src" + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + "\ObjectModule.txt";
		СтруктураОписанияEpf.ВременноеИмяМодуля = КаталогПроекта + "\lib\TemplateEpf\Temp\ObjectModule_" + ИмяТекущейФичи + ".txt";
		
		//Сообщить("СтруктураОписанияEpf.ИмяМодуляEpf="+СтруктураОписанияEpf.ИмяМодуляEpf);
		
		
		УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		Если Не Файл.Существует() Тогда
			//Сообщить(СтруктураОписанияEpf.ВременноеИмяМодуля);
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			ЗТ.Закрыть();
		КонецЕсли;
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ИмяМодуляEpf); //значит надо загрузить модуль из исходников
		Если Файл.Существует() Тогда
			СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ИмяМодуляEpf);
		Иначе
			СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
			//значит создаём файл первый разделим
			ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,Истина);
		КонецЕсли;
		
		
		
		
		МассивДляСозданияEpf.Добавить(СтруктураОписанияEpf);
		СделатьСообщение("Добавляю фичу " + СтруктураОписанияEpf.ИмяФичи + " в МассивДляСозданияEpf.");
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймерДляГенерацииФич()
	КаталогПроекта = Объект.КаталогПроекта;
	
	Если СостояниеИдетГенерация Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Не СостояниеИдетГенерация Тогда
		СостояниеИдетГенерация = Истина;
	КонецЕсли;	 
	
	Если ТекущаяПозицияМассивФайловФичДляГенерации > МассивФайловФичДляГенерации.Количество()-1 Тогда
		//значит перебрали все фичи
		ОтключитьОбработчикОжидания("ТаймерДляГенерацииФич");
		Сообщить("Все фичи обработаны!");
		Возврат;
	КонецЕсли;	
	
	
	Если ТекущаяПозицияМассивФайловФичДляГенерации = 0 Тогда
		Сообщить("Всего найдено фич " + МассивФайловФичДляГенерации.Количество());
	КонецЕсли;	 
	
	ФайлФичи       = МассивФайловФичДляГенерации[ТекущаяПозицияМассивФайловФичДляГенерации];
	ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
	Сообщить("Работаю по фиче: " + ИмяТекущейФичи);
	
	МассивДляСозданияEpf = Новый Массив;
	ОтносительныйКаталогФичи = СтрЗаменить(ФайлФичи.Путь,КаталогПроекта,"");
	Если Прав(ОтносительныйКаталогФичи,1) = "\" Тогда
		ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи,СтрДлина(ОтносительныйКаталогФичи)-1);
	КонецЕсли;	 
	
	Сообщить("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
	СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи);
	
	ТекущаяПозицияМассивФайловФичДляГенерации = ТекущаяПозицияМассивФайловФичДляГенерации + 1;
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера,ФайлФичи.ПолноеИмя);
	Если БылиОшибкиЗапускаКукумбера Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьGenerateEpf()
	
	КаталогПроекта = Объект.КаталогПроекта;
	КаталогФич     = Объект.КаталогФич;
	
	ОтключитьОбработчикОжидания("ТаймерДляГенерацииФич");
	НачальныйКаталог = ПолучитьКаталогФич(КаталогПроекта,КаталогФич);
	ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог);
	МассивФайловФичДляГенерации = Новый Массив;
	СостояниеИдетГенерация = Ложь;
	ТекущаяПозицияМассивФайловФичДляГенерации = 0;
	
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		БылиОшибкиЗапускаКукумбера = Ложь;
		МассивФайловФичДляГенерации.Добавить(Файл);
		ПодключитьОбработчикОжидания("ТаймерДляГенерацииФич",1);
		Возврат;
	КонецЕсли;
	
	МассивФайловФичДляГенерации = НайтиФайлы(НачальныйКаталог,"*.feature",Истина);
	ПодключитьОбработчикОжидания("ТаймерДляГенерацииФич",1);
	
	
	//ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(ПолучитьКаталогФич(Объект.КаталогПроекта,Объект.КаталогФич));
	//
	//БылиОшибкиЗапускаКукумбера = Ложь;
	//ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера);
	//Если БылиОшибкиЗапускаКукумбера Тогда
	//	ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	//КонецЕсли;
	//
	//Если ОшибкаВнутриОбработкиВызоваBDD Тогда
	//	ПрерватьВыполнениеСкрипта("ОшибкаВнутриОбработкиВызоваBDD");
	//КонецЕсли;
	//
	//Если GenerateEpf Тогда
	//	БылиОшибки = Ложь;
	//	СоздатьФайлыОбработок(БылиОшибки);
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КнопкаВыполнить(Команда)
	
	
	Если Не СоздатьWinsock() Тогда
		Возврат;
	КонецЕсли;	 
	//Исключение 
	//КонецПопытки; 	Возврат;
	
	Инициализация();
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	//Сообщить("WinSocket1.State = " + WinSocket1.State);
	Если WinSocket.State = 8 Тогда
		WinSocket.Close();
	КонецЕсли;	 
	
	
	Если Объект.TestRun и Объект.GenerateEpf Тогда
		ВызватьИсключение "Нельзя одновременно ставить TestRun и GenerateEpf!";
	КонецЕсли;	 
	
	Если Объект.GenerateEpf Тогда
		СделатьGenerateEpf();
	КонецЕсли;	 
	//
	//
	//Если TestRun Тогда
	//	СделатьTestRun();
	//КонецЕсли;	 
	//
	//
	//Возврат;
	//
	//WinSocket1 = ЭлементыФормы.WinSocket;
	//WinSocket1.Listen();
	//WinSocket1.Connect();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВосстановитьНастройки();
КонецПроцедуры



СтримAdobe = Новый COMОбъект("Adodb.Stream");

RegExp            = Новый COMОбъект("VBScript.RegExp");
RegExp.IgnoreCase = Ложь; //Игнорировать регистр
RegExp.Global     = Истина; //Поиск всех вхождений шаблона
RegExp.MultiLine  = Ложь; //Многострочный режим

ЭтоУФ = Истина;