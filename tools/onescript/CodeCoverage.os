#Использовать v8runner

Перем ОсновнаяВерсияПлатформы;

Функция ПолучитьВременныйКаталог()
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяФайла);
	Возврат ИмяФайла;
КонецФункции	

Процедура ОчиститьКаталог(Каталог)
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("ПолныйПуть");
	ТаблицаКаталогов.Колонки.Добавить("Длина");
	
	//Сообщить("КаталогОткуда="+КаталогОткуда);
	//Сообщить("КаталогКуда="+КаталогКуда);
	
	Файлы = НайтиФайлы(Каталог,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			СтрокаТаблицаКаталогов = ТаблицаКаталогов.Добавить();
			СтрокаТаблицаКаталогов.ПолныйПуть = Файл.ПолноеИмя;
			СтрокаТаблицаКаталогов.Длина      = СтрДлина(Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	 
		
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	ТаблицаКаталогов.Сортировать("Длина убыв");
	
	Для Каждого СтрокаТаблицаКаталогов Из ТаблицаКаталогов Цикл
		//Сообщить(СтрокаТаблицаКаталогов.ПолныйПуть);
		УдалитьФайлы(СтрокаТаблицаКаталогов.ПолныйПуть);
	КонецЦикла;	
КонецПроцедуры 

Процедура ОбработатьФайлConfiguration_xml(ИмяФайла,Версия)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Ложь); 
	
	ЗначениеВерсия = "DontUse";
	Если Версия = "8.3.9" Тогда
		ЗначениеВерсия = "VERSION" + СтрЗаменить(Версия,".","_");
	ИначеЕсли (Версия >= "8.3.10") И (СтрДлина(Версия) = 6) Тогда
		ЗначениеВерсия = "VERSION" + СтрЗаменить(Версия,".","_");
	КонецЕсли;	 
	
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"<CompatibilityMode>") > 0 Тогда
			Стр = "			<CompatibilityMode>" + ЗначениеВерсия + "</CompatibilityMode>";
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	КопироватьФайл(ИмяВременногоФайла,ИмяФайла);
	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

Процедура СоздатьПустуюБазу(ПутьКБазе, Исходники)
	Файл = Новый Файл(ПутьКБазе); 
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(ПутьКБазе);
	Иначе	
		ОчиститьКаталог(ПутьКБазе)
	КонецЕсли;	 
	
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ОсновнаяВерсияПлатформы);
	
	УправлениеКонфигуратором.СоздатьФайловуюБазу(ПутьКБазе);
	
	УправлениеКонфигуратором.УстановитьКонтекст("/F" + ПутьКБазе + "\","","");
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + Исходники + """"); 

	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	
	//теперь выгрузим конфу в файлы ещё раз и заменим параметр CompatibilityMode на DontUse, чтобы гарантировать, что не используется режим совместимости
	ВременныйКаталог = ПолучитьВременныйКаталог();
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles  """ + ВременныйКаталог + """"); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	//Сообщить("ВременныйКаталог="+ВременныйКаталог);
	ОбработатьФайлConfiguration_xml(ВременныйКаталог + "\Configuration.xml",ОсновнаяВерсияПлатформы);
	
	//теперь загрузим конфу обратно
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles  """ + ВременныйКаталог + """"); 
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	
	ОчиститьКаталог(ВременныйКаталог);
	

	УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных();
	
	
КонецПроцедуры 

Функция ОбернутьВКавычки(Стр)
	Возврат """" + Стр + """"; 
КонецФункции	 

Функция ПолучитьСтрокуВызоваSikuli()
	ЭтоLinux = Ложь;
	Если ЭтоLinux Тогда
		Возврат "runsikulix -r ";
	Иначе
		Возврат "runsikulix -r ";
	КонецЕсли;
КонецФункции

Функция ВыполнитьSikuliСкрипт(СтрокаКоманды, ЖдатьОкончания = -1)
	Стр = ПолучитьСтрокуВызоваSikuli() + " " + СтрокаКоманды;
	
	Сообщить(Стр);
	retCode = -1;
	ЗапуститьПриложение(Стр,,Истина,retCode);
	
	Статус = retCode;
	//Если Статус <> 0 Тогда
	//	Если ФайлСуществуетКомандаСистемы(ВременныйФайл) Тогда
	//		Текст = Новый ЧтениеТекста;
	//		Текст.Открыть(ВременныйФайл,"UTF-8");
	//		ОписаниеОшибки = Текст.Прочитать();
	//		Сообщить("" + ОписаниеОшибки);
	//		Текст.Закрыть();
	//	КонецЕсли;	 
	//КонецЕсли;	 
	
	Возврат Статус;
КонецФункции

Процедура ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту,ИмяJson)
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
	путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(ОсновнаяВерсияПлатформы);
	
	Файл = Новый Файл(путьКПлатформе); 
	КаталогBin = Файл.Путь;
	
	//ПутьКJson = ПутьКПроекту + "\tools\JSON\" + ИмяJson;
	//НовыйПутьКJson = ПутьКБазе + "\" + ИмяJson;
	//УдалитьФайлы(НовыйПутьКJson);
	//
	//КопироватьФайл(ПутьКJson,НовыйПутьКJson);
	//
	////Установка адреса отладчика
	//Текст = Новый ЧтениеТекста;
	//Текст.Открыть(НовыйПутьКJson,"UTF-8");
	//Стр = Текст.Прочитать();	
	//Текст.Закрыть();
	//
	//СистемнаяИнформация = Новый СистемнаяИнформация;
	//
	//Стр = СтрЗаменить(Стр,"{АдресОтладчика}","tcp://localhost:1560");
	//
	//УдалитьФайлы(НовыйПутьКJson);
	//ЗТ = Новый ЗаписьТекста(НовыйПутьКJson,"UTF-8",,Истина); 
	//ЗТ.Записать(Стр); 
	//ЗТ.Закрыть();
	//
	//ДопПараметрЗапуска = "/TESTMANAGER /Debug /Execute ""%1"" /C""StartFeaturePlayer;VBParams=%2;""";
	//ДопПараметрЗапуска = СтрШаблон(ДопПараметрЗапуска,ПутьКПроекту + "\vanessa-automation.epf",НовыйПутьКJson);
	
	СтрокаКоманды = ОбернутьВКавычки(КаталогBin + "1cv8") + " DESIGNER /F" + ОбернутьВКавычки(ПутьКБазе);
	//СтрокаКоманды = ОбернутьВКавычки(КаталогBin + "1cv8") + " ENTERPRISE /F" + ОбернутьВКавычки(ПутьКБазе) + " " + ДопПараметрЗапуска;
	
	Сообщить(СтрокаКоманды);
	retCode = -1;
	ЗапуститьПриложение(СтрокаКоманды,,Ложь,retCode);
	
КонецПроцедуры

Функция ПолучитьАдресОтладчика(ПутьКПроекту)
	ВременныйФайл = ПолучитьИмяВременногоФайла("txt");
	
	ИмяСкрипта = ПутьКПроекту + "\tools\Sikuli\GetDebuggerUrl.sikuli --args """ + ВременныйФайл + """";
	Статус = ВыполнитьSikuliСкрипт(ИмяСкрипта);
	Если Статус <> 0 Тогда
		ВызватьИсключение "Не получилось выполнить скрипт копирующий в буфер обмена адрес отладчика.";
	КонецЕсли;	 
	
	
	Файл = Новый Файл(ВременныйФайл); 
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Не найден файл с адресом отладчика.";
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ВременныйФайл,"UTF-8");
	Стр = Текст.Прочитать();
	Текст.Закрыть();
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат Стр;
КонецФункции	

Процедура СобратьЗамерыUFОсновной(ПутьКПроекту,ПутьКБазе)
	СоздатьПустуюБазу(ПутьКБазе, ПутьКПроекту + "\lib\CF\83");
	ЗапуститьКонфигураторБазы(ПутьКБазе,ПутьКПроекту,"VBParams8316UF_CodeCoverage.json");
	
	//Сообщить("Вернуть!!!!!!!!!!!!!!!!");
	
	АдресОтладчика = ПолучитьАдресОтладчика(ПутьКПроекту);
	Сообщить("АдресОтладчика="+АдресОтладчика);
	
	
КонецПроцедуры 

Процедура ВыполнитьОбработку(ПутьКПроекту, ПутьКБазе)
	Файл = Новый Файл(ПутьКПроекту); 
	Если Файл.Существует() Тогда
		СоздатьКаталог(ПутьКПроекту);
	КонецЕсли;	 
	
	Файл = Новый Файл(ПутьКПроекту); 
	Если НЕ Файл.Существует() Тогда
		ВызватьИсключение "Не найден каталог <" + ПутьКПроекту + ">";
	КонецЕсли;	 
	
	СобратьЗамерыUFОсновной(ПутьКПроекту,ПутьКБазе);
КонецПроцедуры 

ОсновнаяВерсияПлатформы = "8.3.16";

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Сообщить("Не переданы параметры!");
ИначеЕсли АргументыКоманднойСтроки.Количество() <>  2 Тогда
	Сообщить("Скрипт принимает два параметра!");
Иначе
	//параметры
	//1. путь к проекту
	//2. путь к базе
	ВыполнитьОбработку(АргументыКоманднойСтроки[0],АргументыКоманднойСтроки[1]);
КонецЕсли;

Сообщить("Обработка завершена.");
Sleep(1000);



