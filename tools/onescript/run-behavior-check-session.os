#Использовать logos
#Использовать json

Перем Лог;

Функция УбратьСлешСправа(Стр)
	Если Прав(Стр,1) = "\" Тогда
		Возврат Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;	 
	Если Прав(Стр,1) = "/" Тогда
		Возврат Лев(Стр,СтрДлина(Стр)-1);
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	



Функция ПрочитатьФайлВСтроку(ИмяФайла)
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		ВызватьИсключение("Файл " + ИмяФайла + " не существует!");
	КонецЕсли;	 
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Рез = "";
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Рез = Рез + Стр + Символы.ПС;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат  Рез;
КонецФункции	

Функция ПреобразоватьПутьСТочкамиКНормальномуПути(ОригСтр)
	ИмяВременногоФайлаКоманда = ПолучитьИмяВременногоФайла("cmd");
	ИмяВременногоФайлаЛог     = ПолучитьИмяВременногоФайла("txt");
	
	//ИмяВременногоФайлаКоманда = "h:\commons\temp\111.cmd";
	//ИмяВременногоФайлаЛог     = "h:\commons\temp\111.txt";
	
	
	Команда = "@echo on
				|for %%f in ( """ + ОригСтр + """ ) do set fullname=%%~ff
				|echo %fullname% > " + ИмяВременногоФайлаЛог;
				
	
	//Сообщить(""+ Команда);
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманда,"UTF-8",,Ложь); 
	ЗТ.ЗаписатьСтроку(Команда); 
	
	ЗТ.Закрыть();
	
	
	
	
	retCode = -1;
	ЗапуститьПриложение(ИмяВременногоФайлаКоманда,,Истина,retCode);
	
	
	Рез = ОригСтр;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайлаЛог,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Рез = Стр;
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Рез;
	
КонецФункции	

Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(ПараметрыБилда)
	МассивКлючей = Новый Массив;
	
	Для каждого ПараметрБилда Из ПараметрыБилда Цикл
		Если Лев(ПараметрБилда.Значение,1) = "." Тогда
			МассивКлючей.Добавить(ПараметрБилда.Ключ);
		КонецЕсли;	 
	КонецЦикла;
	
	Для каждого Ключ Из МассивКлючей Цикл
		Было  = ПараметрыБилда[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(ПараметрыБилда[Ключ]);
		//Сообщить("Было=" + Было + ", Стало="+Стало);
		
		ПараметрыБилда.Вставить(Ключ,Стало);
	КонецЦикла;
КонецПроцедуры

Функция ПрочитатьФайлJSON(ИмяФайла)
	JsonСтрока  = ПрочитатьФайлВСтроку(ИмяФайла);
	ПарсерJSON  = Новый ПарсерJSON();
	Рез         = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
	//ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(Рез);
	Рез.Вставить("ИмяФайлаБилда",ИмяФайла);
	Возврат Рез;
КонецФункции	

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ДобавитьНулейДоНужнойДлинны(Знач Стр,Кол)
	Пока СтрДлина(Стр) < Кол Цикл
		Стр = "0" + Стр;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции	

Функция СоздатьСтрокуДляСортировкиВерсии(Стр)
	Рез = "";
	
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	Для каждого Элем Из Массив Цикл
		Рез = Рез + ДобавитьНулейДоНужнойДлинны(Элем,7);
	КонецЦикла; 
	
	Возврат Рез;
КонецФункции	



Функция НайтиСамуюПозднююВерсиюПлатформыПоСтрокеПоиска(СтрокаПоискаВерсияПлатформы,КаталогПоискаВерсииПлатформы)
	
	ТаблицаВерсий = Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("Имя");
	ТаблицаВерсий.Колонки.Добавить("ДляСортировки");
	
	Файлы = НайтиФайлы(КаталогПоискаВерсииПлатформы,СтрокаПоискаВерсияПлатформы + "*",Истина);
	Для каждого Файл Из Файлы Цикл
		Если Не Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;	 

		СтрТаблицаВерсий     = ТаблицаВерсий.Добавить();
		СтрТаблицаВерсий.Имя = Файл.Имя;
		СтрТаблицаВерсий.ДляСортировки = СоздатьСтрокуДляСортировкиВерсии(СтрТаблицаВерсий.Имя);
		//Сообщить("СтрТаблицаВерсий.ДляСортировки="+СтрТаблицаВерсий.ДляСортировки);
	КонецЦикла;
	
	Если ТаблицаВерсий.Количество() = 0 Тогда
		Стр = "Не найдено ни одной версии по строке <" + СтрокаПоискаВерсияПлатформы + ">" + " в каталоге <" + КаталогПоискаВерсииПлатформы + ">";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
	
	ТаблицаВерсий.Сортировать("ДляСортировки убыв");	
	
	Рез = УбратьСлешСправа(КаталогПоискаВерсииПлатформы) + "\" +  ТаблицаВерсий[0].Имя + "\bin\1cv8.exe";
	
	Возврат """" + Рез + """";
КонецФункции	

Функция ПолучитьСтрокуЗапускаБилда(ПараметрыБилда)
	Стр = ПараметрыБилда["ПутьК1С"];
	Стр = Стр + " " + ПараметрыБилда["СтрокаПодключенияКБазе"];
	
	Стр = Стр + " /Execute " + ПараметрыБилда["ПутьКVanessaBehavior"] + " /C""StartFeaturePlayer;VBParams=" + ПараметрыБилда["ИмяФайлаБилда"] +  """ /TESTMANAGER";
	
	Если ПараметрыБилда["ВыводитьСообщенияВФайл"] <> Неопределено Тогда
		Стр = Стр + " /Out""" + ПараметрыБилда["ВыводитьСообщенияВФайл"] + """";
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

Функция ПолучитьСтрокуЗапускаИнициализации(ПараметрыБилда)
	Стр = ПараметрыБилда["ПутьК1С"];
	Стр = Стр + " " + ПараметрыБилда["СтрокаПодключенияКБазе"];
	
	Стр = Стр + " /Execute " + ПараметрыБилда["EpfДляИнициализацияБазы"] + " /C""InitDataBase;VBParams=" + ПараметрыБилда["ПараметрыДляИнициализацияБазы"] + """";
	
	
	Возврат Стр;
КонецФункции	

Процедура ВыполнитьЗапускОдногоБилда(ПараметрыБилда)
	ПутьК1С        = НайтиСамуюПозднююВерсиюПлатформыПоСтрокеПоиска(ПараметрыБилда["ВерсияПлатформы"],ПараметрыБилда["КаталогПоискаВерсииПлатформы"]);
	ПараметрыБилда.Вставить("ПутьК1С",ПутьК1С);
	Лог.Информация("Была найдена версия платформы: " + ПутьК1С);
	
	
	EpfДляИнициализацияБазы = ПараметрыБилда["EpfДляИнициализацияБазы"];
	Если EpfДляИнициализацияБазы <> Неопределено Тогда
		//значит надо запустить обработку, которая сделает инициализацию базы и закроет сеанс 1С
		СтрокаЗапускаБилда = ПолучитьСтрокуЗапускаИнициализации(ПараметрыБилда);
		retCode = -1;
		Лог.Информация("Строка запуска 1С для инициализации: " + СтрокаЗапускаБилда);
		ЗапуститьПриложение(СтрокаЗапускаБилда,,Истина,retCode);
		Если retCode <> 0 Тогда
			Сообщить("Запуск сеанса 1С для инициализации базы вернул код возврата: " + retCode);
			ЗавершитьРаботу(1);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	СтрокаЗапускаБилда = ПолучитьСтрокуЗапускаБилда(ПараметрыБилда);
	
	Лог.Информация("Строка запуска билда: " + СтрокаЗапускаБилда);
	
	retCode = -1;
	ЗапуститьПриложение(СтрокаЗапускаБилда,,Истина,retCode);
	Если retCode <> 0 Тогда
		Сообщить("Запуск сеанса 1С вернул код возврата: " + retCode);
		ЗавершитьРаботу(1);
	КонецЕсли;	 
	
	
КонецПроцедуры


Процедура ПроверитьПараметрыБилдаНаКорректность(ПараметрыБилда,ИмяФайлаВариантБилда)
	Если Не ЗначениеЗаполнено(ПараметрыБилда["ИмяБилда"]) Тогда
		Стр = ИмяФайлаВариантБилда + ". Не указан параметр ""ИмяБилда""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(ПараметрыБилда["ВерсияПлатформы"]) Тогда
		Стр = ИмяФайлаВариантБилда + ". Не указан параметр ""ВерсияПлатформы""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(ПараметрыБилда["КаталогПоискаВерсииПлатформы"]) Тогда
		Стр = ИмяФайлаВариантБилда + ". Не указан параметр ""КаталогПоискаВерсииПлатформы""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(ПараметрыБилда["КаталогФич"]) Тогда
		Стр = ИмяФайлаВариантБилда + ". Не указан параметр ""КаталогФич""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(ПараметрыБилда["СтрокаПодключенияКБазе"]) Тогда
		Стр = ИмяФайлаВариантБилда + ". Не указан параметр ""СтрокаПодключенияКБазе""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(ПараметрыБилда["ПутьКVanessaBehavior"]) Тогда
		Стр = ИмяФайлаВариантБилда + ". Не указан параметр ""ПутьКVanessaBehavior""!";
		Лог.Ошибка(Стр);
		ВызватьИсключение(Стр);
	КонецЕсли;	 
КонецПроцедуры

Процедура ОчиститьКаталоги(МассивКаталогов)
	Для каждого Каталог Из МассивКаталогов Цикл
		ФайлПроверкаСуществования = Новый Файл(Каталог);
		Если НЕ ФайлПроверкаСуществования.Существует() Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		Файлы = НайтиФайлы(Каталог,"*");
		Для каждого Файл Из Файлы Цикл
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСтатусВсехБилдов(СтатусЗапускаВсехБилдов,ПараметрыБилда)
	ВыгружатьСтатусВыполненияСценариевВФайл = ПараметрыБилда["ВыгружатьСтатусВыполненияСценариевВФайл"];
	Если НРег(ВыгружатьСтатусВыполненияСценариевВФайл) <> "истина" Тогда
		Возврат;
	КонецЕсли;	 
	
	ИмяФайлаСтатусаБилда = ПараметрыБилда["ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"];
	ФайлПроверкаСуществования = Новый Файл(ИмяФайлаСтатусаБилда);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Ошибка в ОбновитьСтатусВсехБилдов. Файл " + ИмяФайлаСтатусаБилда + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаСтатусаБилда,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Стр <> "0" Тогда
			СтатусЗапускаВсехБилдов = 1; //значит были упавшие шаги
		КонецЕсли;	 
	КонецЦикла;	
	
	Текст.Закрыть();
КонецПроцедуры

Процедура ВыполнитьЗапускВсехБилдов(ОсновнойФайлПараметров)
	ОсновныеПараметры = ПрочитатьФайлJSON(ОсновнойФайлПараметров);
	
	КаталогиДляОчистки = ОсновныеПараметры["КаталогиДляОчистки"];
	ОчиститьКаталоги(КаталогиДляОчистки);
	
	
	МассивВариантыБилдов = ОсновныеПараметры["ВариантыБилдов"];
	
	Билды = Новый Массив;
	
	Лог.Информация("Проверяю корректность переданных параметров...");
	Для каждого ИмяФайлаВариантБилда Из МассивВариантыБилдов Цикл
		ФайлПроверкаСуществования = Новый Файл(ИмяФайлаВариантБилда);
		Если НЕ ФайлПроверкаСуществования.Существует() Тогда
			ВызватьИсключение("Файл " + ИмяФайлаВариантБилда + " не существует!");
		КонецЕсли;	 
		
		
		
		ПараметрыБилда = ПрочитатьФайлJSON(ИмяФайлаВариантБилда);
		ПроверитьПараметрыБилдаНаКорректность(ПараметрыБилда,ИмяФайлаВариантБилда);
		
		Билды.Добавить(Новый Структура("ИмяФайлаВариантБилда,ПараметрыБилда",ИмяФайлаВариантБилда,ПараметрыБилда));
	КонецЦикла;
	
	
	Лог.Информация("-----------------------------------------");
	
	СтатусЗапускаВсехБилдов = 0;
	
	Для каждого Билд Из Билды Цикл
		Лог.Информация("Запускаю билд по файлу <" + Билд.ИмяФайлаВариантБилда + ">");
		
		ПараметрыБилда = ПрочитатьФайлJSON(Билд.ИмяФайлаВариантБилда);
		Лог.Информация("ИмяБилда = <" + ПараметрыБилда["ИмяБилда"] + ">");
		
		ВыполнитьЗапускОдногоБилда(ПараметрыБилда);
		
		ОбновитьСтатусВсехБилдов(СтатусЗапускаВсехБилдов,ПараметрыБилда);
		
		Лог.Информация("-----------------------------------------");
	КонецЦикла;
	
	Если СтатусЗапускаВсехБилдов <> 0 Тогда
		Лог.Информация("БЫЛИ ОШИБКИ ВО ВРЕМЯ ВЫПОЛНЕНИЯ СЦЕНАРИЕВ!");
	Иначе	
		Лог.Информация("Ошибок не было!");
	КонецЕсли;	 
	
	ЗавершитьРаботу(СтатусЗапускаВсехБилдов);
КонецПроцедуры





Лог = Логирование.ПолучитьЛог("behavior.run.log");

Лог.Информация("Запуск сценариев...");



Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	Лог.Ошибка("Не передан файл параметров!");
	//Возврат;
ИначеЕсли АргументыКоманднойСтроки.Количество() > 1 Тогда
	Лог.Ошибка("Скрипт принимает только один параметр!");
	//Возврат;
Иначе	
	ВыполнитьЗапускВсехБилдов(АргументыКоманднойСтроки[0]);
КонецЕсли;

