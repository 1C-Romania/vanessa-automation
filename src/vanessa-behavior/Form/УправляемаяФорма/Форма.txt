&НаКлиенте
Перем ОбъектКонтекст;

&НаКлиенте
Перем ТаблицаКонтекстовОбработок;
&НаКлиенте
Перем МассивИменКонтекстовОбработок;


&НаКлиенте
Перем ВыполнятьСценарииАсинхронно;

&НаКлиенте
Перем МассивСценариевДляВыполнения,МассивСтрокДереваДанныеФормы;
&НаКлиенте
Перем ТекИД_СценарияВМассиве;
&НаКлиенте
Перем ТекИД_ШагаВМассиве;
 
//&НаКлиенте
//Перем МассивКонтекстовОбработок;


&НаКлиенте
Перем МассивИДСтрокиДерева;
&НаКлиенте
Перем МассивРезультатПрохожденияТестовСценария;
 
&НаКлиенте
Перем ЦветУспешно;
&НаКлиенте
Перем ЦветОжидает;
&НаКлиенте
Перем ЦветНеУспешно;
&НаКлиенте
Перем ЦветЧужойСнипет;


&НаКлиенте
Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	
	ТипСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);
	
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение, ТипСообщения);
КонецПроцедуры
 
&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры


&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


&НаСервереБезКонтекста
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции


&НаКлиенте
Функция УзнатьЕстьПоддержкаНемодальныхФормКлиент() Экспорт
	Возврат УзнатьЕстьПоддержкаНемодальныхФорм();
КонецФункции


&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить фичи из каталога";
	ИначеЕсли Объект.текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить одну фичу";
	ИначеЕсли Объект.текЗначениеОперации = "" Тогда
	Иначе	
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + Объект.текЗначениеОперации;
		Сообщить(Стр);	
		ВызватьИсключение Стр;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогФич = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;
 
	ЗагрузитьФичи();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
	
	
	
	//Элементы.ПодменюЗагрузитьФичи.Заголовок = "ывпаыв";
	
	//текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	//ОбновитьКнопкуЗагрузитьФичи();
	//ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры


&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ИспользуемоеИмяФайла;
КонецФункции


&НаСервере
Процедура ВосстановитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehavior");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", Объект.DebugLog);
		//Настройки.Свойство("GenerateEpf", GenerateEpf);
		//Настройки.Свойство("TestRun", TestRun);
		Настройки.Свойство("ГенерироватьУФ", Объект.ГенерироватьУФ);
		Настройки.Свойство("КаталогИнструментов", Объект.КаталогИнструментов);
		Настройки.Свойство("КаталогФич", Объект.КаталогФич);
		Настройки.Свойство("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
		Настройки.Свойство("КаталогOutput", Объект.КаталогOutput);
		Настройки.Свойство("текЗначениеОперации", Объект.текЗначениеОперации);
	КонецЕсли;
	
	//Элементы.DebugLog.Пометка = Объект.DebugLog;
	//Элементы.GenerateEpf.Пометка = Объект.GenerateEpf;
	//Элементы.TestRun.Пометка = Объект.TestRun;
КонецПроцедуры
 
&НаСервере
Процедура СохранитьНастройки()
	Если Объект.РежимСамотестирования Тогда
		Возврат;
	КонецЕсли;  
	
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", Объект.DebugLog);
	//Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	//Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	Настройки.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	Настройки.Вставить("КаталогФич", Объект.КаталогФич);
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("КаталогOutput", Объект.КаталогOutput);
	Настройки.Вставить("текЗначениеОперации", Объект.текЗначениеОперации);
	ХранилищеОбщихНастроек.Сохранить("VanessaBehavior",, Настройки);
КонецПроцедуры



&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
    Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	ДополнительныеПараметры.Вставить("ИмяОбработки",ИмяОбработки);
КонецПроцедуры


&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла) Экспорт
	ДополнительныеПараметры = Новый Структура;
	Если ЕстьПоддержкаНемодальныхФорм Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбработкаПослеПомещенияФайла"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("НачатьПомещениеФайла(Оповещение,, ИмяФайла, Ложь, УникальныйИдентификатор);");
		
		Возврат ДополнительныеПараметры.ИмяОбработки;
	Иначе
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь, УникальныйИдентификатор);
		//ПодключитьВнешнююОбработку(АдресХранилища);
		Результат = Неопределено;
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
		Возврат ИмяОбработки;
		
		//ОбработкаПолученияФайлаОбработкиТеста(Результат,АдресХранилища,ИмяФайла,ДополнительныеПараметры);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура ПодключитьИнструментПарсерФич()
	ПутьКФайлу = Объект.КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		ВызватьИсключение "Не найден файл vbFeatureReader.epf!";
	КонецЕсли;	 
	
	Результат = ПодключитьВнешнююОбработкуКлиент(Файл.ПолноеИмя);
	//Сообщить("Результат=" + Результат);
КонецПроцедуры


&НаСервере
Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки)
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		Сообщить("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;
	
	СтрТаблицаИзвестныхStepDefinition                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,"ТаблицаИзвестныхStepDefinition");
КонецПроцедуры


&НаСервере
Процедура ДобавитьСнипетыСервер(МассивСнипетовИзОбработки,ИмяФайла,БылиОшибки)
	Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
		ДобавитьСнипет(Снипет.Снипет,Снипет.ИмяПроцедуры,ИмяФайла,БылиОшибки);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич)
	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог " + КаталогФич + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	
	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка("Ищу снипеты в каталоге " + КаталогПоиска);
	
	
	//Сообщить("КаталогПоиска="+КаталогПоиска);
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		
		
		ИмяОбработки = ПодключитьВнешнююОбработкуКлиент(Файл.ПолноеИмя);
		
		
		
		Попытка
			ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
		Исключение
			//Сообщить("" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		
		Попытка
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(ЭтаФорма);
		Исключение
			Сообщить("Не смог загрузить снипеты из " + Файл.ПолноеИмя);
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",ФормаОбработки);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		МассивИменКонтекстовОбработок.Добавить(Файл.ПолноеИмя);
		
		ДобавитьСнипетыСервер(МассивСнипетовИзОбработки,Файл.ПолноеИмя,БылиОшибки);
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Функция ОбходКаталогов(ПутьКаталога,МассивРезультатОбходаКаталогов,Уровень)
	ФайлПутьКаталога = Новый Файл(ПутьКаталога);
	Если ФайлПутьКаталога.ЭтоКаталог() Тогда
		НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*");
	Иначе
		НайденныеФайлы = Новый Массив;//вернём одну фичу
		НайденныеФайлы.Добавить(ФайлПутьКаталога);
	КонецЕсли;	 
	Для каждого ф из НайденныеФайлы цикл
		Если ф.ЭтоКаталог() тогда
			
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень",Уровень);
			СтруткураФайла.Вставить("Каталог",Истина);
			СтруткураФайла.Вставить("Фича",Ложь);
			СтруткураФайла.Вставить("Имя",ф.Имя);
			СтруткураФайла.Вставить("ПолныйПуть",ф.ПолноеИмя);
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			
			//НовСтр = врДерево.Строки.Добавить();
			//НовСтр.Каталог    = Истина;
			//НовСтр.ПолныйПуть = ф.ПолноеИмя;
			//НовСтр.Имя        = ф.Имя;
			Уровень = Уровень + 1;
			ОбходКаталогов(ПутьКаталога+"\"+ф.Имя,МассивРезультатОбходаКаталогов,Уровень);
			Уровень = Уровень - 1;
			
			//Если НовСтр.Строки.Количество() = 0 Тогда
			//	врДерево.Строки.Удалить(НовСтр);
			//КонецЕсли;
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			СтруткураФайла = Новый Структура;
			СтруткураФайла.Вставить("Уровень",Уровень);
			СтруткураФайла.Вставить("Каталог",Ложь);
			СтруткураФайла.Вставить("Фича",Истина);
			СтруткураФайла.Вставить("Имя",ф.ИмяБезРасширения);
			СтруткураФайла.Вставить("ПолныйПуть",ф.ПолноеИмя);
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ф.ПолноеИмя);
			СтруткураФайла.Вставить("ДвоичныеДанные",ДвоичныеДанные);
			
			МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
			
			
			//НовСтр            = врДерево.Строки.Добавить();
			//НовСтр.Фича       = Истина;
			//НовСтр.ПолныйПуть = ф.ПолноеИмя;
			//НовСтр.Имя        = ф.ИмяБезРасширения;
			
			//ЗагрузитьФичу(ф.ПолноеИмя,НовСтр.Строки);
		КонецЕсли;
	КонецЦикла;
КонецФункции


&НаСервере
Процедура УдалитьПустыеКаталогиИзДерева(Дерево)
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Каталог Тогда
			Если Строка.Строки.Количество() = 0 Тогда
				Дерево.Строки.Удалить(Строка);
			Иначе	
				УдалитьПустыеКаталогиИзДерева(Строка);
			КонецЕсли;  
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСтрокиДереваФичамиСервер(Дерево,FeatureReader,ТзнТаблицаИзвестныхStepDefinition)
	Для каждого Строка Из Дерево.Строки Цикл
		Если Строка.Фича Тогда
			FeatureReader.ЗагрузитьФичу(Строка.ПолныйПуть,Строка.Строки,ТзнТаблицаИзвестныхStepDefinition);
		Иначе	
			ЗаполнитьСтрокиДереваФичамиСервер(Строка,FeatureReader,ТзнТаблицаИзвестныхStepDefinition);
		КонецЕсли;  
	КонецЦикла;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов,ДвДанныеvbFeatureReader)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	Дерево.Строки.Очистить();
	ТекДерево = Дерево;
	ТекУровень = 0;
	
	Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
		//Сообщить(Элем.ПолныйПуть + ", уровень " + Элем.Уровень);
		Если Элем.Уровень > ТекУровень Тогда
			ТекУровень = Элем.Уровень;
			НовСтр     = ТекДерево.Строки.Добавить();
			ТекДерево = НовСтр;
		ИначеЕсли Элем.Уровень < ТекУровень Тогда
			Разн = ТекУровень - Элем.Уровень;
			Для Ккк = 1 По Разн Цикл
				НовСтр = НовСтр.Родитель;
			КонецЦикла;
			НовСтр     = НовСтр.Родитель.Строки.Добавить();
			ТекУровень = Элем.Уровень;
			//ТекУровень = Элем.Уровень;
			//ТекСтроки = ТекСтроки.Родитель.Строки;
			ТекДерево = НовСтр;
		Иначе	
			НовСтр     = ТекДерево.Родитель.Строки.Добавить();
		КонецЕсли;  
		
		Если Элем.Каталог Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Каталог    = Истина;
			НовСтр.ПолныйПуть = Элем.ПолныйПуть;
			НовСтр.Имя        = Элем.Имя;
		ИначеЕсли Элем.Фича Тогда
			//НовСтр            = ТекСтроки.Строки.Добавить();
			НовСтр.Фича        = Истина;
			НовСтр.ТипКартинки = 1;
			НовСтр.ПолныйПуть  = Элем.ПолныйПуть;
			НовСтр.Имя         = Элем.Имя;
		КонецЕсли;  
		
		//ТекДерево = НовСтр;
	КонецЦикла;
	
	УдалитьПустыеКаталогиИзДерева(ОбъектСервер.ДеревоТестов);
	
	
	
	
	ВременноеИмяФайла = ПолучитьИмяВременногоФайла("epf");
	ДвДанныеvbFeatureReader.Записать(ВременноеИмяФайла);
	FeatureReader = ВнешниеОбработки.Создать(ВременноеИмяФайла,Ложь);
	
	
	
	ЗаполнитьСтрокиДереваФичамиСервер(Дерево,FeatureReader,ТзнТаблицаИзвестныхStepDefinition);
	
	
	//FeatureReader.ЗагрузитьФичу();
	
	
	
	УдалитьФайлы(ВременноеИмяФайла);
	
	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,"ТаблицаИзвестныхStepDefinition");
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры


&НаКлиенте
Функция ПолучитьПутьКFeatureReader()
	ПутьКФайлу = Объект.КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		ВызватьИсключение "Не найден файл vbFeatureReader.epf!";
	КонецЕсли;	 
	
	Возврат ПутьКФайлу;
КонецФункции



&НаКлиенте
Процедура ЗаполнитьДерево(Каталог)
	Файл = Новый Файл(Каталог);
	
	
	МассивРезультатОбходаКаталогов = Новый Массив;
	
	СтруткураФайла = Новый Структура;
	СтруткураФайла.Вставить("Каталог",Истина);
	СтруткураФайла.Вставить("Имя",Файл.Имя);
	СтруткураФайла.Вставить("ПолныйПуть",Каталог);
	СтруткураФайла.Вставить("Уровень",1);
	
	МассивРезультатОбходаКаталогов.Добавить(СтруткураФайла);
	
	//НовСтр            = ДеревоЗначений.Строки.Добавить();
	//НовСтр.Каталог    = Истина;
	//НовСтр.Имя        = Файл.Имя;
	//НовСтр.ПолныйПуть = Каталог;
	Уровень = 2;
	ОбходКаталогов(Каталог,МассивРезультатОбходаКаталогов,Уровень);    
	
	
	ДвДанныеvbFeatureReader = Новый ДвоичныеДанные(ПолучитьПутьКFeatureReader());
	
	ЗаполнитьДеревоЗначенийПоМассивуСервер(МассивРезультатОбходаКаталогов,ДвДанныеvbFeatureReader);
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьКаталогФич(ПутьКФичам)
	ЗаполнитьДерево(ПутьКФичам);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов = СтруктураПараметров.КаталогИнструментов;
	КаталогФич          = СтруктураПараметров.КаталогФич;
	МассивСообщений     = СтруктураПараметров.МассивСообщений;
	DebugLog            = СтруктураПараметров.DebugLog;
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат;
	КонецЕсли;	 
	
	
	
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	ТаблицаИзвестныхStepDefinition.Очистить();
	
	
	
	
	Путь = ПутьКФичам.ПолноеИмя;
	Если ПутьКФичам.ЭтоФайл() Тогда
		Путь = ПутьКФичам.Путь;
	КонецЕсли;	 
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь);
	
	
	
	ОбработатьКаталогФич(ПутьКФичам.ПолноеИмя);
	
	
	
	//ДеревоЗначений = Новый ДеревоЗначений;
	//ДеревоЗначений.Колонки.Добавить("Имя");
	//ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	//ДеревоЗначений.Колонки.Добавить("Каталог");
	//ДеревоЗначений.Колонки.Добавить("Фича");
	//ДеревоЗначений.Колонки.Добавить("Сценарий");
	//ДеревоЗначений.Колонки.Добавить("ЭтоScenarioOutline");
	//ДеревоЗначений.Колонки.Добавить("ЭтоКонтекст");
	//ДеревоЗначений.Колонки.Добавить("Примеры");
	//ДеревоЗначений.Колонки.Добавить("ИменованныеПараметры");
	//ДеревоЗначений.Колонки.Добавить("Пример");
	//ДеревоЗначений.Колонки.Добавить("Шаг");
	//ДеревоЗначений.Колонки.Добавить("ЗначенияПараметров");
	//ДеревоЗначений.Колонки.Добавить("Снипет");
	//ДеревоЗначений.Колонки.Добавить("АдресСнипета");
	//ДеревоЗначений.Колонки.Добавить("ЭтоЧужойСнипет");
	//ДеревоЗначений.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	//
	////Если ПутьКФичам.ЭтоКаталог() Тогда
	//ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам.ПолноеИмя,ТаблицаИзвестныхStepDefinition);
	////ДеревоЗначений.ВыбратьСтроку();
	////КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Функция ПровверитьСуществованиеКаталогаИнструментов(ИмяФайла)
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		Сообщить("Не найден каталог инструментов: " + ИмяФайла);
		Возврат Ложь;
	КонецЕсли;	   
	
	Возврат Истина;
КонецФункции	


&НаКлиенте
Процедура ЗагрузитьФичи()
	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	
	Если НЕ ПровверитьСуществованиеКаталогаИнструментов(КаталогИнструментов) Тогда
		Возврат;
	КонецЕсли;	 
	
	
	ПарсерФич = "";
	//ПодключитьИнструментПарсерФич();
	//Возврат;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	
	
	МассивИменКонтекстовОбработок = Новый Массив;
	ЗаполнитьДеревоФич(СтруктураПараметров);
	
	
	
	
	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;
	
	
	//СкопироватьДеревоНаФорму(ДеревоФич);
	
	//РазврнутьДеревоДоСценариев(ДеревоТестов);
	
	//Элементы.нКаталогФич1.Заголовок = "Каталог фич: " + Объект.КаталогФич;
	
	СделатьСообщение("Фичи загружены.");
	//ПарсерФич.ВычислитьСнипетыДляШагов();
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ПолучитьВерсиюОбработки();
КонецФункции

&НаСервере
Процедура ЗадатьУсловноеОформление();
   //УО = УсловноеОформление.Элементы.Добавить();
   //УО.Оформление.УстановитьЗначениеПараметра("ЦветФона",WebЦвета.Красный);  
   //ЭУ = УО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   //ЭУ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДеревоТестов.Имя"); 
   //ЭУ.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
   //ЭУ.ПравоеЗначение  = "4";
   //ОП = УО.Поля.Элементы.Добавить();
   //ОП.Поле = Новый ПолеКомпоновкиДанных("Объект.ДеревоТестов.Имя"); 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВосстановитьНастройки();
	
	
	КаталогФич          = Объект.КаталогФич;
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	ОбновитьКнопкуЗагрузитьФичи();
	Если СокрЛП(КаталогФич) <> "" Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
	
	
	
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиСервер();
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(ПолучитьПутьКОбработкеСервер());
		КаталогИнструментов = Файл.Путь;
	КонецЕсли;	 
	
	ЗадатьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
 
	ЗагрузитьФичи();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЕстьПоддержкаНемодальныхФорм = УзнатьЕстьПоддержкаНемодальныхФорм();
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	
	СтатусыРезультатаТестирования = ОбъектНаСервере.СтатусыРезультатаТестирования;
КонецПроцедуры

&НаКлиенте
Процедура Перезагрузить(Команда)
	ЗагрузитьФичи();
КонецПроцедуры


&НаКлиенте
Процедура СделатьПараметрыКорректными()
	Если Прав(Объект.КаталогИнструментов,1) = "\" Тогда
		Объект.КаталогИнструментов = Лев(Объект.КаталогИнструментов,СтрДлина(Объект.КаталогИнструментов)-1);
	КонецЕсли; 
КонецПроцедуры


&НаСервере
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево)
	Для каждого СтрСтроки Из Дерево.Строки Цикл
		//СтрСтроки.РезультатПрохожденияТестовСценария = Неопределено;
		//СтрСтроки.ВремяНачала    = Неопределено;
		//СтрСтроки.ВремяОкончания = Неопределено;
		//СтрСтроки.ОписаниеОшибки = Неопределено;
		
		ОчиститьПоляВДеревеДляПостроенияОтчетов(СтрСтроки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоляВДеревеДляПостроенияОтчетовСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Дерево = ОбъектСервер.ДеревоТестов;
	ОчиститьПоляВДеревеДляПостроенияОтчетов(Дерево);
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры


&НаСервере
Функция ЭтоСценарий_SceanrioOutline(СтрокаДерева)
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Примеры = Истина Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения,ТекПример = Неопределено)
	//получим сами именнованные параметры
	
	ИменаПараметров = Неопределено;
	СтрокаПримеров  = Неопределено;
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		Если СтрСтроки.Примеры = Истина Тогда
			ИменаПараметров = СтрСтроки.ИменованныеПараметры;
			СтрокаПримеров = СтрСтроки;
		КонецЕсли; 
	КонецЦикла;
	
	Если ИменаПараметров = Неопределено Тогда
		СтрОшибки = "Не смог найти у сценария " + СтрокаДерева.Имя + " имена изменяемых параметров!";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли; 
	
	
	Ном = 0;
	Для каждого СтрСтрокаПримеров Из СтрокаПримеров.Строки Цикл
		Ном = Ном + 1;
		Если Ном = 1 Тогда
			//в первой строке лежат имена параметров
			Продолжить;
		КонецЕсли; 
		
		Если ТекПример <> Неопределено Тогда
			Если СтрСтрокаПримеров <> ТекПример Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		СтруктураПараметровСценария = Новый Структура;
		СтруктураПараметровСценария.Вставить("Имя",СтрокаДерева.Имя + " (Пример №" + (Ном-1) + ")");
		СтруктураПараметровСценария.Вставить("СтрокаДерева",СтрСтрокаПримеров.ИДСтроки);
		
		
		Шаги = Новый Массив;
		
		Если СтрокаДерева.Родитель.Строки[0].ЭтоКонтекст = Истина Тогда //значит надо добавить шаги контекста к нашим шагам
			Для каждого СтрСтроки Из СтрокаДерева.Родитель.Строки[0].Строки Цикл
				СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрСтрокаПримеров);
				Шаги.Добавить(СтруктураШага);
			КонецЦикла;
		КонецЕсли;	 
		
		
		Для каждого СтрСтроки Из СтрСтрокаПримеров.Строки Цикл
			//Если СтрСтроки.Примеры = Истина Тогда
			//	Продолжить;
			//КонецЕсли; 
			
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрСтроки.Родитель);
			Шаги.Добавить(СтруктураШага);
		КонецЦикла;
		
		СтруктураПараметровСценария.Вставить("Шаги",Шаги);
		
		
		
		
		МассивСценариевДляВыполнения.Добавить(СтруктураПараметровСценария);
	КонецЦикла;
	
	
	
	
	
	
	
	//Шаги = Новый Массив;
	//
	//Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
	//	СтруктураШага = Новый Структура;
	//	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	//	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	//	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	//	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	//	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	//	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	//	СтруктураШага.Вставить("СтрокаШага",СтрСтроки);
	//	
	//	Шаги.Добавить(СтруктураШага);
	//КонецЦикла;
	//
	//
	//
	//СтруктураПараметров.Вставить("Шаги",Шаги);
	
	//МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаСценария)
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("Имя",СтрСтроки.Имя);
	СтруктураШага.Вставить("ЗначенияПараметров",СтрСтроки.ЗначенияПараметров);
	СтруктураШага.Вставить("АдресСнипета",СтрСтроки.АдресСнипета);
	СтруктураШага.Вставить("СтрокаРеальнойПроцедуры",СтрСтроки.СтрокаРеальнойПроцедуры);
	СтруктураШага.Вставить("Снипет",СтрСтроки.Снипет);
	СтруктураШага.Вставить("ИмяСценария",СтрокаДерева.Имя);
	СтруктураШага.Вставить("СтрокаСценария",СтрокаСценария.ИДСтроки);
	СтруктураШага.Вставить("СтрокаШага",СтрСтроки.ИДСтроки);
	
	Возврат СтруктураШага;
КонецФункции

&НаСервере
Процедура ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения)
	Если СтрокаДерева.ЭтоКонтекст = Истина Тогда
		Возврат;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Имя",СтрокаДерева.Имя);
	СтруктураПараметров.Вставить("СтрокаДерева",СтрокаДерева.ИдСтроки);
	
	
	Шаги = Новый Массив;
	
	Если СтрокаДерева.Родитель.Строки[0].ЭтоКонтекст = Истина Тогда //значит надо добавить шаги контекста к нашим шагам
		Для каждого СтрСтроки Из СтрокаДерева.Родитель.Строки[0].Строки Цикл
			СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева);
			Шаги.Добавить(СтруктураШага);
		КонецЦикла;
	КонецЕсли;	 
	
	
	
	Для каждого СтрСтроки Из СтрокаДерева.Строки Цикл
		СтруктураШага = ПолучитьСтруктуруШага(СтрСтроки,СтрокаДерева,СтрокаДерева);
		Шаги.Добавить(СтруктураШага);
	КонецЦикла;
	
	
	
	СтруктураПараметров.Вставить("Шаги",Шаги);
	
	МассивСценариевДляВыполнения.Добавить(СтруктураПараметров);
	
КонецПроцедуры
 
 
&НаСервере
Процедура ДобавитьСценарийВМассивСценариевДляВыполнения(СтрокаДерева,МассивСценариевДляВыполнения)
	
	ЭтоСценариоАутлайн = ЭтоСценарий_SceanrioOutline(СтрокаДерева);
	Если ЭтоСценариоАутлайн Тогда
		//СделатьСообщение("Запуск СценариоАутлайн пока не реализован. " + СтрокаДерева.Имя);
		ДобавитьСценарийАутлайн(СтрокаДерева,МассивСценариевДляВыполнения);
		Возврат;
	КонецЕсли;	 
	
	//Сообщить(СтрокаДерева.Имя);
	
	ДобавитьОбычныйСценарий(СтрокаДерева,МассивСценариевДляВыполнения);
КонецПроцедуры


&НаСервере
Процедура ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения)
	Если ТипЗнч(ДеревоСтроки) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоСтроки.Сценарий = Истина Тогда
			ДобавитьСценарийВМассивСценариевДляВыполнения(ДеревоСтроки,МассивСценариевДляВыполнения);
		ИначеЕсли ДеревоСтроки.Пример = Истина Тогда
			ДобавитьСценарийАутлайн(ДеревоСтроки.Родитель.Родитель,МассивСценариевДляВыполнения,ДеревоСтроки)
		КонецЕсли; 
	Иначе	
		Для каждого СтрДеревоСтроки Из ДеревоСтроки Цикл
			Если СтрДеревоСтроки.Сценарий = Истина Тогда
				ДобавитьСценарийВМассивСценариевДляВыполнения(СтрДеревоСтроки,МассивСценариевДляВыполнения);
			Иначе	
				ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(СтрДеревоСтроки.Строки,МассивСценариевДляВыполнения);
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры


Процедура ПроставитьИДРекурсивно(ДеревоСтроки,ИД,МассивСтрокДереваДанныеФормы)
	Для каждого СтрокаДерева Из ДеревоСтроки Цикл
		СтрокаДерева.ИДСтроки = ИД;
		МассивСтрокДереваДанныеФормы.Добавить();//просто добавим пустой элемент
		ИД = ИД + 1;
		ПроставитьИДРекурсивно(СтрокаДерева.Строки,ИД,МассивСтрокДереваДанныеФормы);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИДСтрокиВДереве(Дерево,МассивСтрокДереваДанныеФормы)
	Ид = 0;
	ПроставитьИДРекурсивно(Дерево.Строки,ИД,МассивСтрокДереваДанныеФормы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения,МассивСтрокДереваДанныеФормы)
	ДеревоФорма = Объект.ДеревоТестов;
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ЗаполнитьИДСтрокиВДереве(ОбъектСервер.ДеревоТестов,МассивСтрокДереваДанныеФормы);
	
	ТекСценарий = Неопределено;
	Если ТекСценарий = Неопределено Тогда
		ТекСценарий = ОбъектСервер.ДеревоТестов.Строки;
	КонецЕсли; 
	
	ДобавитьСценарииРекурсивно_ВМассивСценариевДляВыполнения(ТекСценарий,МассивСценариевДляВыполнения);
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьСтатусСценария(ИД)
	//СтрокаСценария = МассивСценариевДляВыполнения[ИД].СтрокаДерева;
	//СценарийВыполнен = Истина;
	//Для каждого СтрШаг Из СтрокаСценария.Строки Цикл
	//	Если СтрШаг.Статус <> "Success" Тогда
	//		СценарийВыполнен = Ложь;
	//		Статус = СтрШаг.Статус;
	//		СтрокаСценария.ОписаниеОшибки = СтрШаг.ОписаниеОшибки;
	//		Прервать;
	//	КонецЕсли; 
	//КонецЦикла;
	//
	//Если СценарийВыполнен Тогда
	//	ЭлементыФормы.тпДеревоТестов.Свернуть(СтрокаСценария); 
	//	СтрокаСценария.Статус = "Success";
	//Иначе	
	//	СтрокаСценария.Статус = Статус;
	//КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ПолучениеКонтекстаОбработки(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	//ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	//Попытка
	//	Форма = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
	//Исключение
	//	Возврат;
	//КонецПопытки;
	//Если Форма = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;	 
	//
	//
	//СтрТаблицаКонтекстовОбработок           = ТаблицаКонтекстовОбработок.Добавить();
	//СтрТаблицаКонтекстовОбработок.ИмяФайла  = ВыбранноеИмяФайла;
	//СтрТаблицаКонтекстовОбработок.Обработка = ТаблицаКонтекстовОбработок.Количество()-1;
	//
	//МассивКонтекстовОбработок.Добавить(Форма);
	//МассивИменКонтекстовОбработок.Добавить(ВыбранноеИмяФайла);
КонецПроцедуры


&НаКлиенте
Функция ПреобразоватьКДатеСтроку(Знач Стр) 
	НачСтр = Стр;
	//Зн = Дата(Стр);
	Год   = 0;
	Месяц = 0;
	День  = 0;
	
	Поз  = Найти(Стр,".");
	День = Число(Лев(Стр,Поз-1));
	Стр = Сред(Стр,Поз+1);
	
	Поз   = Найти(Стр,".");
	Месяц = Число(Лев(Стр,Поз-1));
	Стр   = Сред(Стр,Поз+1);
	
	Год   = Число(Стр);
	Если Год < 100 Тогда
		Год = Год + 2000;
	КонецЕсли;
	
	Зн = Дата(Год,Месяц,День);
	
	Зн = Формат(Зн,"ДФ=yyyyMMdd");
	Зн = "'" + Зн + "'";
	
	//Сообщить("" + НачСтр + " было преобразовано к " + Зн);
	Возврат Зн;
КонецФункции



&НаКлиенте
Процедура ВызватьМетод(Обработка, Знач ИмяПроцедуры, МассивАргументов)
	Поз = Найти(ИмяПроцедуры,"(");
	Если Поз > 0 Тогда
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);
	КонецЕсли;	 
	
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	Для Ккк = 0 По МассивАргументов.Количество()-1 Цикл
		Элем = МассивАргументов[Ккк];
		Команда = Команда + Элем;
		Если Ккк < МассивАргументов.Количество()-1 Тогда
			Команда = Команда + ",";
		КонецЕсли;	 
	КонецЦикла;
	
	Команда = Команда + ")";
	
	Отладка("Выполняю: " + Команда);
	Выполнить(Команда);
КонецПроцедуры


&НаКлиенте
Функция СформироватьОписаниеОшибки(Знач Стр,ИмяФайла,ИмяПроцедуры) Экспорт
	Стр = СтрЗаменить(Стр,Символы.ПС,"");
	Стр = СтрЗаменить(Стр,Символы.ВК,"");
	
	//СтрПоиска = "Рефлектор.ВызватьМетод(СтрТабицаКонтекстовОбработок.Обработка, ИмяПроцедуры, МассивАргументов);";
	//Поз = Найти(Стр,СтрПоиска);
	//Если Поз > 0 Тогда
	//	ПромСтр = Сред(Стр,Поз + СтрДлина(СтрПоиска));
	//	Если ПромСтр <> "" Тогда
	//		Стр = ПромСтр;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Поз1 = Найти(Стр,"Метод объекта не обнаружен");
	//Если Поз1 > 0 Тогда
	//	Стр = Сред(Стр,Поз1);
	//	Поз2 = Найти(Стр,")");
	//	Стр = Лев(Стр,Поз2);
	//КонецЕсли;
	////Стр = СтрЗаменить(Стр,СтрПоиска,"");
	
	Стр = Стр + "; ИмяФайла="+ИмяФайла + ", ИмяПроцедуры="+ИмяПроцедуры;
	//Возврат ПерекодировкаДляОтправкиОшибки(Стр);
	Возврат Стр;
КонецФункции


&НаКлиенте
Функция  ПолучитьРезультатПрохожденияТестовСценария(ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено  Тогда
		Сообщить("Неизвестная ошибка в ПолучитьРезультатПрохожденияТестовСценария!");
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат МассивРезультатПрохожденияТестовСценария[ИД]; 
КонецФункции

&НаКлиенте
Процедура ВыполнинтьШагАссинхронноТаймер()
	Шаги = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Шаги;
	Если (Шаги.Количество()-1) < ТекИД_ШагаВМассиве Тогда
		//значит все шаги выполнены, запускаем следующий сценарий
		//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		СтрокаСценария = МассивСтрокДереваДанныеФормы[ИДСтрокиСценария];
		
		РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		Возврат;
	КонецЕсли;	 
	
	ТекШаг = Шаги[ТекИД_ШагаВМассиве];
	//ТекШаг.СтрокаШага.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = ТекШаг.СтрокаШага;
	
	ИДСтрокиШага                       = ТекШаг.СтрокаШага;
	ИДСтрокиСценария                   = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	РезультатПрохожденияТестовСценария = ПолучитьРезультатПрохожденияТестовСценария(ИДСтрокиСценария);
	РезультатПрохожденияТестовШагов    = РезультатПрохожденияТестовСценария.РезультатПрохожденияТестовШагов;
	
	//ПолучитьЭлементы()
	
	
	//СтрокаШага = Объект.ДеревоТестов.НайтиПоИдентификатору(ИДСтрокиШага);
	СтрокаШага     = МассивСтрокДереваДанныеФормы[ИДСтрокиШага];
	СтрокаСценария = МассивСтрокДереваДанныеФормы[ИДСтрокиСценария];
	
	Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаШага.ПолучитьИдентификатор();
	
	РезультатПрохожденияШага = Новый Структура;
	РезультатПрохожденияШага.Вставить("Имя",СтрокаШага.Имя);
	РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	
	АдресСнипета = ТекШаг.АдресСнипета;
	Если СокрЛП(АдресСнипета) = "" Тогда
		//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		
		//СтрокаШага.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		СтрокаШага.Статус = "Pending";
		СтрокаШага.ТипКартинки = 6;
		ОписаниеОшибки = "Не реализован. Пустой адрес снипета у шага: " + ТекШаг.Имя;
		//СтрокаШага.ОписаниеОшибки = ОписаниеОшибки;
		
		//СтрокаСценария.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//СтрокаСценария.ОписаниеОшибки = ОписаниеОшибки;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",ОписаниеОшибки);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		СделатьСообщение(ОписаниеОшибки);
		
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
		
		Возврат;
	КонецЕсли;	 
	
	
	//ТаблицаКонтекстовОбработок
	ИД = МассивИменКонтекстовОбработок.Найти(АдресСнипета);
	//Если ИД = Неопределено Тогда
	//	МассивИменКонтекстовОбработок.Добавить(АдресСнипета);
	//	////ОбработкаТеста = ВнешниеОбработки.Создать(АдресСнипета);
	//	//
	//	//ДополнительныеПараметры = Новый Структура;
	//	//Если ЕстьПоддержкаНемодальныхФорм Тогда
	//	//	Оповещение = Вычислить("Новый ОписаниеОповещения(""ПолучениеКонтекстаОбработки"", ЭтаФорма, ДополнительныеПараметры)");
	//	//	Выполнить("НачатьПомещениеФайла(Оповещение,, АдресСнипета, Ложь, УникальныйИдентификатор);");
	//	//Иначе
	//	//	АдресХранилища = "";
	//	//	ПоместитьФайл(АдресХранилища, АдресСнипета, , Ложь, УникальныйИдентификатор);
	//	//	//ПодключитьВнешнююОбработку(АдресХранилища);
	//	//	Результат = Неопределено;
	//	//	ПолучениеКонтекстаОбработки(Результат,АдресХранилища,АдресСнипета,ДополнительныеПараметры);
	//	//КонецЕсли;
	//	//
	//	////МассивКонтекстовОбработок.Добавить(ОбработкаТеста);
	//	ИД = МассивИменКонтекстовОбработок.Количество()-1;
	//КонецЕсли;	 
	ОбработкаТеста = ТаблицаКонтекстовОбработок[ИД].Обработка;
	
	ИмяПроцедуры     = ТекШаг.СтрокаРеальнойПроцедуры;
	СписокАргументов = ТекШаг.ЗначенияПараметров;
	
	
	МассивПараметров = Новый Массив;
	Для Каждого ЭлементМассива Из СписокАргументов Цикл
		Элем = ЭлементМассива.Значение;
		Если Элем.Тип = "Строка" Тогда
			МассивПараметров.Добавить("""" + Элем.Значение + """");
		ИначеЕсли Элем.Тип = "Число" Тогда
			МассивПараметров.Добавить(Элем.Значение);
		ИначеЕсли Элем.Тип = "Дата" Тогда
			МассивПараметров.Добавить(ПреобразоватьКДатеСтроку(Элем.Значение));
		КонецЕсли;	 
	КонецЦикла;
	
	
	СтрОшибка       = Неопределено;
	ШагВыполнен     = Ложь;
	ШагНеРеализован = Ложь;
	Попытка
		ОбработкаТеста.Контекст = ОбъектКонтекст;
		ВызватьМетод(ОбработкаТеста, ИмяПроцедуры, МассивПараметров);
		ОбъектКонтекст = ОбработкаТеста.Контекст;
		
		ШагВыполнен = Истина;
	Исключение
		Отладка("ОписаниеОшибки()="+ОписаниеОшибки());
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		Если Найти(ОписаниеОшибкиСтр,"}: Не реализовано.") > 0 Тогда //тогда это Pending
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не реализован.");
			СтрОшибка = "Не реализовано.";
			ШагНеРеализован = Истина;
		Иначе
			//значит возникла ошибка
			СделатьСообщение("Шаг (" + ТекШаг.Имя + ") не выполнен.");
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибки(),АдресСнипета,ИмяПроцедуры);
			СделатьСообщение(СтрОшибка);
		КонецЕсли;
	КонецПопытки;
	
	
	//СтрокаШага = ТекШаг.СтрокаШага;	
	//СтрокаШага.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	
	Если ШагВыполнен Тогда
		СтрокаШага.Статус = "Success";
		СтрокаШага.ТипКартинки = 4;
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		ТекИД_ШагаВМассиве       = ТекИД_ШагаВМассиве + 1;
		ПодключитьОбработчикОжидания("ВыполнинтьШагАссинхронноТаймер",0.1,Истина);
	Иначе	
		Если ШагНеРеализован Тогда
			СтрокаШага.Статус = "Pending";
			СтрокаШага.ТипКартинки = 6;
		Иначе
			СтрокаШага.Статус = "Failed";
			СтрокаШага.ТипКартинки = 5;
		КонецЕсли; 
		//СтрокаШага.ОписаниеОшибки = СтрОшибка;
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки",СтрОшибка);
		РезультатПрохожденияШага.Вставить("Статус",СтрокаШага.Статус);
		
		//СтрокаСценария                = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
		//СтрокаСценария.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		//СтрокаСценария.ОписаниеОшибки = СтрОшибка;
		РезультатПрохожденияТестовСценария.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияТестовСценария.Вставить("ОписаниеОшибки",СтрОшибка);
		
		СтрокаСценария.Статус         = СтрокаШага.Статус;
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
		
		ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД_ШагаВМассиве,РезультатПрохожденияТестовШагов);
		
		
		
		ТекИД_СценарияВМассиве = ТекИД_СценарияВМассиве + 1;
		//выполняем следующий сценарий
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШагиВРезультатПрохожденияТестовШаговКоторыеНеВыполнялись(Шаги,ТекИД,РезультатПрохожденияТестовШагов)
	Ид = ТекИД;
	Пока Истина Цикл
		Ид = Ид+1;
		Если Шаги.Количество() < (Ид+1) Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекШаг = Шаги[Ид];
		
		РезультатПрохожденияШага = Новый Структура;
		РезультатПрохожденияШага.Вставить("Имя",ТекШаг.Имя);
		РезультатПрохожденияШага.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ВремяОкончания",ТекущаяУниверсальнаяДатаВМиллисекундах());
		РезультатПрохожденияШага.Вставить("ОписаниеОшибки","Пропущен");
		РезультатПрохожденияШага.Вставить("Статус","Skipped");
		
		РезультатПрохожденияТестовШагов.Добавить(РезультатПрохожденияШага);
		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнинтьСценарийАссинхронноТаймер()
	
	Если ТекИД_СценарияВМассиве > 0 Тогда
		ОбработатьСтатусСценария(ТекИД_СценарияВМассиве-1);
	КонецЕсли; 
	
	Если (МассивСценариевДляВыполнения.Количество()-1) < ТекИД_СценарияВМассиве Тогда
		Сообщить(" ");
		СделатьСообщение("Все сценарии обработаны!");
		
		
		//Если ДелатьОтчетВФорматеАллюр Тогда
		//	СформироватьОтчетАллюр();
		//КонецЕсли; 
		
		Возврат;
	КонецЕсли;	 
	
	Сообщить(" ");
	СделатьСообщение("Работаю по сценарию: " + МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].Имя);
	
	//МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева.ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИДСтроки = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	
	РезультатПрохожденияТестовСценария = Новый Структура;
	РезультатПрохожденияТестовСценария.Вставить("ИДСтроки",ИДСтроки);
	РезультатПрохожденияТестовСценария.Вставить("ВремяНачала",ТекущаяУниверсальнаяДатаВМиллисекундах());
	РезультатПрохожденияТестовШагов = Новый Массив;
	РезультатПрохожденияТестовСценария.Вставить("РезультатПрохожденияТестовШагов",РезультатПрохожденияТестовШагов);
	
	
	ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария,ИДСтроки);
	
	ИДСтрокиСценария = МассивСценариевДляВыполнения[ТекИД_СценарияВМассиве].СтрокаДерева;
	СтрокаСценария = МассивСтрокДереваДанныеФормы[ИДСтрокиСценария];
	Элементы.ДеревоТестов.ТекущаяСтрока = СтрокаСценария.ПолучитьИдентификатор();
	//ЭлементыФормы.тпДеревоТестов.ТекущаяСтрока = СтрокаДерева;
	
	ТекИД_ШагаВМассиве = 0;
	ПодключитьОбработчикОжидания("ВыполнинтьШагАссинхронноТаймер",0.1,Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРезультатПрохожденияТестовСценарияВМассив(РезультатПрохожденияТестовСценария,ИДСтроки)
	ИД = МассивИДСтрокиДерева.Найти(ИДСтроки);
	Если ИД = Неопределено Тогда
		МассивИДСтрокиДерева.Добавить(ИДСтроки);
		МассивРезультатПрохожденияТестовСценария.Добавить(РезультатПрохожденияТестовСценария);
	Иначе
		МассивРезультатПрохожденияТестовСценария[ИД] = РезультатПрохожденияТестовСценария;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы)
	Для каждого ЭлементДерева Из ДеревоФормы Цикл
		ИДСтроки = ЭлементДерева.ИДСтроки;
		МассивСтрокДереваДанныеФормы[ИДСтроки] = ЭлементДерева;
		
		ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьСтрокиДереваДанныеФормы()
	ДеревоФормы = Объект.ДеревоТестов.ПолучитьЭлементы();
	
	ЗапомнитьСтрокиДереваДанныеФормыРекурсивно(ДеревоФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарии(ТекСценарий = Неопределено)
	
	ОчиститьПоляВДеревеДляПостроенияОтчетовСервер();
	
	//МассивКонтекстовОбработок     = Новый Массив;
	//МассивИменКонтекстовОбработок = Новый Массив;
	ОбъектКонтекст                = Новый Структура;
	
	МассивИДСтрокиДерева                     = Новый Массив;
	МассивРезультатПрохожденияТестовСценария = Новый Массив;
	
	
	
	
	МассивСценариевДляВыполнения = Новый Массив;
	МассивСтрокДереваДанныеФормы = Новый Массив;
	ЗаполнитьМассивСценариевДляВыполненияСервер(МассивСценариевДляВыполнения,МассивСтрокДереваДанныеФормы);
	
	
	ЗапомнитьСтрокиДереваДанныеФормы();
	
	
	
	
	
	Если ВыполнятьСценарииАсинхронно Тогда
		ТекИД_СценарияВМассиве = 0;
		ПодключитьОбработчикОжидания("ВыполнинтьСценарийАссинхронноТаймер",0.1,Истина);
	КонецЕсли;	 
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСценарииФорма(Команда)
	СделатьПараметрыКорректными();
	
	
	ОчиститьСообщения();
	
	ВыполнитьСценарии();
КонецПроцедуры








//портирован блок ассертов из проекта xUnitFor1C (https://github.com/xDrivenDevelopment/xUnitFor1C)
//был взят релиз 3.0.0.3
//{ МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 

&НаКлиенте
Функция ФорматДСО(ДопСообщениеОшибки)
	Если ДопСообщениеОшибки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Символы.ПС + ДопСообщениеОшибки;
КонецФункции

&НаКлиенте
Процедура ВызватьОшибкуПроверки(СообщениеОшибки)
	
	Префикс = "[" + СтатусыРезультатаТестирования.ОшибкаПроверки + "]";
	ВызватьИсключение Префикс + " " + СообщениеОшибки;
	
КонецПроцедуры


&НаКлиенте
Процедура Проверить(_Истина, ДопСообщениеОшибки = "") Экспорт
	Если Не _Истина Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Истина, "БЛ=ложь; БИ=истина")+") не является Истиной, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИстину(_Истина, ДопСообщениеОшибки = "") Экспорт
	Проверить(_Истина, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЛожь(_Ложь, ДопСообщениеОшибки = "") Экспорт
	Если _Ложь Тогда
		СообщениеОшибки = "Переданный параметр ("+Формат(_Ложь, "БЛ=ложь; БИ=истина")+") не является Ложью, а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Период.ДатаНачала или _Дата > _Период.ДатаОкончания Тогда
		представление = ПредставлениеПериода(_Период.ДатаНачала, _Период.ДатаОкончания, "ФП = Истина");
		СообщениеОшибки = "Переданный параметр ("+Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")+") не входит в период "+представление+", а хотели, чтобы являлся." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = "") Экспорт
	Если _Дата < _Дата2-2 или _Дата > _Дата2+2 Тогда
		СообщениеОшибки = "Переданная дата ("+Формат(_Дата, "ДФ='dd.MM.yyyy HH:mm:ss'")+") не равна дате ("+Формат(_Дата2, "ДФ='dd.MM.yyyy HH:mm:ss'")+") с точностью до 2-х секунд, а хотели, чтобы они равнялись." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 <> _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") не равны, а хотели, чтобы были равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = "") Экспорт
	Если _1 = _2 Тогда
		СообщениеОшибки = "Сравниваемые значения ("+_1+"; "+_2+") равны, а хотели, чтобы были не равны." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше <= _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше или равен второму ("+_Меньше+") а хотели, чтобы был больше." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = "") Экспорт
	Если _Больше < _Меньше Тогда
		СообщениеОшибки = "Первый параметр ("+_Больше+") меньше второго ("+_Меньше+") а хотели, чтобы был больше или равен." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 >= проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <"+проверяемоеЗначение1+"> больше или равно, чем <"+проверяемоеЗначение2+">, а ожидалось меньше"+
				ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = "") Экспорт
	Если проверяемоеЗначение1 > проверяемоеЗначение2 Тогда
		СообщениеОшибки = "Значение <"+проверяемоеЗначение1+"> больше, чем <"+проверяемоеЗначение2+">, а ожидалось меньше или равно"+
				ФорматДСО(СообщениеОбОшибке);
		ВызватьОшибкуПроверки(СообщениеОшибки)
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодВыполнился(Объект, Знач ИмяМетода, ПараметрыИлиДопСообщениеОшибки = Неопределено, Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры;
	
	Если ТипЗнч(ПараметрыИлиДопСообщениеОшибки) = Тип("Строка") Тогда
		ДопСообщениеОшибки = ПараметрыИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиДопСообщениеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ("Ожидали, что вторым параметром будет передан массив параметров для метода <"+ИмяМетода+">, а получили другой объект с типом <"+ТипПараметра+">");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОшибки = "Хотели, чтобы код """+СтрокаВыполнения+""" выполнился, а он упал с ошибкой """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыСтрокой(Параметры, ИмяПеременной = "Параметры")
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено Тогда
		Если ТипЗнч(Параметры) = Тип("Массив") Тогда
			Для Индекс = 0 По Параметры.ВГраница() Цикл 
				ПараметрыСтрока = ПараметрыСтрока + ", " + ИмяПеременной + "[" + Формат(Индекс, "ЧН=0; ЧГ=0") + "]";
			КонецЦикла;
			ПараметрыСтрока = Сред(ПараметрыСтрока, 3);
		Иначе
			ПараметрыСтрока = ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНеВыполнилось(Знач СтрокаАлгоритм, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	Попытка
		Выполнить(СтрокаАлгоритм);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки("Хотели, чтобы алгоритм """+СтрокаАлгоритм+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьМетодНеВыполнился(Объект, ИмяМетода, ПараметрыИлиОжидаемоеОписаниеОшибки, Знач ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки = "", Знач ДопСообщениеОшибки = "") Экспорт
	Перем Параметры, ОжидаемоеОписаниеОшибки; 
	
	Если ТипЗнч(ПараметрыИлиОжидаемоеОписаниеОшибки) = Тип("Строка") Тогда
		ОжидаемоеОписаниеОшибки = ПараметрыИлиОжидаемоеОписаниеОшибки;
		ДопСообщениеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	Иначе
		Параметры = ПараметрыИлиОжидаемоеОписаниеОшибки;
		Если Параметры <> Неопределено Тогда
			ТипПараметра = ТипЗнч(Параметры);
			Если ТипПараметра <> Тип("Массив") Тогда
				ВызватьИсключение ("Ожидали, что третьим параметром будет передан массив параметров для метода <"+ИмяМетода+">, а получили другой объект с типом <"+ТипПараметра+">");
			КонецЕсли;
		КонецЕсли;
		ОжидаемоеОписаниеОшибки = ОжидаемоеОписаниеОшибкиИлиДопСообщениеОшибки;
	КонецЕсли;
	
	ПараметрыСтрока = ПараметрыСтрокой(Параметры);
	
	СтрокаВыполнения = "Объект." + ИмяМетода + "(" + ПараметрыСтрока + ")";
	
	Попытка
		Выполнить(СтрокаВыполнения);
	Исключение
		ПолученноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если Найти(ПолученноеОписаниеОшибки, ОжидаемоеОписаниеОшибки) = 0 Тогда
			ВызватьОшибкуПроверки("Хотели, чтобы код """+СтрокаВыполнения+""" упал с сообщением об ошибке """+ОжидаемоеОписаниеОшибки+""", а он упал с сообщением """+ПолученноеОписаниеОшибки+"""." + ФорматДСО(ДопСообщениеОшибки));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	ВызватьОшибкуПроверки("Хотели, чтобы код """+СтрокаВыполнения+""" упал, а он выполнился" + ФорматДСО(ДопСообщениеОшибки));
	
КонецПроцедуры

// проверка идет через ЗначениеЗаполнено, но мутабельные значение всегда считаем заполненными
&НаКлиенте
Процедура ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ фЗаполнено Тогда
		ВызватьОшибкуПроверки("Значение ("+ПроверяемоеЗначение+") не заполнено, а ожидалась заполненность" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = "") Экспорт
	СообщениеОшибки = "Значение ("+ПроверяемоеЗначение+") заполнено, а ожидалась незаполненность" + ФорматДСО(ДопСообщениеОшибки);
	Попытка
		фЗаполнено = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецПопытки;
	Если фЗаполнено Тогда
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТип(значение, ТипИлиИмяТипа, ДопСообщениеОшибки = "") Экспорт
	Если ТипЗнч(ТипИлиИмяТипа) = Тип("Строка") Тогда
		искомыйТип = Тип(ТипИлиИмяТипа);
	ИначеЕсли ТипЗнч(ТипИлиИмяТипа) = Тип("Тип") Тогда
		искомыйТип = ТипИлиИмяТипа;
	Иначе
		ВызватьИсключение ("ПроверитьТип: Тип значения параметра ТипИлиИмяТипа должен быть <Тип> или <Строка>, а получили <"+ ТипЗнч(ТипИлиИмяТипа) + ">" + ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
	Если ТипЗнч(значение) <> искомыйТип Тогда
		ВызватьОшибкуПроверки("Типом значения <"+значение+"> является <"+ТипЗнч(значение)+">, а ожидался тип <"+ТипИлиИмяТипа+">."+ФорматДСО(ДопСообщениеОшибки));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВхождение(строка, подстрокаПоиска, ДопСообщениеОшибки = "") Экспорт
	Если Найти(строка, подстрокаПоиска) = 0 Тогда
		ПредставлениеСтроки = "<"+строка+">";
		Если СтрДлина(строка) > 20 Тогда
			ПредставлениеСтроки = ПредставлениеСтроки + Символы.ПС;
		КонецЕсли;
		ПредставлениеПодСтроки = "<"+подстрокаПоиска+">";
		Если СтрДлина(подстрокаПоиска) > 20 Тогда
			ПредставлениеПодСтроки = ПредставлениеПодСтроки + Символы.ПС;
		КонецЕсли;
		СообщениеОшибки = "Искали в "+ПредставлениеСтроки+" подстроку "+ПредставлениеПодСтроки+", но не нашли." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

//Коллекция - Массив, Структура, Соответствие, ФиксированныйМассив, ФиксированнаяСтруктура, ФиксированноеСоответствие, СписокЗначений
&НаКлиенте
Процедура ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = "") Экспорт
	Нашли = Неопределено;
	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции = Тип("Массив") или ТипКоллекции = Тип("ФиксированныйМассив") Тогда
		Нашли = Коллекция.Найти(Элемент) <> Неопределено;
	ИначеЕсли ТипКоллекции = Тип("Структура") или ТипКоллекции = Тип("Соответствие") 
			или ТипКоллекции = Тип("ФиксированнаяСтруктура") или ТипКоллекции = Тип("ФиксированноеСоответствие") Тогда
		Для каждого КлючЗначение Из Коллекция Цикл
			Нашли = КлючЗначение.Значение = Элемент;
			Если Нашли Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипКоллекции = Тип("СписокЗначений") Тогда
		Нашли = Коллекция.НайтиПоЗначению(Элемент) <> Неопределено;
	КонецЕсли;
	Если Нашли = Неопределено Тогда
		СообщениеОшибки = "Утверждение ""ПроверитьВхождениеВКоллекцию"" не умеет работать с типом коллекции <"+ТипКоллекции+">." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;
	Если Не Нашли Тогда
		СообщениеОшибки = "Не нашли элемент <"+Элемент+"> в коллекции, а хотели, чтобы он был в коллекции." + ФорматДСО(ДопСообщениеОшибки);
		ВызватьОшибкуПроверки(СообщениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = "") Экспорт
	ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

// Только для внутреннего использования
&НаСервере
Процедура ПроверитьВалидностьЗапросаСКДНаСервере(ТекстЗапроса, ДопСообщениеОшибки = "")
	Объект().ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "") Экспорт
	ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры

&НаСервере
Процедура ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениямСервер(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь, Знач ДопСообщениеОшибки = "") Экспорт
	Объект().ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабДок1, ТабДок2, УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки, ДопСообщениеОшибки);
КонецПроцедуры


&НаСервере
Функция Объект() Экспорт
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектНаСервере;
КонецФункции

&НаКлиенте
Процедура СоздатьШаблоныОбработок(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры
//} МЕТОДЫ ДЛЯ ПРОВЕРКИ ЗНАЧЕНИЙ (assertions). 





ВыполнятьСценарииАсинхронно = Истина;

