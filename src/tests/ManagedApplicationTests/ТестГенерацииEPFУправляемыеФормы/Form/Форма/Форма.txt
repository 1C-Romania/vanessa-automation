&НаКлиенте
Перем юТест;
&НаКлиенте
Перем ИдетОтладка;

&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
			
	ВсеТесты.Добавить("Тест_должен_открыть_обработку_vanessa_behavior_и_сгенерировать_epf_по_тестовой_фиче");
	                                                              	
	Возврат ВсеТесты;
	
КонецФункции

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
			
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПутьКОбработке_vanessa_behavior_изПараметровЗапуска(ПутьК_vanessa_behavior,КаталогИнструментов,КаталогФич)
	ПутьК_vanessa_behavior = Неопределено;
КонецПроцедуры


&НаСервере
Функция ПодключитьВнешнююОбработку(АдресХранилища)
   Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь);    
КонецФункции


&НаКлиенте
Процедура ПроверитьЧтоВФичуПроставилсяТег(ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Путь = Файл.Путь;
	Если Прав(Путь,1) = "\" Тогда
		Путь = Лев(Путь,СтрДлина(Путь)-1);
	КонецЕсли;	 
	ОжидаемоеИмяФичи = "@[ИмяФичи]=" + Файл.ИмяБезРасширения + ";" + Путь;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	
	
	Нашли = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НРег(Стр) = НРег(ОжидаемоеИмяФичи) Тогда
			Нашли = Истина;
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;
	Текст.Закрыть();
	
	юТест.ПроверитьРавенство(Нашли,Истина,"В фиче нашли нужный тег: " + ОжидаемоеИмяФичи);
	
КонецПроцедуры


&НаКлиенте
Процедура Тест_должен_открыть_обработку_vanessa_behavior_и_сгенерировать_epf_по_тестовой_фиче() Экспорт
	ПутьК_vanessa_behavior = "";
	КаталогИнструментов    = "";
	КаталогФич             = "";
	ПолучитьПутьКОбработке_vanessa_behavior_изПараметровЗапуска(ПутьК_vanessa_behavior,КаталогИнструментов,КаталогФич);
	
	Если ПутьК_vanessa_behavior = Неопределено Тогда
		Если Не ИдетОтладка Тогда
			Сообщить("Не передан путь к vanessa_behavior.epf!");
			ВызватьИсключение "Не передан путь к vanessa_behavior.epf!";
		КонецЕсли;	  
		
		ПутьК_vanessa_behavior = "E:\commons\Rep\vanessa-bdd\vanessa-behavior.epf";
		КаталогИнструментов    = "E:\commons\Rep\vanessa-bdd";
		КаталогФич             = "E:\Temp\feature";
	КонецЕсли;	 
	
	
	
   Файл = Новый Файл(КаталогФич);
   Если НЕ Файл.ЭтоКаталог() Тогда
	   ВызватьИсключение "Для каталога фич должен быть передан каталог, а не файл!";
   КонецЕсли;	 
   
   Если Прав(КаталогФич,1) = "\" Тогда
	   КаталогФич = Лев(КаталогФич,СтрДлина(КаталогФич)-1);
   КонецЕсли;	 
   
   ПереданныйКаталог = КаталогФич;
   ТекущаяФича  = КаталогФич + "\Test.feature";
	
	
	
	
	
	
   Сообщить("Работаю с фичей: " + ТекущаяФича);
   
   ПутьКСгенерированномуEPF = ПереданныйКаталог + "\step_definitions\Test.epf";
   УдалитьФайлы(ПутьКСгенерированномуEPF);
   УдалитьФайлы(ТекущаяФича);
   
   
   Стр = "# encoding: utf-8
   |# language: ru
   |
   |
   |@[ИмяФичи]=SimpleGenerateTest;\features\SelfTests
   |
   |
   |
   |
   |Функционал: Проверка генерации простого epf файла.
   |
   |Как Пользователь
   |Я Хочу: чтобы чтобы при нажатии на кнопку Выполнить в толстой форме происходила геренация epf файла
   |
   |Сценарий: Генерация EPF в режиме толстых форм
   | Когда Запущена сервисная база в режиме толстых форм
   | И создана процедура куда передано число 1
   | И создана процедура куда передана строка 'тест'
   | И создана процедура куда передана дата 08.04.1981
   | И не будет обнаружено число в конце слова3
   | И не будет обнаружено число в конце слова с тире-3
   | Тогда будет создан файл 'SimpleGenerateTest.epf'
   | 
   |";
   
   Текст = Новый ЗаписьТекста(ТекущаяФича, КодировкаТекста.UTF8);
   Текст.ЗаписатьСтроку(Стр);
   Текст.Закрыть(); 
	
	

       
   АдресХранилища = "";
   Результат = ПоместитьФайл(АдресХранилища, ПутьК_vanessa_behavior, ,Ложь);
   ИмяОбработки = ПодключитьВнешнююОбработку(АдресХранилища);
   
   
   
   
   
   
   ДопПараметры = Новый Структура;
   ДопПараметры.Вставить("GenerateEpf",Истина);
   ДопПараметры.Вставить("КаталогИнструментов",КаталогИнструментов);
   ДопПараметры.Вставить("КаталогФич",ТекущаяФича);
   ДопПараметры.Вставить("ГенерироватьУФ",Истина);
   ДопПараметры.Вставить("ВыполнитьОбработкуПриОткрытии",Истина);
   ДопПараметры.Вставить("ЗакрытьФормуПослеВыполненияОбработки",Истина);
   
   ОткрытьФормуМодально("ВнешняяОбработка." + ИмяОбработки + ".Форма.УправляемаяФорма",ДопПараметры);
   
   
   
   ПроверитьЧтоВФичуПроставилсяТег(ТекущаяФича);
   
   
    
   Сообщить("Путь=" + ПутьКСгенерированномуEPF);
   
   Файл = Новый Файл(ПутьКСгенерированномуEPF);
   
   юТест.ПроверитьРавенство(Файл.Существует(),Истина,"Существует сгенерированный файл");
   
   
   
   
   
   АдресХранилища = "";
   Результат = ПоместитьФайл(АдресХранилища, ПутьКСгенерированномуEPF, ,Ложь);
   ОбработкаСТестом = ПодключитьВнешнююОбработку(АдресХранилища);
   
   //ОбработкаСТестом = ВнешниеОбработки.Создать(ПутьКСгенерированномуEPF); 
   
   ДопПараметры = Новый Структура;
   ФормаСгенерированнойОбработки = ПолучитьФорму("ВнешняяОбработка." + ОбработкаСТестом + ".Форма.Форма",ДопПараметры);
   
   //++проверим, что были созданы предопределенные процедуры
   ФормаСгенерированнойОбработки.ПередНачаломСценария();
   ФормаСгенерированнойОбработки.ПередОкончаниемСценария();
   //--проверим, что были созданы предопределенные процедуры
   
   
   Попытка
	   ФормаСгенерированнойОбработки.ЗапущенаСервиснаяБазаВРежимеТолстыхФорм();
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура ЗапущенаСервиснаяБазаВРежимеТолстыхФорм");
   КонецПопытки;
   
   Попытка
	   ФормаСгенерированнойОбработки.СозданаПроцедураКудаПереданоЧисло(1);
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура СозданаПроцедураКудаПереданоЧисло");
   КонецПопытки;
   
   Попытка
	   ФормаСгенерированнойОбработки.СозданаПроцедураКудаПереданаСтрока("тест");
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура СозданаПроцедураКудаПереданаСтрока");
   КонецПопытки;
   
   Попытка
	   ФормаСгенерированнойОбработки.СозданаПроцедураКудаПереданаДата('19810408');
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура СозданаПроцедураКудаПереданаДата");
   КонецПопытки;
   
   Попытка
	   ФормаСгенерированнойОбработки.НеБудетОбнаруженоЧислоВКонцеСлова3();
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура НеБудетОбнаруженоЧислоВКонцеСлова3");
   КонецПопытки;
   
   Попытка
	   ФормаСгенерированнойОбработки.НеБудетОбнаруженоЧислоВКонцеСловаСТире_3();
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура НеБудетОбнаруженоЧислоВКонцеСловаСТире_3");
   КонецПопытки;
   
   Попытка
	   ФормаСгенерированнойОбработки.БудетСозданФайл("тест");
   Исключение
	   //Сообщить("" + ОписаниеОшибки());
	   Стр = ОписаниеОшибки();
	   юТест.ПроверитьнеРавенство(Найти(Стр,"Не реализовано"),0,"Была правильно создана процедура БудетСозданФайл");
   КонецПопытки;
   
   
КонецПроцедуры

ИдетОтладка = Ложь;
ИдетОтладка = Истина;

Если ИдетОтладка Тогда
   Сообщить("ИдетОтладка");
КонецЕсли;	









