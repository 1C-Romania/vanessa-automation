&НаКлиенте
Перем ТаблицаКонтекстовОбработок;


&НаКлиенте
Процедура СделатьСообщение(Знач Сообщение, ТипСообщения = "Информация") Экспорт
	
	ТипСообщения = ?(ТипСообщения = "Информация", СтатусСообщения.Обычное, СтатусСообщения.ОченьВажное);
	
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение, ТипСообщения);
КонецПроцедуры
 
&НаКлиенте
Процедура Отладка(Знач Сообщение) Экспорт
	Если Объект.DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры


&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


&НаСервере
Функция УзнатьЕстьПоддержкаНемодальныхФорм()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Массив1 = РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения,".");
	Массив2 = РазложитьСтрокуВМассивПодстрок("8.3.3.641",".");
	
	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);
		
		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Версия1БольшеИлиРавно;
КонецФункции


&НаКлиенте
Процедура ОбновитьКнопкуЗагрузитьФичи()
	Если Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога" Тогда
		Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить фичи из каталога";
	ИначеЕсли Объект.текЗначениеОперации = "ЗагрузитьОднуФичу" Тогда
		Элементы.ПодменюЗагрузитьФичи.Заголовок = "Загрузить одну фичу";
	ИначеЕсли Объект.текЗначениеОперации = "" Тогда
	Иначе	
		Стр = "Ошибка! Неизвестное значение параметра текЗначениеОперации = " + Объект.текЗначениеОперации;
		Сообщить(Стр);	
		ВызватьИсключение Стр;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьФичиИзКаталога()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогФич = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;
 
	ЗагрузитьФичи();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФичиИзКаталога(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьФичиИзКаталога();
	
	
	
	//Элементы.ПодменюЗагрузитьФичи.Заголовок = "ывпаыв";
	
	//текЗначениеОперации = "ЗагрузитьФичиИзКаталога";
	//ОбновитьКнопкуЗагрузитьФичи();
	//ЗагрузитьТестыЗагрузитьФичиИзКаталога();
КонецПроцедуры


&НаСервере
Функция ПолучитьПутьКОбработкеСервер()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ИспользуемоеИмяФайла;
КонецФункции


&НаСервере
Процедура ВосстановитьНастройки()
	Настройки = ХранилищеОбщихНастроек.Загрузить("VanessaBehavior");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		Настройки.Свойство("DebugLog", Объект.DebugLog);
		//Настройки.Свойство("GenerateEpf", GenerateEpf);
		//Настройки.Свойство("TestRun", TestRun);
		Настройки.Свойство("ГенерироватьУФ", Объект.ГенерироватьУФ);
		Настройки.Свойство("КаталогИнструментов", Объект.КаталогИнструментов);
		Настройки.Свойство("КаталогФич", Объект.КаталогФич);
		Настройки.Свойство("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
		Настройки.Свойство("КаталогOutput", Объект.КаталогOutput);
		Настройки.Свойство("текЗначениеОперации", Объект.текЗначениеОперации);
	КонецЕсли;
	
	//Элементы.DebugLog.Пометка = Объект.DebugLog;
	//Элементы.GenerateEpf.Пометка = Объект.GenerateEpf;
	//Элементы.TestRun.Пометка = Объект.TestRun;
КонецПроцедуры
 
&НаСервере
Процедура СохранитьНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("DebugLog", Объект.DebugLog);
	//Настройки.Вставить("GenerateEpf", Объект.GenerateEpf);
	//Настройки.Вставить("TestRun", Объект.TestRun);
	Настройки.Вставить("ГенерироватьУФ", Объект.ГенерироватьУФ);
	Настройки.Вставить("КаталогИнструментов", Объект.КаталогИнструментов);
	Настройки.Вставить("КаталогФич", Объект.КаталогФич);
	Настройки.Вставить("ДелатьОтчетВФорматеАллюр", Объект.ДелатьОтчетВФорматеАллюр);
	Настройки.Вставить("КаталогOutput", Объект.КаталогOutput);
	Настройки.Вставить("текЗначениеОперации", Объект.текЗначениеОперации);
	ХранилищеОбщихНастроек.Сохранить("VanessaBehavior",, Настройки);
КонецПроцедуры



&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
    Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

&НаКлиенте
Функция ПодключитьВнешнююОбработкуКлиент(ИмяФайла)
	ДополнительныеПараметры = Новый Структура;
	Если ЕстьПоддержкаНемодальныхФорм Тогда
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбработкаПолученияФайлаОбработкиТеста"", ЭтаФорма, ДополнительныеПараметры)");
		Выполнить("НачатьПомещениеФайла(Оповещение,, Файл.ПолноеИмя, Ложь, УникальныйИдентификатор);");
	Иначе
		АдресХранилища = "";
		ПоместитьФайл(АдресХранилища, ИмяФайла, , Ложь, УникальныйИдентификатор);
		//ПодключитьВнешнююОбработку(АдресХранилища);
		Результат = Неопределено;
		ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
		Возврат ИмяОбработки;
		
		//ОбработкаПолученияФайлаОбработкиТеста(Результат,АдресХранилища,ИмяФайла,ДополнительныеПараметры);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура ПодключитьИнструментПарсерФич()
	ПутьКФайлу = Объект.КаталогИнструментов + "\vbFeatureReader.epf";
	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Файл " + ПутьКФайлу + " не найден!");
		ВызватьИсключение "Не найден файл vbFeatureReader.epf!";
	КонецЕсли;	 
	
	ПодключитьВнешнююОбработкуКлиент(Файл.ПолноеИмя);
КонецПроцедуры


&НаСервере
Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки)
	
	ТзнТаблицаИзвестныхStepDefinition = РеквизитФормыВЗначение("ТаблицаИзвестныхStepDefinition");
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТзнТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		Сообщить("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;
	
	СтрТаблицаИзвестныхStepDefinition                         = ТзнТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	
	
	ЗначениеВРеквизитФормы(ТзнТаблицаИзвестныхStepDefinition,"ТаблицаИзвестныхStepDefinition");
КонецПроцедуры


&НаСервере
Процедура ДобавитьСнипетыСервер(МассивСнипетовИзОбработки,ИмяФайла,БылиОшибки)
	Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
		ДобавитьСнипет(Снипет.Снипет,Снипет.ИмяПроцедуры,ИмяФайла,БылиОшибки);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич)
	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог " + КаталогФич + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	
	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	Отладка("Ищу снипеты в каталоге " + КаталогПоиска);
	
	
	//Сообщить("КаталогПоиска="+КаталогПоиска);
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		
		
		ИмяОбработки = ПодключитьВнешнююОбработкуКлиент(Файл.ПолноеИмя);
		
		
		
		Попытка
			ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма.Форма");
		Исключение
			Продолжить;
		КонецПопытки;
		
		
		
		Попытка
			МассивСнипетовИзОбработки = ФормаОбработки.ПолучитьСписокТестов(Объект);
		Исключение
			Сообщить("Не смог загрузить снипеты из " + Файл.ПолноеИмя);
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",ФормаОбработки);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		ДобавитьСнипетыСервер(МассивСнипетовИзОбработки,Файл.ПолноеИмя,БылиОшибки);
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьДеревоФич(СтруктураПараметров)
	КаталогИнструментов = СтруктураПараметров.КаталогИнструментов;
	КаталогФич          = СтруктураПараметров.КаталогФич;
	МассивСообщений     = СтруктураПараметров.МассивСообщений;
	DebugLog            = СтруктураПараметров.DebugLog;
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат;
	КонецЕсли;	 
	
	
	
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	ТаблицаИзвестныхStepDefinition.Очистить();
	
	
	
	
	Путь = ПутьКФичам.ПолноеИмя;
	Если ПутьКФичам.ЭтоФайл() Тогда
		Путь = ПутьКФичам.Путь;
	КонецЕсли;	 
	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь);
	
	
	
	
	//ДеревоЗначений = Новый ДеревоЗначений;
	//ДеревоЗначений.Колонки.Добавить("Имя");
	//ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	//ДеревоЗначений.Колонки.Добавить("Каталог");
	//ДеревоЗначений.Колонки.Добавить("Фича");
	//ДеревоЗначений.Колонки.Добавить("Сценарий");
	//ДеревоЗначений.Колонки.Добавить("ЭтоScenarioOutline");
	//ДеревоЗначений.Колонки.Добавить("ЭтоКонтекст");
	//ДеревоЗначений.Колонки.Добавить("Примеры");
	//ДеревоЗначений.Колонки.Добавить("ИменованныеПараметры");
	//ДеревоЗначений.Колонки.Добавить("Пример");
	//ДеревоЗначений.Колонки.Добавить("Шаг");
	//ДеревоЗначений.Колонки.Добавить("ЗначенияПараметров");
	//ДеревоЗначений.Колонки.Добавить("Снипет");
	//ДеревоЗначений.Колонки.Добавить("АдресСнипета");
	//ДеревоЗначений.Колонки.Добавить("ЭтоЧужойСнипет");
	//ДеревоЗначений.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	//
	////Если ПутьКФичам.ЭтоКаталог() Тогда
	//ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам.ПолноеИмя,ТаблицаИзвестныхStepDefinition);
	////ДеревоЗначений.ВыбратьСтроку();
	////КонецЕсли;	 
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьФичи()
	КаталогИнструментов = Объект.КаталогИнструментов;
	КаталогФич          = Объект.КаталогФич;
	DebugLog            = Объект.DebugLog;
	
	ПарсерФич = "";
	ПодключитьИнструментПарсерФич();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогИнструментов",КаталогИнструментов);
	СтруктураПараметров.Вставить("КаталогФич",КаталогФич);
	
	МассивСообщений = Новый Массив;
	СтруктураПараметров.Вставить("МассивСообщений",МассивСообщений);
	СтруктураПараметров.Вставить("DebugLog",DebugLog);
	
	
	ЗаполнитьДеревоФич(СтруктураПараметров);
	
	
	
	Возврат;
	
	
	
	Попытка
		ДеревоФич = ПарсерФич.ПолучитьДеревоФич(СтруктураПараметров);
	Исключение
		Сообщить("Ошибка при постсроении дерева.");
		Сообщить("" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Для каждого Элем Из МассивСообщений Цикл
		Сообщить(Элем);
	КонецЦикла;
	
	Если ДеревоФич = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	//СкопироватьДеревоНаФорму(ДеревоФич);
	
	//РазврнутьДеревоДоСценариев(ДеревоТестов);
	
	
	СделатьСообщение("Фичи загружены.");
	//ПарсерФич.ВычислитьСнипетыДляШагов();
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюОбработкиСервер()
	Объект1 = РеквизитФормыВЗначение("Объект");
	Возврат Объект1.ПолучитьВерсиюОбработки();
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВосстановитьНастройки();
	
	
	КаталогФич          = Объект.КаталогФич;
	КаталогИнструментов = Объект.КаталогИнструментов;
	
	ОбновитьКнопкуЗагрузитьФичи();
	Если СокрЛП(КаталогФич) <> "" Тогда
		ЗагрузитьФичи();
	КонецЕсли;	 
	
	
	
	ЭтаФорма.Заголовок = ПолучитьВерсиюОбработкиСервер();
	
	Если СокрЛП(КаталогИнструментов) = "" Тогда
		Файл = Новый Файл(ПолучитьПутьКОбработкеСервер());
		КаталогИнструментов = Файл.Путь;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОднуФичу(Команда)
	Объект.текЗначениеОперации = "ЗагрузитьОднуФичу";
	ОбновитьКнопкуЗагрузитьФичи();
	ЗагрузитьТестыЗагрузитьОднуФичу();
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьТестыЗагрузитьОднуФичу()
	ОчиститьСообщения();
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Заголовок = "Выберите feature файл";
	ДиалогОткрытияФайла.Фильтр = "Фича файл (*.feature)|*.feature";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.КаталогФич = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
 
	ЗагрузитьФичи();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЕстьПоддержкаНемодальныхФорм = УзнатьЕстьПоддержкаНемодальныхФорм();
КонецПроцедуры


