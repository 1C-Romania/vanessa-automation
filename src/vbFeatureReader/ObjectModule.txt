Перем ТаблицаКлючевыхСлов;
Перем ЭтоУФ;

Процедура СделатьСообщение(Знач Сообщение) Экспорт
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение);
КонецПроцедуры

Процедура Отладка(Знач Сообщение) Экспорт
	Если DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли; 
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьПервоеСлово(Стр,ВтораяЧастьСтроки)
	Рез = "";
	
	Поз = Найти(Стр,":");
	Если Поз > 0 Тогда
		ВтораяЧастьСтроки = СокрЛП(Сред(Стр,Поз+1));
		Возврат НРег(Лев(Стр,Поз-1));
	КонецЕсли;	 
	
	Поз = Найти(Стр," ");
	Если Поз > 0 Тогда
		ВтораяЧастьСтроки = СокрЛП(Сред(Стр,Поз+1));
		Возврат НРег(Лев(Стр,Поз-1));
	КонецЕсли;	 
	
	
	Возврат Рез;
КонецФункции


Функция ПолучитьКлючевоеСлово(Стр,ПредыдущееКлючевоеСлово)
	
	Для каждого СтрТаблицаКлючевыхСлов Из ТаблицаКлючевыхСлов Цикл
		Если СтрТаблицаКлючевыхСлов.Слово = Стр Тогда
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;	 
	КонецЦикла;
	
	//СтрТаблицаКлючевыхСлов = ТаблицаКлючевыхСлов.Найти(Стр,"Слово");
	//Если СтрТаблицаКлючевыхСлов <> Неопределено Тогда
	//	Возврат СтрТаблицаКлючевыхСлов.Тип;
	//КонецЕсли;	 
	//
	Возврат "";
КонецФункции


Процедура ЗакрытьПредудущийСценарий(ТекущийТипСценария,ПредыдущееКлючевоеСлово,ТекущееКлючевоеСлово,ДеревоСтроки,ОписаниеСценария,ТаблицаШагов)
	
	Если ТекущееКлючевоеСлово <> "scenario" Тогда
		Возврат;
	КонецЕсли;	 
	
	ИмяСценария = ОписаниеСценария;
	Если ТекущийТипСценария = "background" Тогда
		ИмяСценария = "Контекст";
	КонецЕсли;	 
	
	Если (ТекущийТипСценария = "background") или (ТекущийТипСценария = "scenario") Тогда
		СтрДеревоСтроки = ДеревоСтроки.Добавить();
		СтрДеревоСтроки.Имя = ИмяСценария;
		СтрДеревоСтроки.Сценарий = Истина;
		
		СтрокиШагов = СтрДеревоСтроки.Строки;
		
		Для каждого СтрТаблицаШагов Из ТаблицаШагов Цикл
			СтрСтрокиШагов = СтрокиШагов.Добавить();
			СтрСтрокиШагов.Имя = СтрТаблицаШагов.ИмяШага;
			СтрСтрокиШагов.Шаг = Истина;
		КонецЦикла;
		
		ТаблицаШагов.Очистить();
	КонецЕсли;	 
КонецПроцедуры


Функция ПолучитьСледующееОжидаемоеКлючевоеСлово(Стр,ТекущийТипСценария)
	Рез = Неопределено;
	
	Если Стр = "feature" Тогда
		Рез = "background,scenario";
	КонецЕсли;	 
	
	Если Стр = "background" Тогда
		ТекущийТипСценария = "background";
		Рез = "given";
	КонецЕсли;	 
	
	Если Стр = "scenario" Тогда
		ТекущийТипСценария = "scenario";
		Рез = "when";
	КонецЕсли;	 
	
	
	Если Стр = "given" Тогда
		Если ТекущийТипСценария = "background" Тогда
			Рез = "and,scenario";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			Рез = "when";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если (Стр = "and") или (Стр = "but") Тогда
		Если ТекущийТипСценария = "background" Тогда
			Рез = "and,but,scenario";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			Рез = "and,then,but";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Стр = "when" Тогда
		Если ТекущийТипСценария = "scenario" Тогда
			Рез = "and,then,but";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Стр = "then" Тогда
		Если ТекущийТипСценария = "scenario" Тогда
			Рез = "and,then,but,scenario";
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	Если Рез = Неопределено Тогда
		Сообщить("Не смог определить СледующееОжидаемоеКлючевое по: " + Стр);
	КонецЕсли;	 
	
	Возврат Рез;
КонецФункции

Функция ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово,ОжидаемоеКлючевоеСлово)
	Поз = Найти(ОжидаемоеКлючевоеСлово,ТекущееКлючевоеСлово);
	Если Поз > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;	 
КонецФункции


Функция СоздатьТаблицуШагов()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Процедура ДобавитьШаг(ТаблицаШагов,ИмяШага)
	
	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("ИмяШага",ИмяШага);
	
	ТаблицаШагов.Добавить(СтруктураШага);
	
	//СтрТаблицаШагов = ТаблицаШагов.Добавить();
	//СтрТаблицаШагов.ИмяШага = ИмяШага;
КонецПроцедуры


Функция ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяФайла,ОписаниеОшибки,ДеревоСтроки = Неопределено)
	ТекущийТипСценария      = Неопределено;
	ПредыдущееКлючевоеСлово = Неопределено;
	ОжидаемоеКлючевоеСлово  = "feature";
	ТекущееКлючевоеСлово    = Неопределено;
	ВтораяЧастьСтроки       = Неопределено;
	ОписаниеФичи            = "";
	ОписаниеСценария        = "";
	СтрокаШага              = "";
	ТаблицаШагов            = СоздатьТаблицуШагов();
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	
	НомСтр = 0;
	Пока Истина Цикл
		СтрИсходная = Текст.ПрочитатьСтроку();
		Если СтрИсходная = Неопределено Тогда
			Прервать;
		КонецЕсли;	
		
		НомСтр = НомСтр + 1;
		
		Стр = СокрЛП(СтрИсходная);
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) = "#" Тогда //Это комментарий. Его игнорируем.
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(Стр,1) = "@" Тогда //Это символ, обозначающий тег. Его игнорируем.
			Продолжить;
		КонецЕсли;	 
		
		
		
		ПромСлово            = ПолучитьПервоеСлово(Стр,ВтораяЧастьСтроки);
		ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(ПромСлово,ПредыдущееКлючевоеСлово);
		
		Если ТекущееКлючевоеСлово = "feature" Тогда
			ОписаниеФичи = ВтораяЧастьСтроки;
		ИначеЕсли ТекущееКлючевоеСлово = "scenario" Тогда
			Если ДеревоСтроки <> Неопределено Тогда
				ЗакрытьПредудущийСценарий(ТекущийТипСценария,ПредыдущееКлючевоеСлово,ТекущееКлючевоеСлово,ДеревоСтроки,ОписаниеСценария,ТаблицаШагов);
			КонецЕсли;	 
			ОписаниеСценария = ВтораяЧастьСтроки;
		Иначе
			СтрокаШага = ВтораяЧастьСтроки;
		КонецЕсли;	 
		
		Если ТекущееКлючевоеСлово = "" Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				ОписаниеФичи = ОписаниеФичи + Символы.ПС + Стр;
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Не ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово,ОжидаемоеКлючевоеСлово) Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				Продолжить;
			КонецЕсли;	 
			
			СтрОшибки = ТекущееКлючевоеСлово;
			Если ТекущееКлючевоеСлово = "" Тогда
				СтрОшибки = ПромСлово;
				Если ПромСлово = "" Тогда
					СтрОшибки = Стр;
				КонецЕсли;	 
			КонецЕсли;	 
			ОписаниеОшибки = "Строка №" + НомСтр + ", ожидалось (" + ОжидаемоеКлючевоеСлово + "), а найдено (" + СтрОшибки + ") ПредыдущееКлючевоеСлово="+ПредыдущееКлючевоеСлово;
			Возврат Ложь;
		КонецЕсли;	 
		
		
		Если (ТекущееКлючевоеСлово = "given") или (ТекущееКлючевоеСлово = "when") или (ТекущееКлючевоеСлово = "then") или (ТекущееКлючевоеСлово = "and") или (ТекущееКлючевоеСлово = "but") Тогда
			ДобавитьШаг(ТаблицаШагов,ВтораяЧастьСтроки);
		КонецЕсли;	 
		
		
		ПредыдущееКлючевоеСлово = ТекущееКлючевоеСлово;
		ОжидаемоеКлючевоеСлово  = ПолучитьСледующееОжидаемоеКлючевоеСлово(ТекущееКлючевоеСлово,ТекущийТипСценария);
		
		//Сообщить(Стр);
	КонецЦикла;	
	
	Текст.Закрыть();
	
	
	Если ТаблицаШагов.Количество() > 0 Тогда
		ЗакрытьПредудущийСценарий(ТекущийТипСценария,ПредыдущееКлючевоеСлово,"scenario",ДеревоСтроки,ОписаниеСценария,ТаблицаШагов);
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции

Процедура ЗагрузитьФичу(ИмяФайла,ДеревоСтроки)
	
	ОписаниеОшибки = "";
	Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяФайла,ОписаниеОшибки,ДеревоСтроки) Тогда
		Сообщить("Не смог загрузить " + ИмяФайла + ". " + ОписаниеОшибки);
		Возврат;
	КонецЕсли;	 
	
КонецПроцедуры

Функция ОбходКаталогов (ПутьКаталога,врДерево)
    НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*");
    Для каждого ф из НайденныеФайлы цикл
        Если ф.ЭтоКаталог() тогда
            НовСтр = врДерево.Строки.Добавить();
            НовСтр.Каталог    = Истина;
            НовСтр.ПолныйПуть = ф.ПолноеИмя;
            НовСтр.Имя        = ф.Имя;
            ОбходКаталогов(ПутьКаталога+"\"+ф.Имя,НовСтр);
			
			Если НовСтр.Строки.Количество() = 0 Тогда
				врДерево.Строки.Удалить(НовСтр);
			КонецЕсли;
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
            НовСтр            = врДерево.Строки.Добавить();
            НовСтр.Фича       = Истина;
            НовСтр.ПолныйПуть = ф.ПолноеИмя;
            НовСтр.Имя        = ф.ИмяБезРасширения;
			
			ЗагрузитьФичу(ф.ПолноеИмя,НовСтр.Строки);
        КонецЕсли;
    КонецЦикла;
КонецФункции

Процедура ЗаполнитьДерево(ДеревоЗначений,Каталог)
	Файл = Новый Файл(Каталог);
	
	НовСтр            = ДеревоЗначений.Строки.Добавить();
    НовСтр.Каталог    = Истина;
    НовСтр.Имя        = Файл.Имя;
    НовСтр.ПолныйПуть = Каталог;
    ОбходКаталогов(Каталог,НовСтр);    
КонецПроцедуры


Процедура ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам)
	//Заполним дерево файлами фич с учетом иерархии
	ЗаполнитьДерево(ДеревоЗначений,ПутьКФичам);
КонецПроцедуры


Функция ПолучитьДеревоФич(СтруктураПараметров) Экспорт
	КаталогИнструментов = СтруктураПараметров.КаталогИнструментов;
	КаталогФич          = СтруктураПараметров.КаталогФич;
	МассивСообщений     = СтруктураПараметров.МассивСообщений;
	
	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Имя");
	ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	ДеревоЗначений.Колонки.Добавить("Каталог");
	ДеревоЗначений.Колонки.Добавить("Фича");
	ДеревоЗначений.Колонки.Добавить("Сценарий");
	ДеревоЗначений.Колонки.Добавить("Шаг");
	
	Если ПутьКФичам.ЭтоКаталог() Тогда
		ОбработатьКаталогФич(ДеревоЗначений,ПутьКФичам.ПолноеИмя);
		//ДеревоЗначений.ВыбратьСтроку();
	КонецЕсли;	 
	
	Возврат ДеревоЗначений;
КонецФункции

Процедура ДобавитьКлючевоеСловоВТаблицу(Тзн,Слово,Тип)
	СтруктураКлючевогоСлова = Новый Структура;
	СтруктураКлючевогоСлова.Вставить("Слово",Слово);
	СтруктураКлючевогоСлова.Вставить("Тип",Тип);
	
	Тзн.Добавить(СтруктураКлючевогоСлова);
	
КонецПроцедуры

Функция СоздатьТаблицуКлючевыхСлов()
	Тзн = Новый Массив;
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функция","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функционал","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"свойство","feature");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"предыстория","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"контекст","background");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарий","scenario");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценария","scenario_outline");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"примеры","examples");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"допустим","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"пусть","given");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"если","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"когда","when");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тогда","then");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"и","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"к тому же","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"также","and");
	
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"но","but");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а","but");
	
	Возврат Тзн;
КонецФункции


Процедура СоздатьEPFПоМассивуФич(СтруктураПараметров) Экспорт
	СделатьСообщение("Запускаю генерацию epf.");
	ГенерироватьУФ      = СтруктураПараметров.ГенерироватьУФ;
	DebugLog            = СтруктураПараметров.DebugLog;
	КаталогИнструментов = СтруктураПараметров.КаталогИнструментов;
	ШагСтрокДляМодуля   = СтруктураПараметров.ШагСтрокДляМодуля;
	СделатьGenerateEpf(СтруктураПараметров);
	
КонецПроцедуры


Функция СоздатьПустуюСтруктуруEpf() Экспорт
	Стр = Новый Структура;
	Стр.Вставить("ИмяФичи","");
	Стр.Вставить("ИмяФайлаEpf","");
	Стр.Вставить("ВременноеИмяМодуля","");
	Стр.Вставить("ТелоМодуля","");//таблица значений
	Стр.Вставить("ИмяМодуляEpf","");
	Стр.Вставить("КаталогИсходников","");
	
	Возврат Стр;
КонецФункции

Процедура ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников,ИмяФайлаОригинала)
	
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если ФайлВерсии.Существует() Тогда
		УдалитьФайлы(ФайлВерсии.ПолноеИмя);
	КонецЕсли;	 
	
	Файл   = Новый Файл(ИмяФайлаОригинала);
	Версия = Строка(Файл.ПолучитьВремяИзменения());
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаВерсииИсходников,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку("Версия="+Версия); 
	
	ЗТ.Закрыть();
КонецПроцедуры

Функция ПолучитьВерсиюИсходников(ИмяФайлаВерсииИсходников)
	ФайлВерсии = Новый Файл(ИмяФайлаВерсииИсходников);
	Если Не ФайлВерсии.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаВерсииИсходников,"UTF-8");
	
	СтрокаВозврата = Неопределено;
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Поз = Найти(Стр,"=");
		Если Поз > 0 Тогда
			СтрокаВозврата = Сред(Стр,Поз+1);
		КонецЕсли;	 
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат СтрокаВозврата;
	
КонецФункции


Функция РаспаковатьEPF(ИмяФайла)
	Попытка
		
		Файл = Новый Файл(ИмяФайла);
		
		ИмяКаталогаДляИсходников = Файл.Путь + "Src";
		ИмяФайлаВерсииИсходников = Файл.Путь + "Src\" + Файл.ИмяБезРасширения + "\SrcVersion.vb";
		
		Если ЭтоУФ Тогда
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\Form\Форма\Форма.txt";
		Иначе	
			ПутьКФайлуМодуля = ИмяКаталогаДляИсходников + "\" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		КонецЕсли;	 
		
		
		ВерсияИсходников = ПолучитьВерсиюИсходников(ИмяФайлаВерсииИсходников);
		Если ВерсияИсходников = Строка(Файл.ПолучитьВремяИзменения()) Тогда
			Отладка("Не стал распаковывать " + ИмяФайла + ", т.к. совпали версия файла и исходников. " + ВерсияИсходников);
			Возврат ПутьКФайлуМодуля;
		КонецЕсли;	 
		

		УдалитьФайлы(ИмяКаталогаДляИсходников);
		ФайлКаталогSrc = Новый Файл(ИмяКаталогаДляИсходников);
		Если Не ФайлКаталогSrc.Существует() Тогда
			СоздатьКаталог(ИмяКаталогаДляИсходников);
		КонецЕсли;	 
		
		СтрокаРазборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py  """ +  ИмяФайла + """ """ + ИмяКаталогаДляИсходников + """";
		СделатьСообщение("Делаю распаковку " + Файл.ПолноеИмя);
		Отладка("Строка распаковки: " + СтрокаРазборкиEpf);
		КомандаСистемы(СтрокаРазборкиEpf,КаталогИнструментов);
		
		
		Файл = Новый Файл(ПутьКФайлуМодуля);
		Если Не Файл.Существует() Тогда
			СделатьСообщение("Не найден файл после распаковки: " + ПутьКФайлуМодуля);
			Если ЭтоУФ Тогда
				СделатьСообщение("Возможно это обработка для обычных форм, а не для управляемых форм.");
			Иначе	
				СделатьСообщение("Возможно это обработка для управляемых форм, а не для обычных форм.");
			КонецЕсли;	 
			Возврат Неопределено;
		КонецЕсли;	 
		
		ЗаписатьФайлВерсииИсходников(ИмяФайлаВерсииИсходников,ИмяФайла);
		
		Возврат ПутьКФайлуМодуля;
	Исключение
		СделатьСообщение("Не смог распаковать " + ИмяФайла);
		СделатьСообщение(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции


Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Тзн;
КонецФункции


Функция СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ИмяТекущейФичи,GenerateEpf)
	СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
	СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
	СтруктураОписанияEpf.ИмяФайлаEpf        = ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + ".epf";
	
	//СтруктураОписанияEpf.ИмяМодуляEpf       = КаталогИнструментов + "\src" + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + "\ObjectModule.txt";
	Если GenerateEpf Тогда
		ФайлEpf = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		Если ФайлEpf.Существует() Тогда //т.е. если мы не первый раз работаем с данной фичей
			СтруктураОписанияEpf.ИмяМодуляEpf       = РаспаковатьEPF(СтруктураОписанияEpf.ИмяФайлаEpf);
		КонецЕсли;	 
	КонецЕсли;
	
	СтруктураОписанияEpf.КаталогИсходников = КаталогИнструментов + "\lib\TemplateEpf";
	//если уже были исходники, то надо использовать их
	ПромИмяФайла = ОтносительныйКаталогФичи + "\step_definitions\src\" + ИмяТекущейФичи;
	ПромИсходникиФайл = Новый Файл(ПромИмяФайла);
	Если ПромИсходникиФайл.Существует() Тогда
		СтруктураОписанияEpf.КаталогИсходников = ПромИмяФайла;
	КонецЕсли;	 
	
	
	СтруктураОписанияEpf.ВременноеИмяМодуля = СтруктураОписанияEpf.КаталогИсходников + "\ObjectModule_" + ИмяТекущейФичи + ".txt";
	
	//ПромИмяФайла = ОтносительныйКаталогФичи + "\step_definitions\src\" + ИмяТекущейФичи + "\ObjectModule_" + ИмяТекущейФичи + ".txt";
	
	//Сообщить("СтруктураОписанияEpf.ИмяМодуляEpf="+СтруктураОписанияEpf.ИмяМодуляEpf);
	
	
	УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	
	Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если Не Файл.Существует() Тогда
		//Сообщить(СтруктураОписанияEpf.ВременноеИмяМодуля);
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		ЗТ.Закрыть();
	КонецЕсли;
	
	
	Файл = Новый Файл(СтруктураОписанияEpf.ИмяМодуляEpf); //значит надо загрузить модуль из исходников
	Если Файл.Существует() Тогда
		СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ИмяМодуляEpf);
	Иначе
		СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
		//значит создаём файл первый разделим
		ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ);
	КонецЕсли;
	
	
	
	
	//МассивДляСозданияEpf.Добавить(СтруктураОписанияEpf);
	//Отладка("Добавляю фичу " + СтруктураОписанияEpf.ИмяФичи + " в МассивДляСозданияEpf.");
	
	
	Возврат СтруктураОписанияEpf;
КонецФункции

Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Ложь) Экспорт
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	
	//ДобавитьСтрокуВМодуль(ТелоМодуля,"Перем Контекст Экспорт;");
	
	
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ПередНачаломСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура ПередОкончаниемСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры

Функция ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля)
	Если ТелоМодуля.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТелоМодуля[ТелоМодуля.Количество()-1].НомСтр;
КонецФункции

Процедура ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,Стр)
	НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	
	СтрТелоМодуля = ТелоМодуля.Добавить();
	СтрТелоМодуля.НомСтр = НомСтр + ШагСтрокДляМодуля;
	СтрТелоМодуля.Стр    = Стр;
	
	
	//Сообщить("ТелоМодуля.Количество()=" + ТелоМодуля.Количество());
КонецПроцедуры

Функция ПолучитьТелоМодуляВМассивСервер(Стр)
КонецФункции

Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,ИмяФичи)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлОсноваОбработки,"UTF-8");

	
	ВременноеИмяФайла = ИмяФайлОсноваОбработки + "_Temp";
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,"TemplateEpf",ИмяФичи);
		Стр = СтрЗаменить(Стр,"Template epf",ИмяФичи);
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	Текст = "";
	//Приостановить(500);
	
	
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	ПереместитьФайл(ВременноеИмяФайла,ИмяФайлОсноваОбработки);
	
КонецПроцедуры


Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Файл = Новый Файл(Путь);
	Если Путь = "" Тогда
		ВызватьИсключение "Передан пустой путь в процедуру ""СоздатьКаталогЕслиЕгоНет""!";
	КонецЕсли;	 
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
		Отладка("Создан каталог: " + Путь);
	КонецЕсли;
КонецПроцедуры


Процедура СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf)
	
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ПолучитьТелоМодуляВМассивСервер(ТелоМодуля);
	Иначе
		ТелоМодуля.Сортировать("НомСтр");
		ТелоМодуля = ТелоМодуля.ВыгрузитьКолонку("Стр");
	КонецЕсли;	 
	
	Отладка("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	//Продолжить;
	
	УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
	Если ГенерироватьУФ Тогда
		ИмяФайлаФормаУФ = КаталогИнструментов + "\lib\TemplateEpfUF\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0_template";
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаФормаУФ,"UTF-8");
		
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		
		Пока Истина Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
			
			ЗТ.ЗаписатьСтроку(Стр); 
			
			Если Стр = "},""//начало текста модуля" Тогда
				Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
					//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
					СтрТелоМодуля = СтрЗаменить(СтрТелоМодуля,"""","""""");
					ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
					//ЗТ.Записать(Символы.ПС); 
				КонецЦикла;
			КонецЕсли;	 
		КонецЦикла;	
		
		
		Текст.Закрыть();
		ЗТ.Закрыть();
	Иначе	
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
			ЗТ.ЗаписатьСтроку(СтрТелоМодуля); 
			//ЗТ.Записать(Символы.ПС); 
		КонецЦикла;
		ЗТ.Закрыть();
	КонецЕсли;	 
	Отладка("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
	
	
	//ПутьКИсходникам = КаталогИнструментов + "\lib\TemplateEpf\";
	//ИмяФайлаМодуляДляСборки = КаталогИнструментов + "\lib\TemplateEpf\ObjectModule.txt";
	
	//ФайлВременноеИмяМодуля = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
	ПутьКИсходникам = СтруктураОписанияEpf.КаталогИсходников;
	
	
	
	ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "\ObjectModule.txt";
	Если ГенерироватьУФ Тогда
		ИмяФайлаМодуляДляСборки = ПутьКИсходникам + "\und\70e297e0-e8a2-43bf-8be1-62e408f610a1.0";
	КонецЕсли;	 
	
	УдалитьФайлы(ИмяФайлаМодуляДляСборки);
	ПереместитьФайл(СтруктураОписанияEpf.ВременноеИмяМодуля,ИмяФайлаМодуляДляСборки);
	Отладка("Переименовал в " + ИмяФайлаМодуляДляСборки);
	
	
	//ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
	//ИмяФайлОсноваОбработки         = КаталогИнструментов + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	ИмяФайлОсноваОбработкиTemplate = ПутьКИсходникам + "\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
	ИмяФайлОсноваОбработки         = ПутьКИсходникам + "\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	Если ГенерироватьУФ Тогда
		ИмяФайлОсноваОбработкиTemplate = КаталогИнструментов + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		ИмяФайлОсноваОбработки         = КаталогИнструментов + "\lib\TemplateEpfUF\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
	КонецЕсли;	 
	
	Файл_template = Новый Файл(ИмяФайлОсноваОбработкиTemplate);
	Если Файл_template.Существует() Тогда
		//это значит обработка создаётся в первый раз
		КопироватьФайл(ИмяФайлОсноваОбработкиTemplate,ИмяФайлОсноваОбработки);
		ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,СтруктураОписанияEpf.ИмяФичи);
	КонецЕсли;	 
	
	
	Файл = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
	СоздатьКаталогЕслиЕгоНет(Файл.Путь);
	
	Если Файл.Существует() Тогда
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЕсли;	 
	
	СделатьСообщение("Создаю " + СтруктураОписанияEpf.ИмяФайлаEpf);
	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py --compile """ +  ПутьКИсходникам  + """ """ + СтруктураОписанияEpf.ИмяФайлаEpf + """";
	//Если ГенерироватьУФ Тогда
	//	СтрокаСборкиEpf = "python " + КаталогИнструментов + "\vendor\precommit1c\pyv8unpack.py --compile " +  КаталогИнструментов + "\lib\TemplateEpfUF " + СтруктураОписанияEpf.ИмяФайлаEpf;
	//КонецЕсли;	 
	Отладка("СтрокаСборкиEpf="+СтрокаСборкиEpf);
	
	//retCode = "";
	//ЗапуститьПриложение(СтрокаСборкиEpf,,Истина,retCode);
	КомандаСистемы(СтрокаСборкиEpf);
	Если Файл.Существует() Тогда
		Отладка("Файл " + Файл.ПолноеИмя + " создан.");
	Иначе	
		СделатьСообщение("Ошибка создания файла " + Файл.ПолноеИмя + "!!!");
		БылиОшибки = Истина;
	КонецЕсли;	 
	//Сообщить("retCode=" + retCode);
	УдалитьФайлы(ИмяФайлаМодуляДляСборки);
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	
	
КонецПроцедуры

Функция ПолучитьСледующуюСтрокуМодуля(СтрТзн,Тзн)
	Индекс = Тзн.Индекс(СтрТзн);
	Если Индекс = Тзн.Количество()-1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тзн.Получить(Индекс+1);
КонецФункции

Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки,ТаблицаИзвестныхStepDefinition)
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		СделатьСообщение("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;
	
	СтрТаблицаИзвестныхStepDefinition                         = ТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
КонецПроцедуры


Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition);
	
	
	
	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог " + КаталогФич + " не существует!");
		Возврат;
	КонецЕсли;	 
	
	
	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;	 
	
	Файл = Новый Файл(КаталогФич);
	
	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;
	
	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;	 
	
	//Сообщить("КаталогПоиска="+КаталогПоиска);
	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		//СтрТаблицаКонтекстовОбработок           = ТаблицаКонтекстовОбработок.Добавить();
		//СтрТаблицаКонтекстовОбработок.ИмяФайла  = Файл.ПолноеИмя;
		//СтрТаблицаКонтекстовОбработок.Обработка = ВнешниеОбработки.Создать(СтрТаблицаКонтекстовОбработок.ИмяФайла);
		
		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",ВнешниеОбработки.Создать(СтрТаблицаКонтекстовОбработок.ИмяФайла));
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);
		
		
		//Рефлектор = Новый Рефлектор();
		//МассивАргументов = Новый Массив;
		//МассивАргументов.Добавить(1);
		//МассивАргументов.Добавить("фывфывфывфы");
		//Рефлектор.ВызватьМетод(СтрТаблицаКонтекстовОбработок.Обработка, "ПередНачаломСценария", МассивАргументов);
		
		//СтрТаблицаИзвестныхStepDefinition                 = ТаблицаИзвестныхStepDefinition.Добавить();
		//СтрТаблицаИзвестныхStepDefinition.ИмяФайла        = Файл.ПолноеИмя;
		//СтрТаблицаИзвестныхStepDefinition.ТаблицаПроцедур = СоздатьПустуюТаблицуПроцедур();
		
		Отладка("Путь="+Файл.ПолноеИмя);
		Стр = Файл.Путь;
		Стр = СтрЗаменить(Стр,КаталогИнструментов,КаталогИнструментов + "\Src");
		Стр = Стр + "" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		//Сообщить("Стр="+Стр);
		
		ФайлМодуль = Новый Файл(Стр);
		Если Не ФайлМодуль.Существует() Тогда
			//значит мы не можем найти исходники epf и распакуем epf сами
			//ПрерватьВыполнениеСкрипта("Файл " + Стр + " не найден! Не могу найти StepDefinition.");
			Стр = РаспаковатьEPF(Файл.ПолноеИмя);
			Если Стр = Неопределено Тогда
				СделатьСообщение("Для " + Файл.ПолноеИмя + " не были получены исходники!");
			КонецЕсли;	 
			//ПрерватьВыполнениеСкрипта("Файл " + Стр + " не найден! Не могу найти StepDefinition.");
		КонецЕсли;
		
		ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(Стр);
		
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			Если Лев(СтрТелоМодуля.Стр,3) = "//@" Тогда
				СледСтрока = ПолучитьСледующуюСтрокуМодуля(СтрТелоМодуля,ТелоМодуля);
				Если СледСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьСнипет(Сред(СтрТелоМодуля.Стр,4),СледСтрока.Стр,Файл.ПолноеИмя,БылиОшибки,ТаблицаИзвестныхStepDefinition);
				//Сообщить("" + СтрТелоМодуля.Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		Сообщить("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруСнипета()
	СтруктураСнипета = Новый Структура;
	
	Возврат СтруктураСнипета;
КонецФункции

Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition) 
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
	StepDefinition = СтрЗаменить(StepDefinition,"-","_");
	StepDefinition = СтрЗаменить(StepDefinition,"+","");
КонецПроцедуры

Функция ДобавитьПараметрStepDefinition(Знач Стр,КолПараметров) Экспорт
	КолПараметровСтр = СокрЛП(КолПараметров);
	Если СтрДлина(КолПараметровСтр) = 1 Тогда
		КолПараметровСтр = "0" + КолПараметровСтр;
	КонецЕсли;
	
	Стр = СтрЗаменить(Стр,"<Параметр","<Парам" + КолПараметровСтр) + ",";
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	
	Возврат Стр;
КонецФункции

Функция СделатьПервуюБуквуЗаглавной(Стр) Экспорт
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;
	
	ПерваяБуква = ВРег(Лев(Стр,1));
	
	Возврат ПерваяБуква + Сред(Стр,2);
КонецФункции

Процедура ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтроки);
	ПромСтр = Стр;
	НоваяСтрока = "";
	Поз = Найти(ПромСтр,"'");
	
	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	Пока Поз > 0 Цикл
		НоваяСтрока = НоваяСтрока + Лев(ПромСтр,Поз-1);
		ПромСтр = Сред(ПромСтр,Поз+1);
		
		Поз = Найти(ПромСтр,"'");
		Если Поз > 0 Тогда
			ЗначениеПараметра = Лев(ПромСтр,Поз-1);
			//Сообщить("ЗначениеПараметра="+ЗначениеПараметра);
			ПромСтр = Сред(ПромСтр,Поз+1);
			НоваяСтрока = НоваяСтрока + " <ПараметрСтрока> ";
			ПараметрыСтроки.Добавить(ЗначениеПараметра);
		Иначе
			НоваяСтрока = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
		
		
		Поз = Найти(ПромСтр,"'");
		Если Поз = 0 Тогда
			НоваяСтрока = НоваяСтрока + ПромСтр;
		КонецЕсли;	 
	КонецЦикла;
	
	Стр = НоваяСтрока;
КонецПроцедуры

Функция ЭтоЧисло(Стр)
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр,Ккк,1);
		Если Символ = "0"
		Или Символ = "1"
		Или Символ = "2"
		Или Символ = "3"
		Или Символ = "4"
		Или Символ = "5"
		Или Символ = "6"
		Или Символ = "7"
		Или Символ = "8"
		Или Символ = "9"
		Тогда
			//это цифра
		Иначе
			Возврат Ложь;	
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Истина;
КонецФункции


Процедура ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	
	Для Ккк = 0 По Массив.Количество()-1-2 Цикл
		Элем1 = Прав(Массив[Ккк],2);
		Элем2 = Массив[Ккк+1];
		Элем3 = Лев(Массив[Ккк+2],4);
		Если СтрДлина(Элем3) < 4 Тогда
			Элем3 = Лев(Массив[Ккк+2],2);
		КонецЕсли;	 
		Если СтрДлина(Элем3) = 4 Тогда
			Если НЕ ЭтоЧисло(Элем3) Тогда
				Элем3 = Лев(Массив[Ккк+2],2);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрДлина(Элем1) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если СтрДлина(Элем2) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если (СтрДлина(Элем3) = 2) или (СтрДлина(Элем3) = 4) Тогда
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ ЭтоЧисло(Элем1) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЧисло(Элем2) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ЭтоЧисло(Элем3) Тогда
			Продолжить;
		КонецЕсли;	 
		
		
		СтрДат = "" + Элем1 + "." + Элем2 + "." +Элем3;
		
		Поз = Найти(Стр,СтрДат);
		Если Поз > 0 Тогда
			Стр = Лев(Стр,Поз-1) + " <ПараметрДата> " + Сред(Стр,Поз+СтрДлина(СтрДат));
			//Сообщить("ЗначениеПараметра="+СтрДат);
			ПараметрыДаты.Добавить(СтрДат);
			ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты);
			Прервать;
		КонецЕсли;	 
		
		//Если ЭтоЧисло(Элем1) и  Тогда
		//КонецЕсли;	 
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоКорректноеЧисло(Стр)
	Попытка
		ПромЧисло = Число(Стр);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ПромСтрока = Строка(ПромЧисло);
	
	ПромСтрока = СтрЗаменить(ПромСтрока,Символы.НПП,"");
	ПромСтрока = СтрЗаменить(ПромСтрока,",",".");
	
	
	Если ПромСтрока = СокрЛП(Стр) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции


Процедура ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла)
	ПромСтр           = Стр;
	СтрокаРезультат   = "";
	НакопленнаяСтрока = "";
	ПредыдущийСимвол = Неопределено;
	
	Для Ккк = 1 По СтрДлина(ПромСтр) Цикл
		Символ = Сред(ПромСтр,Ккк,1);
		
		Если Ккк > 1 Тогда
			ПредыдущийСимвол = Сред(ПромСтр,Ккк-1,1);
		КонецЕсли;	 
		
		Если ЭтоЧисло(Символ) Тогда
			Если НакопленнаяСтрока = "" Тогда
				Если (ПредыдущийСимвол = " ") или (Ккк = 1) Тогда //всё хорошо, мы нашли начало числа
				Иначе
					СтрокаРезультат = СтрокаРезультат + Символ;
					НакопленнаяСтрока = "";
					Продолжить;
				КонецЕсли;	 
			КонецЕсли;	 
			
			НакопленнаяСтрока = НакопленнаяСтрока + Символ;
			Продолжить;
		КонецЕсли;	 
		
		НакопленнаяСтрока = НакопленнаяСтрока + Символ;
		
		Если Символ = "." Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) и (Символ = " ") Тогда
			СтрокаРезультат = СтрокаРезультат + " <ПараметрЧисло> ";
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);
			//Сообщить("ЗначениеПараметра="+НакопленнаяСтрока);
			НакопленнаяСтрока = "";
		Иначе
			СтрокаРезультат =СтрокаРезультат + НакопленнаяСтрока;
			НакопленнаяСтрока = "";
		КонецЕсли;	 
	КонецЦикла;
	
	Если СтрДлина(НакопленнаяСтрока) > 0 Тогда
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) Тогда
			СтрокаРезультат = СтрокаРезультат + " <ПараметрЧисло> ";
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);
			//Сообщить("ЗначениеПараметра="+НакопленнаяСтрока);
		Иначе
			СтрокаРезультат =СтрокаРезультат + НакопленнаяСтрока;
		КонецЕсли;
	КонецЕсли;	 
	
	Стр = СтрокаРезультат;
КонецПроцедуры

Функция ПолучитьStepDefinitionПоСтроке(Знач Стр,args) 
	
	ПараметрыЧисла  = Новый Массив;
	ПараметрыСтроки = Новый Массив;
	ПараметрыДаты   = Новый Массив;
	
	Стр = СтрЗаменить(Стр,"""","'");//чтобы " заменить на апостроф
	
	
	//Сообщить("Обрабатываю " + Стр);
	ОбработатьСтрокиЭмуляцияRegExp(Стр,ПараметрыСтроки);
	//Сообщить("Получил " + Стр);
	//Сообщить(" ");
	
	//Сообщить("Обрабатываю " + Стр);
	ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты);
	//Сообщить("Получил " + Стр);
	//Сообщить(" ");
	
	//Сообщить("Обрабатываю " + Стр);
	ОбработатьЧислаЭмуляцияRegExp(Стр,ПараметрыЧисла);
	//Сообщить("Получил " + Стр);
	//Сообщить(" ");
	
	
	УбратьЗапрещенныеСимволыИзStepDefinition(стр);
	
	
	
	
	
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);
	КолПараметров       = 0;
	КолПараметровЧисло  = 0;
	КолПараметровСтрока = 0;
	КолПараметровДата   = 0;
	СтрокаПараметров    = "";
	args                = "";
	StepDefinition      = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		//Сообщить("Элем="+Элем);
		Если Элем = "<ПараметрСтрока>" Тогда
			КолПараметров       = КолПараметров       + 1;
			КолПараметровСтрока = КолПараметровСтрока + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			//Сообщить("ПараметрыСтроки[КолПараметровСтрока-1]=" + ПараметрыСтроки[КолПараметровСтрока-1]);
			args             = args + ПараметрыСтроки[КолПараметровСтрока-1] + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрЧисло>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + ПараметрыЧисла[КолПараметровЧисло-1] + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрДата>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата  + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + ПараметрыДаты[КолПараметровДата-1] + ",";
			Продолжить;
		КонецЕсли;
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Если СтрокаПараметров <> "" Тогда
		СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);

	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	Если СтрДлина(args) > 0 Тогда
		args = Лев(args,СтрДлина(args)-1);//убрали запятую
	КонецЕсли;
	//Сообщить("args="+args);
	
	
	Возврат StepDefinition;
	//Сообщить(стр);
	
	
	
	
	
	
	Возврат Неопределено;
	
	RegExp = "";
	
	Стр = СтрЗаменить(Стр,"\""","'");//чтобы \" заменить на апостроф
	
	StepDefinition = "";
	args = "";
	ПараметрыЧисла  = Новый Массив;
	ПараметрыСтроки = Новый Массив;
	ПараметрыДаты   = Новый Массив;
	
	//найдём параметры строки
	RegExp.Pattern = "\'[^\']+\'"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПромСтр = Item.Value;
		Если Лев(ПромСтр,1) = "'" Тогда
			ПромСтр = Сред(ПромСтр,2);
		КонецЕсли;
		Если Прав(ПромСтр,1) = "'" Тогда
			ПромСтр = Лев(ПромСтр,СтрДлина(ПромСтр)-1);
		КонецЕсли;
		
		//ПромСтр = СтрЗаменить(ПромСтр,"\\","\");
		
		ПараметрыСтроки.Добавить(ПромСтр);
		//Сообщить("Item.Value строка = " + Item.Value);
	КонецЦикла;
	
	стр=RegExp.Replace(стр, " <ПараметрСтрока> "); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры даты
	RegExp.Pattern = "\d\d\.\d\d\.(\d\d\d\d|\d\d)"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыДаты.Добавить(Item.Value);
		//Сообщить("Item.Value дата = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, " <ПараметрДата> "); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры числа
	//RegExp.Pattern = "\d+"; 
	//RegExp.Pattern = "[-+]?\b[0-9]*\.?[0-9]+\b"; 
	RegExp.Pattern = "(^)*([^\wа-яё+-\.][-+]?[0-9]+(\.[0-9]+)?)";
	//RegExp.Pattern = "/^-{0,1}\d+\.{0,1}\d*$/"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыЧисла.Добавить(Item.Value);
		//Сообщить("Item.Value число = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, " <ПараметрЧисло> "); 
	
	//Сообщить("стр="+стр);
	
	
	
	УбратьЗапрещенныеСимволыИзStepDefinition(стр);
	//стр = СтрЗаменить(Стр,":","");//надо убрать некоторые спец символы
	
	
	
	//разделим на слова
	//в VBScript нет метода Split, поэтому сделаем иначе
	RegExp.Pattern = "\s+"; 
	ПромСтр=RegExp.Replace(стр,"+|||+"); 
	//Сообщить("ПромСтр="+ПромСтр);
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ПромСтр,"+|||+",Истина);
	КолПараметров       = 0;
	КолПараметровЧисло  = 0;
	КолПараметровСтрока = 0;
	КолПараметровДата   = 0;
	СтрокаПараметров = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		//Сообщить("Элем="+Элем);
		Если Элем = "<ПараметрСтрока>" Тогда
			КолПараметров       = КолПараметров       + 1;
			КолПараметровСтрока = КолПараметровСтрока + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			//Сообщить("ПараметрыСтроки[КолПараметровСтрока-1]=" + ПараметрыСтроки[КолПараметровСтрока-1]);
			args             = args + "{""val"":""{" + ПараметрыСтроки[КолПараметровСтрока-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрЧисло>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыЧисла[КолПараметровЧисло-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрДата>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата  + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыДаты[КолПараметровДата-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Если СтрокаПараметров <> "" Тогда
		СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);

	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	Если СтрДлина(args) > 0 Тогда
		args = Лев(args,СтрДлина(args)-1);//убрали запятую
	КонецЕсли;
	//Сообщить("args="+args);
	
	
	Возврат StepDefinition;
	//Сообщить(стр);
КонецФункции


Функция СнипетыПолучитьСнипетыПоШагам(Шаги)
	МассивСнипетов = Новый Массив;
	
	Для каждого СтрШаг Из Шаги Цикл
		args = Неопределено;
		StepDefinition = ПолучитьStepDefinitionПоСтроке(СтрШаг,args);
		Отладка("По (" + СтрШаг + ") получил StepDefinition: " + StepDefinition);
		
		СтруктураСнипета = СоздатьСтруктуруСнипета();
		СтруктураСнипета.Вставить("Шаг",СтрШаг);
		СтруктураСнипета.Вставить("StepDefinition",StepDefinition);
		
		МассивСнипетов.Добавить(СтруктураСнипета);
	КонецЦикла;
	
	Возврат МассивСнипетов;
КонецФункции

Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры,ШагСтрокДляМодуля,ГенерироватьУФ,ЭтоУФ = Ложь) Экспорт 
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;	 
	ТелоМодуля.Сортировать("НомСтр");
	
	УжеЕсть = Ложь;
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = СокрЛП(СтрТелоМодуля.Стр);
		Если Лев(Стр,3) = "//@" Тогда //так определяется StepDefinition
			Если Найти(Стр,StepDefinition) > 0 Тогда
				УжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеЕсть Тогда
		Возврат;
	КонецЕсли;
	
	//НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	//Возврат;
	
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"&НаКлиенте");
	КонецЕсли;	 
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//" + ПримерИспользованияПроцедуры);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"//@" + StepDefinition);
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"Процедура " + StepDefinition + " Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"	ВызватьИсключение ""Не реализовано."";");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,ШагСтрокДляМодуля,"");
	
	Если ЭтоУФ Тогда
		//ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
		СтруктураОписанияEpf.ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;	 
КонецПроцедуры

Процедура СделатьGenerateEpf(СтруктураПараметров)
	
	ГенерироватьУФ    = СтруктураПараметров.ГенерироватьУФ;
	ШагСтрокДляМодуля = СтруктураПараметров.ШагСтрокДляМодуля;
	КаталогФич = СтруктураПараметров.КаталогФич;
	
	
	//ТаблицаКонтекстовОбработок = Новый ТаблицаЗначений;
	//ТаблицаКонтекстовОбработок.Колонки.Добавить("ИмяФайла");
	//ТаблицаКонтекстовОбработок.Колонки.Добавить("Обработка");
	
	ТаблицаКонтекстовОбработок = Новый Массив;
	
	
	ТаблицаИзвестныхStepDefinition = Новый ТаблицаЗначений;
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ИмяФайла");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Id");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Параметры");
	
	ПолучитьУжеСуществующиеСнипетыИзОбработок(КаталогФич,ТаблицаКонтекстовОбработок,ТаблицаИзвестныхStepDefinition);
	
	
	МассивФич   = СтруктураПараметров.МассивФич;
	МассивШагов = СтруктураПараметров.МассивШагов;
	Ном = 0;
	Для каждого ИмяФайлаФичи Из МассивФич Цикл
		Ном = Ном+1;
		Шаги = МассивШагов.Получить(Ном-1);
		
		ФайлФичи       = Новый Файл(ИмяФайлаФичи);
		ИмяТекущейФичи = ФайлФичи.ИмяБезРасширения;
		СделатьСообщение("Работаю по фиче: " + ИмяФайлаФичи);
		
		МассивДляСозданияEpf = Новый Массив;
		//ОтносительныйКаталогФичи = СтрЗаменить(ФайлФичи.Путь,КаталогИнструментов,"");
		ОтносительныйКаталогФичи = ФайлФичи.Путь;
		Если Прав(ОтносительныйКаталогФичи,1) = "\" Тогда
			ОтносительныйКаталогФичи = Лев(ОтносительныйКаталогФичи,СтрДлина(ОтносительныйКаталогФичи)-1);
		КонецЕсли;	 
		
		Отладка("ОтносительныйКаталогФичи=" + ОтносительныйКаталогФичи);
		СтруктураОписанияEpf = СоздатьСтруктураОписанияEpf(ОтносительныйКаталогФичи,ФайлФичи.ИмяБезРасширения,Истина);
		
		
		Снипеты = СнипетыПолучитьСнипетыПоШагам(Шаги);
		Для каждого ЭлемСнипет Из Снипеты Цикл
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,ЭлемСнипет.StepDefinition,ЭлемСнипет.Шаг,ШагСтрокДляМодуля,ГенерироватьУФ);
		КонецЦикла;
		
		БылиОшибки = Ложь;
		СоздатьФайлыОбработок(БылиОшибки,СтруктураОписанияEpf);
	КонецЦикла;
	
	
	СделатьСообщение("Все фичи обработаны!");
	
КонецПроцедуры






ТаблицаКлючевыхСлов = СоздатьТаблицуКлючевыхСлов();
ЭтоУФ = Ложь;

