Перем Сервер;
Перем Соединение;
//Перем КаталогПроекта;
//Перем СтрокаПодключенияКБазе;
//Перем GenerateEpf;
//Перем TestRun;
//Перем DebugLog;
Перем ИмяТекущейФичи;
Перем МассивДляСозданияEpf;
Перем МассивНайденыхФич;
Перем ШагСтрокДляМодуля;
Перем ОшибкаВнутриОбработкиВызоваBDD;
Перем ОЛЕ;
Перем ОбъектКонтекст;
Перем ТаблицаИзвестныхStepDefinition;
Перем ТабицаКонтекстовОбработок;


Перем Winsock;
Перем WinSocket1;
Перем СтримAdobe;

Перем RegExp;

Перем КолСекундПростоя;
Перем БылиОшибкиЗапускаКукумбера;

Процедура Приостановить(Интервал)
	//Сообщить("Начало sleep...");
	НовЗнач = ТекущаяУниверсальнаяДатаВМиллисекундах() + Интервал;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < НовЗнач Цикл
		Продолжить;
	КонецЦикла; 
	//Сообщить("Окончание sleep...");
КонецПроцедуры


Функция ПерекодировкаДляОтправкиОшибки(Стр="",Кодировка="windows-1251") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="utf-8";
	СтримAdobe.Open();
	СтримAdobe.WriteText(Стр);
	СтримAdobe.Position=0;
	СтримAdobe.charset=Кодировка;
	Рез=СтримAdobe.ReadText(-1);
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции


Функция Перекодировка(Стр="",Кодировка="utf-8") 
    СтримAdobe.Type = 2;
	СтримAdobe.Mode= 3;
	СтримAdobe.charset="windows-1251";
	СтримAdobe.Open();
	Попытка
		СтримAdobe.WriteText(Стр);
		СтримAdobe.Position=0;
		СтримAdobe.charset=Кодировка;
		Рез=СтримAdobe.ReadText(-1);
	Исключение
		//перекодировка падает на invoke, видимо из-за разной кодировки строк
		Рез = Стр;
	КонецПопытки;
    СтримAdobe.Close();
    Возврат    Рез;
КонецФункции

Процедура СделатьGenerateEpf()
	ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(ПолучитьКаталогФич(КаталогПроекта,КаталогФич));
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера);
	Если БылиОшибкиЗапускаКукумбера Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	КонецЕсли;
	
	Если ОшибкаВнутриОбработкиВызоваBDD Тогда
		ПрерватьВыполнениеСкрипта("ОшибкаВнутриОбработкиВызоваBDD");
	КонецЕсли;
	
	Если GenerateEpf Тогда
		БылиОшибки = Ложь;
		СоздатьФайлыОбработок(БылиОшибки);
	КонецЕсли;
	
КонецПроцедуры


Процедура СделатьTestRun()
	ПросканироватьИсходникиИНайтиВсеStepDefinition();
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера);
	Если БылиОшибкиЗапускаКукумбера Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
	КонецЕсли;
	
	Если ОшибкаВнутриОбработкиВызоваBDD Тогда
		ПрерватьВыполнениеСкрипта("ОшибкаВнутриОбработкиВызоваBDD");
	КонецЕсли;
	
	
КонецПроцедуры


Процедура Инициализация()
	ИмяТекущейФичи       = "";
	МассивДляСозданияEpf = Новый Массив;
	МассивНайденыхФич    = Новый Массив;
	ШагСтрокДляМодуля    = 1000;
	
	ТаблицаИзвестныхStepDefinition = Новый ТаблицаЗначений;
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ИмяФайла");
	//ТаблицаИзвестныхStepDefinition.Колонки.Добавить("ТаблицаПроцедур");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Id");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	ТаблицаИзвестныхStepDefinition.Колонки.Добавить("Параметры");
	
	ТабицаКонтекстовОбработок = Новый ТаблицаЗначений;
	ТабицаКонтекстовОбработок.Колонки.Добавить("ИмяФайла");
	ТабицаКонтекстовОбработок.Колонки.Добавить("Обработка");
	
	ОшибкаВнутриОбработкиВызоваBDD = Ложь;
	
	АргументыКоманднойСтроки = Новый Массив;
	
КонецПроцедуры


Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Инициализация();
	
	БылиОшибкиЗапускаКукумбера = Ложь;
	WinSocket1 = ЭлементыФормы.WinSocket;
	//Сообщить("WinSocket1.State = " + WinSocket1.State);
	Если WinSocket1.State = 8 Тогда
		WinSocket1.Close();
	КонецЕсли;	 
	
	
	Если TestRun и GenerateEpf Тогда
		ВызватьИсключение "Нельзя одновременно ставить TestRun и GenerateEpf!";
	КонецЕсли;	 
	
	Если GenerateEpf Тогда
		СделатьGenerateEpf();
	КонецЕсли;	 
	
	
	Если TestRun Тогда
		СделатьTestRun();
	КонецЕсли;	 
	
	
	Возврат;
	
	WinSocket1 = ЭлементыФормы.WinSocket;
	WinSocket1.Listen();
	//WinSocket1.Connect();
КонецПроцедуры

Процедура WinSocketError(Элемент, Number, Description, Scode, Source, HelpFile, HelpContext, CancelDisplay)
	Сообщить(Description);
КонецПроцедуры

Процедура Таймер()
	КолСекундПростоя = КолСекундПростоя + 1;
	Если КолСекундПростоя >= 4 Тогда
		ОтключитьОбработчикОжидания("Таймер");
		АнализЛогаКукумбера(КаталогПроекта + "\CucumberConsolErr.txt",БылиОшибкиЗапускаКукумбера);
		Если БылиОшибкиЗапускаКукумбера Тогда
			Возврат;
		КонецЕсли;	 
		Если GenerateEpf Тогда
			БылиОшибки = Ложь;
			СоздатьФайлыОбработок(БылиОшибки);
			Если Не БылиОшибки Тогда
				Сообщить("Ошибок при создании обработок не было.");
			Иначе	
				Сообщить("Были ошибки при создании обработок.");
			КонецЕсли;	 
		КонецЕсли;
	КонецЕсли;	 
	//Сообщить("КолСекундПростоя = " + КолСекундПростоя);
КонецПроцедуры


Процедура WinSocketDataArrival(Элемент, bytesTotal)
	
 	ТкстСообщения = "";
    WinSocket1.GetData(ТкстСообщения);
	//Сообщить("1. " + ТкстСообщения);
	ТкстСообщения = Перекодировка(ТкстСообщения);
	Сообщить("Получено сообщение: " + ТкстСообщения);
	
	
	Приостановить(300);
	
	Результат = ОбработатьПараметрыВызоваBDD(ТкстСообщения);
	
	ЧтоВернем = Результат + Символы.ПС;
	WinSocket1.SendData(ЧтоВернем);
	
	
	КолСекундПростоя = 0;
	ПодключитьОбработчикОжидания("Таймер",1);
КонецПроцедуры

Процедура WinSocketConnect(Элемент)
	Сообщить("Покдлючение к " + Элемент.RemoteHost + " успешно.");
КонецПроцедуры

Процедура WinSocketConnectionRequest(Элемент, requestID)
	Сообщить("Запрос подключения");

    Сост = "Подключение";

    Если НЕ WinSocket1.State = 0 Тогда
        WinSocket1.Close()
    КонецЕсли;

    WinSocket1.Accept(requestID);

    Сообщить("Приконнектился "+WinSocket1.RemoteHostIP);
КонецПроцедуры

Процедура WinSocketSendComplete(Элемент)
	//Сообщить("-----------------------------------");
    //Сообщить("" + ТекущаяДата() + " |Отправка данных завершена! ");
	//Сообщить("-----------------------------------");
КонецПроцедуры

Процедура WinSocketClose(Элемент)
	Сообщить("WinSocketClose");
	//КолСекундПростоя = КолСекундПростоя + 10;
	//Таймер();
КонецПроцедуры


Процедура ЗаписатьВЖурнал(ТипСобытия, ТекстСобытия)
	Сообщить("" + ТекущаяДата() + " " + ТипСобытия +": " + ТекстСобытия);
КонецПроцедуры





Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition)
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
КонецПроцедуры



Функция ПолучитьStepDefinition(Знач Стр,args) 
	
	StepDefinition = "";
	args = "";
	ПараметрыЧисла  = Новый Массив;
	ПараметрыСтроки = Новый Массив;
	ПараметрыДаты   = Новый Массив;
	
	//найдём параметры строки
	RegExp.Pattern = "\'[^\']+\'"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПромСтр = Item.Value;
		Если Лев(ПромСтр,1) = "'" Тогда
			ПромСтр = Сред(ПромСтр,2);
		КонецЕсли;
		Если Прав(ПромСтр,1) = "'" Тогда
			ПромСтр = Лев(ПромСтр,СтрДлина(ПромСтр)-1);
		КонецЕсли;
		
		//ПромСтр = СтрЗаменить(ПромСтр,"\\","\");
		
		ПараметрыСтроки.Добавить(ПромСтр);
		//Сообщить("Item.Value строка = " + Item.Value);
	КонецЦикла;
	
	стр=RegExp.Replace(стр, "<ПараметрСтрока>"); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры даты
	RegExp.Pattern = "\d\d\.\d\d\.(\d\d\d\d|\d\d)"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыДаты.Добавить(Item.Value);
		//Сообщить("Item.Value дата = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, "<ПараметрДата>"); 
	
	//Сообщить("стр="+стр);
	
	
	
	//найдём параметры числа
	//RegExp.Pattern = "\d+"; 
	RegExp.Pattern = "[-+]?\b[0-9]*\.?[0-9]+\b"; 
	//RegExp.Pattern = "/^-{0,1}\d+\.{0,1}\d*$/"; 
	ПараметрыRegExp=RegExp.Execute(стр); 
	Для i=0 По ПараметрыRegExp.Count-1 Цикл
		Item = ПараметрыRegExp.Item(i);
		ПараметрыЧисла.Добавить(Item.Value);
		//Сообщить("Item.Value число = " + Item.Value);
	КонецЦикла;
	стр=RegExp.Replace(стр, "<ПараметрЧисло>"); 
	
	//Сообщить("стр="+стр);
	
	
	УбратьЗапрещенныеСимволыИзStepDefinition(стр);
	//стр = СтрЗаменить(Стр,":","");//надо убрать некоторые спец символы
	
	
	
	//разделим на слова
	//в VBScript нет метода Split, поэтому сделаем иначе
	RegExp.Pattern = "\s+"; 
	ПромСтр=RegExp.Replace(стр,"+|||+"); 
	//Сообщить("ПромСтр="+ПромСтр);
	
	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ПромСтр,"+|||+",Истина);
	КолПараметров       = 0;
	КолПараметровЧисло  = 0;
	КолПараметровСтрока = 0;
	КолПараметровДата   = 0;
	СтрокаПараметров = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		//Сообщить("Элем="+Элем);
		Если Элем = "<ПараметрСтрока>" Тогда
			КолПараметров       = КолПараметров       + 1;
			КолПараметровСтрока = КолПараметровСтрока + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			//Сообщить("ПараметрыСтроки[КолПараметровСтрока-1]=" + ПараметрыСтроки[КолПараметровСтрока-1]);
			args             = args + "{""val"":""{" + ПараметрыСтроки[КолПараметровСтрока-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрЧисло>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыЧисла[КолПараметровЧисло-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		Если Элем = "<ПараметрДата>" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата  + 1;
			
			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);
			args             = args + "{""val"":""{" + ПараметрыДаты[КолПараметровДата-1] + "}""}" + ",";
			Продолжить;
		КонецЕсли;
		
		StepDefinition = StepDefinition + СделатьПервуюБуквуЗаглавной(Элем);
	КонецЦикла;
	Если СтрокаПараметров <> "" Тогда
		СтрокаПараметров = Лев(СтрокаПараметров,СтрДлина(СтрокаПараметров)-1);//там лишняя запятая
	КонецЕсли;
	
	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);

	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";
	
	Если СтрДлина(args) > 0 Тогда
		args = Лев(args,СтрДлина(args)-1);//убрали запятую
	КонецЕсли;
	//Сообщить("args="+args);
	
	
	Возврат StepDefinition;
	//Сообщить(стр);
КонецФункции





Функция ЗагрузитьТелоМодуляВТаблицуЗначений(ПутьКФайлу)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Стр");
	
	НомСтр = 0;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		НомСтр = НомСтр + ШагСтрокДляМодуля;
		
		СтрТзн        = Тзн.Добавить();
		СтрТзн.НомСтр = НомСтр;
		СтрТзн.Стр    = Стр;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Тзн;
КонецФункции

Функция ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля)
	Если ТелоМодуля.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТелоМодуля[ТелоМодуля.Количество()-1].НомСтр;
КонецФункции

Процедура ДобавитьСтрокуВМодуль(ТелоМодуля,Стр)
	НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	
	СтрТелоМодуля = ТелоМодуля.Добавить();
	СтрТелоМодуля.НомСтр = НомСтр + ШагСтрокДляМодуля;
	СтрТелоМодуля.Стр    = Стр;
	
	
	//Сообщить("ТелоМодуля.Количество()=" + ТелоМодуля.Количество());
КонецПроцедуры

Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
		Сообщить("Создан каталог: " + Путь);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,ИмяФичи)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлОсноваОбработки,"UTF-8");

	
	ВременноеИмяФайла = ИмяФайлОсноваОбработки + "_Temp";
	ЗТ = Новый ЗаписьТекста(ВременноеИмяФайла,"UTF-8",,Истина); 
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Стр = СтрЗаменить(Стр,"TemplateEpf",ИмяФичи);
		Стр = СтрЗаменить(Стр,"Template epf",ИмяФичи);
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	
	УдалитьФайлы(ИмяФайлОсноваОбработки);
	ПереместитьФайл(ВременноеИмяФайла,ИмяФайлОсноваОбработки);
	
КонецПроцедуры

Процедура СоздатьФайлыОбработок(БылиОшибки)
		
	Для Каждого СтруктураОписанияEpf Из МассивДляСозданияEpf Цикл
		ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
		ТелоМодуля.Сортировать("НомСтр");
		
		СделатьСообщение("Буду записывать " + СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		//Продолжить;
		
		УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
		ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			//СделатьСообщение("СтрТелоМодуля.Стр = " + СтрТелоМодуля.Стр);
			ЗТ.ЗаписатьСтроку(СтрТелоМодуля.Стр); 
			//ЗТ.Записать(Символы.ПС); 
		КонецЦикла;
		ЗТ.Закрыть();
		СделатьСообщение("Записал " + СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		ИмяФайлаМодуляДляСборки = КаталогПроекта + "\lib\TemplateEpf\ObjectModule.txt";
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		ПереместитьФайл(СтруктураОписанияEpf.ВременноеИмяМодуля,ИмяФайлаМодуляДляСборки);
		СделатьСообщение("Переименовал в " + ИмяФайлаМодуляДляСборки);
		
		
		ИмяФайлОсноваОбработкиTemplate = КаталогПроекта + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a_template";
		ИмяФайлОсноваОбработки         = КаталогПроекта + "\lib\TemplateEpf\und\79a499cc-1782-4a2f-abe7-61ea4d49fd5a";
		
		КопироватьФайл(ИмяФайлОсноваОбработкиTemplate,ИмяФайлОсноваОбработки);
		ЗаменитьСтрокиВФайлеОсновыОбработки(ИмяФайлОсноваОбработки,СтруктураОписанияEpf.ИмяФичи);
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ИмяФайлаEpf);
		СоздатьКаталогЕслиЕгоНет(Файл.Путь);
		
		Если Файл.Существует() Тогда
			УдалитьФайлы(Файл.ПолноеИмя);
		КонецЕсли;	 
		
		СтрокаСборкиEpf = КаталогПроекта + "\vendor\precommit1c\pyv8unpack.py --compile " +  КаталогПроекта + "\lib\TemplateEpf " + СтруктураОписанияEpf.ИмяФайлаEpf;
		Сообщить("СтрокаСборкиEpf="+СтрокаСборкиEpf);
		
		//retCode = "";
		//ЗапуститьПриложение(СтрокаСборкиEpf,,Истина,retCode);
		КомандаСистемы(СтрокаСборкиEpf);
		Если Файл.Существует() Тогда
			Сообщить("Файл " + Файл.ПолноеИмя + " создан.");
		Иначе	
			Сообщить("Ошибка создания файла " + Файл.ПолноеИмя + "!!!");
			БылиОшибки = Истина;
		КонецЕсли;	 
		//Сообщить("retCode=" + retCode);
		УдалитьФайлы(ИмяФайлаМодуляДляСборки);
		УдалитьФайлы(ИмяФайлОсноваОбработки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры)
	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	ТелоМодуля.Сортировать("НомСтр");
	
	УжеЕсть = Ложь;
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = СокрЛП(СтрТелоМодуля.Стр);
		Если Лев(Стр,3) = "//@" Тогда //так определяется StepDefinition
			Если Найти(Стр,StepDefinition) > 0 Тогда
				УжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеЕсть Тогда
		Возврат;
	КонецЕсли;
	
	//НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);
	
	//Возврат;
	
	ДобавитьСтрокуВМодуль(ТелоМодуля,"//" + ПримерИспользованияПроцедуры);
	ДобавитьСтрокуВМодуль(ТелоМодуля,"//@" + StepDefinition);
	ДобавитьСтрокуВМодуль(ТелоМодуля,"Процедура " + StepDefinition + " Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"	ВызватьИсключение ""Не реализовано."";");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"");
	
КонецПроцедуры

Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля)
	//ДобавитьСтрокуВМодуль(ТелоМодуля,"Перем Контекст Экспорт;");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"Процедура ПередНачаломСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"Процедура ПередОкончаниемСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"	");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля,"");
КонецПроцедуры

Процедура СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи)
	Файл = Новый Файл(КаталогПроекта + "\lib\TemplateEpf");
	Если Не Файл.Существует() Тогда
		Сообщить("Не найден служебный каталог \lib\TemplateEpf !!!");
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейФичи = "" Тогда
		Сообщить("Не определилась текущая фича из тегов feature файла.");
		Возврат;
	КонецЕсли;
	
	СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
	Если СтруктураОписанияEpf = Неопределено Тогда
		СтруктураОписанияEpf                    = СоздатьПустуюСтруктуруEpf();
		СтруктураОписанияEpf.ИмяФичи            = ИмяТекущейФичи;
		СтруктураОписанияEpf.ИмяФайлаEpf        = КаталогПроекта + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + ".epf";
		СтруктураОписанияEpf.ИмяМодуляEpf       = КаталогПроекта + "\src" + ОтносительныйКаталогФичи + "\step_definitions\" + ИмяТекущейФичи + "\ObjectModule.txt";
		СтруктураОписанияEpf.ВременноеИмяМодуля = КаталогПроекта + "\lib\TemplateEpf\Temp\ObjectModule_" + ИмяТекущейФичи + ".txt";
		
		//Сообщить("СтруктураОписанияEpf.ИмяМодуляEpf="+СтруктураОписанияEpf.ИмяМодуляEpf);
		
		
		УдалитьФайлы(СтруктураОписанияEpf.ВременноеИмяМодуля);
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ВременноеИмяМодуля);
		Если Не Файл.Существует() Тогда
			//Сообщить(СтруктураОписанияEpf.ВременноеИмяМодуля);
			ЗТ = Новый ЗаписьТекста(СтруктураОписанияEpf.ВременноеИмяМодуля,"UTF-8",,Истина); 
			ЗТ.Закрыть();
		КонецЕсли;
		
		
		Файл = Новый Файл(СтруктураОписанияEpf.ИмяМодуляEpf); //значит надо загрузить модуль из исходников
		Если Файл.Существует() Тогда
			СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ИмяМодуляEpf);
		Иначе
			СтруктураОписанияEpf.ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(СтруктураОписанияEpf.ВременноеИмяМодуля);
			//значит создаём файл первый разделим
			ДобавитьНачальноеЗаполнениеВМодуль(СтруктураОписанияEpf.ТелоМодуля);
		КонецЕсли;
		
		
		
		
		МассивДляСозданияEpf.Добавить(СтруктураОписанияEpf);
		СделатьСообщение("Добавляю фичу " + СтруктураОписанияEpf.ИмяФичи + " в МассивДляСозданияEpf.");
	КонецЕсли;
	
	
	
КонецПроцедуры











Процедура ВызватьМетод(Обработка, ИмяПроцедуры, МассивАргументов);
	Команда = "Обработка." + ИмяПроцедуры + "(";
	
	Для Ккк = 0 По МассивАргументов.Количество()-1 Цикл
		Элем = МассивАргументов[Ккк];
		Команда = Команда + Элем;
		Если Ккк < МассивАргументов.Количество()-1 Тогда
			Команда = Команда + ",";
		КонецЕсли;	 
	КонецЦикла;
	
	Команда = Команда + ")";
	
	Сообщить("Выполняю: " + Команда);
	Выполнить(Команда);
КонецПроцедуры


Функция ВыполнитьПроцедуруОбработки(ИмяФайла,ИмяПроцедуры,Параметры = Неопределено)
	//Если DebugLog Тогда
	//	Сообщить("ВыполнитьПроцедуруОбработки");
	//	Сообщить("ИмяФайла="+ИмяФайла);
	//	Сообщить("ИмяПроцедуры="+ИмяПроцедуры);
	//КонецЕсли;
	//Если Параметры = Неопределено Тогда
	//	Сообщить("Параметры=Неопределено");
	//Иначе	
	//	Сообщить("Параметры.Количество()="+Параметры.Количество());
	//	Для Каждого Элем Из Параметры Цикл
	//		Сообщить("Элем+1 = " + (Элем+1));
	//	КонецЦикла;
	//КонецЕсли;
	
	СтрокаВозврата = "[""success""]";
	
	//Рефлектор = Новый Рефлектор();
	//Рефлектор = "";
	МассивАргументов = Новый Массив;
	Если Параметры <> Неопределено Тогда
		МассивАргументов = Параметры;
	КонецЕсли;
	
	СтрТабицаКонтекстовОбработок = ТабицаКонтекстовОбработок.Найти(ИмяФайла,"ИмяФайла");
	Если СтрТабицаКонтекстовОбработок = Неопределено Тогда
		ПрерватьВыполнениеСкрипта("В таблице ТабицаКонтекстовОбработок не найден файл " + ИмяФайла);
	КонецЕсли;
	
	Попытка
		СтрТабицаКонтекстовОбработок.Обработка.Контекст = ОбъектКонтекст;
		ВызватьМетод(СтрТабицаКонтекстовОбработок.Обработка, ИмяПроцедуры, МассивАргументов);
	Исключение
		Если DebugLog Тогда
			Сообщить("ОписаниеОшибки()="+ОписаниеОшибки());
		КонецЕсли;
		ОписаниеОшибкиСтр = ОписаниеОшибки();
		Если Найти(ОписаниеОшибкиСтр,"}: Не реализовано.") > 0 Тогда //тогда это Pending
			СтрокаВозврата = "[""pending"", ""I'll do it later""]";
		Иначе
			//значит возникла ошибка
			СтрОшибка = СформироватьОписаниеОшибки(ОписаниеОшибки(),ИмяФайла,ИмяПроцедуры);
			Сообщить(СтрОшибка);
			СтрОшибка = ПерекодировкаДляОтправкиОшибки(СтрОшибка);
			СтрокаВозврата = "[""fail"",{""message"":""" + СтрОшибка + """}]";
		КонецЕсли;
	КонецПопытки;
	
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ПС,"");
	//СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВК,"");
	
	//Поз = Найти(СтрокаВозврата,Символы.ПС);
	//Если Поз > 0 Тогда
	//	Сообщить("Обнаружен перевод строки.");
	//КонецЕсли;
	
	Возврат СтрокаВозврата;
КонецФункции




Функция СделатьInvoke(ИмяМетода,ЗначенияПараметров)
	СтрокаВозврата = "";
	
	
	//Сообщить("Invoke: ИмяМетода=" + ИмяМетода);
	//Сообщить("Invoke: ЗначенияПараметров=" + ЗначенияПараметров);
	
	СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Найти(ИмяМетода,"ID");
	Если СтрТаблицаИзвестныхStepDefinition = Неопределено Тогда
		СтрокаВозврата = СтрокаВозврата = "[""fail"",{""message"":""" + "В epf файлах фич не обнаружен снипет:" + ИмяМетода + """}]";
		Возврат СтрокаВозврата;
	КонецЕсли;
	
	МассивПараметров = РазобратьСтрокуЗначенийПараметров(ЗначенияПараметров,СтрТаблицаИзвестныхStepDefinition.Параметры);
	//Сообщить(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
	//в этом файле мы будем запускать данный шаг
	
	СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
	Поз = Найти(СтрокаРеальнойПроцедуры,"(");
	Если Поз > 0 Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,Поз-1);
	КонецЕсли;
	
	СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтрокаРеальнойПроцедуры,МассивПараметров);
	
	Возврат СтрокаВозврата;
КонецФункции

Функция ОбработатьПараметрыВызоваBDD(СтрокаВызова)
	//Если DebugLog Тогда
	//	ЗаписатьВЖурнал("INFO", "Получен вызов BDD:" + СтрокаВызова);
	//КонецЕсли;	
	
	СтрокаВозврата = "[""success""]";
	//СтрокаВозврата = "[""success"",[{""id"":""1"", ""args"":[]}]]";
	
	StepDefinition               = "";
	ПолезноеЗначение             = "";
	ПримерИспользованияПроцедуры = "";
	ПромСтр = СтрокаВызова;
	Если Это_step_matches_name_to_match(ПромСтр,ПолезноеЗначение) Тогда
		//Сообщить("ПолезноеЗначение="+ПолезноеЗначение);
		args = "";
		//Сообщить("ПолезноеЗначение=" + ПолезноеЗначение);
		Если Найти(ПолезноеЗначение,"[") > 0 Тогда
			ПрерватьВыполнениеСкрипта("Не верное определение имени фичи: " + ПолезноеЗначение);
		КонецЕсли;
		StepDefinition = ПолучитьStepDefinition(ПолезноеЗначение,args);
		ПримерИспользованияПроцедуры   = ПолезноеЗначение;
		Сообщить("StepDefinition="+StepDefinition);
		
		СтрокаВозврата = "[""success"",[{""id"":""" + StepDefinition + """, ""args"":[" + args +"]}]]";
	КонецЕсли;
	
	ИмяФ                     = "";
	ОтносительныйКаталогФичи = "";
	ПромСтр                  = СтрокаВызова;
	Если Это_begin_scenario_tags(ПромСтр,ИмяФ,ОтносительныйКаталогФичи) Тогда
		Если ИмяТекущейФичи <> ИмяФ Тогда
			ИмяТекущейФичи = ИмяФ;
			Если TestRun Тогда
				ОбъектКонтекст = Новый Структура;//контекст один на всю фичу, а не на весь сценарий (в фиче может быть много сценариев)
			КонецЕсли;
			СоздатьИлиДополнитьСтруктурыДляEpfФайлов(ОтносительныйКаталогФичи);
		КонецЕсли;
		
		
		//СтрокаВозврата = "[""success""]";
		Если TestRun Тогда
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
			СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтруктураОписанияEpf.ИмяФайлаEpf,"ПередНачаломСценария");
		КонецЕсли;
		Если DebugLog Тогда
			Сообщить("ИмяТекущейФичи="+ИмяТекущейФичи + ", ОтносительныйКаталогФичи="+ОтносительныйКаталогФичи);
		КонецЕсли;
	КонецЕсли;
	
	ПромСтр = СтрокаВызова;
	Если Это_end_scenario_tags(ПромСтр) Тогда
		Если TestRun Тогда
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
			СтрокаВозврата = ВыполнитьПроцедуруОбработки(СтруктураОписанияEpf.ИмяФайлаEpf,"ПередОкончаниемСценария");
		КонецЕсли;
		//СтрокаВозврата = "[""success""]";
	КонецЕсли;
	
	ПромСтр            = СтрокаВызова;
	ИмяМетода          = "";
	ЗначенияПараметров = "";
	Если Это_invoke(ПромСтр,ИмяМетода,ЗначенияПараметров) Тогда
		Если TestRun Тогда
			СтрокаВозврата = СделатьInvoke(ИмяМетода,ЗначенияПараметров);
		Иначе
			СтрокаВозврата = "[""pending"", ""I'll do it later""]";
		КонецЕсли;
	КонецЕсли;
	
	//Возврат "[""error1"",[]]";
	//СтрокаВозврата = "qqq";
	Сообщить("СтрокаВозврата="+СтрокаВозврата);
	//sleep(1500);
	
	Если GenerateEpf Тогда
		//СоздатьИлиДополнитьСтруктурыДляEpfФайлов(StepDefinition,ПримерИспользованияПроцедуры,ОтносительныйКаталогФичи);
		Если StepDefinition <> "" Тогда
			СтруктураОписанияEpf = НайтиФичуВМассиве(ИмяТекущейФичи,МассивДляСозданияEpf);
			ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf,StepDefinition,ПримерИспользованияПроцедуры);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаВозврата;
КонецФункции


Функция ЕстьПараметр(МассивПараметрыЗапуска,ИмяПараметра) 
	Для каждого Элем Из МассивПараметрыЗапуска Цикл
		Если НРег(Элем) = НРег(ИмяПараметра) Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции 

Функция ПолучитьЗначениеПараметраЗапуска(МассивПараметрыЗапуска,ИмяПараметра)
	Сч = 0;
	Для каждого Элем Из МассивПараметрыЗапуска Цикл
		Сч = Сч + 1;
		Если Лев(Элем,СтрДлина(ИмяПараметра)) = ИмяПараметра Тогда
			Возврат Сред(Элем,СтрДлина(ИмяПараметра)+1);
			//Если МассивПараметрыЗапуска.Количество() > Сч Тогда
			//	Возврат МассивПараметрыЗапуска[Сч];//здесь -1 писать не надо
			//КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции






Процедура ПроставитьТегВФичу(ПутьКФайлу)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");


	Файл = Новый Файл(ПутьКФайлу);
	ИмяФичи = "@[ИмяФичи]=" + Файл.ИмяБезРасширения + ";" + УбратьКаталогПроекта(Файл.Путь,КаталогПроекта);
	
	
	НадоПерезаписатьТег   = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Лев(СокрЛП(Стр),1) = "@" Тогда 
			Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
				Если Стр <> ИмяФичи Тогда
					НадоПерезаписатьТег = Истина;
				КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	Текст.Закрыть();
	
	Если Не НадоПерезаписатьТег Тогда
		Возврат;
	КонецЕсли;
	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");
	
	ИмяТемпФайла = ПутьКФайлу + "Temp";
	УдалитьФайлы(ИмяТемпФайла);
	
	ЗТ = Новый ЗаписьТекста(ИмяТемпФайла,"UTF-8",,Истина); 
	
	ДобавитьТегСледующейСтрокой = Ложь;
	УжеЗаписывалТег             = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НадоПерезаписатьТег Тогда 
			Если Лев(СокрЛП(Стр),1) = "@" Тогда 
				Если Найти(Стр,"[ИмяФичи]") > 0 Тогда 
					//Файл = Новый Файл(ПутьКФайлу);
					Стр = ИмяФичи;
				КонецЕсли;	 
			КонецЕсли;	 
		Иначе	
			Если (Лев(СокрЛП(Стр),1) <> "#") и (СтрДлина(СокрЛП(Стр)) > 0) Тогда 
				ДобавитьТегСледующейСтрокой = Истина;
			КонецЕсли;	
		КонецЕсли;	 
		
		
		Если ДобавитьТегСледующейСтрокой и (Не УжеЗаписывалТег) Тогда 
			//Файл = Новый Файл(ПутьКФайлу);
			СтрФича = ИмяФичи;
			ЗТ.Записать(СтрФича); 
			ЗТ.Записать(Символы.ПС); 
			ЗТ.Записать(Символы.ПС); 
			
			ДобавитьТегСледующейСтрокой = Ложь;
			УжеЗаписывалТег = Истина;
		КонецЕсли;	 
		
		ЗТ.Записать(Стр); 
		ЗТ.Записать(Символы.ПС); 
	КонецЦикла;
	
	ЗТ.Закрыть();
	Текст.Закрыть();
	УдалитьФайлы(ПутьКФайлу);
	ПереместитьФайл(ИмяТемпФайла,ПутьКФайлу);
	
КонецПроцедуры

Процедура ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(НачальныйКаталог)
	//Сообщить("НачальныйКаталог= " + НачальныйКаталог);
	МассивФайлов = НайтиФайлы(НачальныйКаталог,"*.feature",Истина);
	Для Каждого Элем Из МассивФайлов Цикл
		//Сообщить("Найден файл " + Элем.Имя);
		ПроставитьТегВФичу(Элем.ПолноеИмя);
		
		СтруктураФичи = Новый Структура;
		СтруктураФичи.Вставить("ИмяФичи",Элем.ИмяБезРасширения);
		СтруктураФичи.Вставить("ПолныйПуть",Элем.Путь);
		
		//Стр = СтрЗаменить(СтруктураФичи.ПолныйПуть,КаталогПроекта);
		
		
		МассивНайденыхФич.Добавить(СтруктураФичи);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСледующуюСтрокуМодуля(СтрТзн,Тзн)
	Индекс = Тзн.Индекс(СтрТзн);
	Если Индекс = Тзн.Количество()-1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тзн.Получить(Индекс+1);
КонецФункции

Процедура ДобавитьСнипет(Знач ID,Знач СтрокаРеальнойПроцедуры,Знач ИмяФайла,БылиОшибки)
	
	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);
	
	//уберем слово "Экспорт"
	Если Прав(НРег(СтрокаРеальнойПроцедуры),7) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры)-7);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;
	
	Если Лев(НРег(СтрокаРеальнойПроцедуры),9) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры,10));
	КонецЕсли;
	
	//Сообщить("ID="+ID);
	//Сообщить("СтрокаРеальнойПроцедуры="+СтрокаРеальнойПроцедуры);
	//Сообщить("ИмяФайла="+ИмяФайла);
	
	Поз = Найти(ID,"(");
	СтрПараметры = Сред(ID,Поз+1);
	СтрПараметры = Лев(СтрПараметры,СтрДлина(СтрПараметры)-1);
	
	//Сообщить("СтрПараметры="+СтрПараметры);
	
	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем),"число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем),"дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип",Тип);
		МассивПараметров.Добавить(СтруктураПарам);
		
		//Сообщить("Тип="+Тип + ", Элем=" + Элем);
	КонецЦикла;
	
	ПромСтр = ТаблицаИзвестныхStepDefinition.Найти(ID,"ID");
	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		Сообщить("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;
	
	СтрТаблицаИзвестныхStepDefinition                         = ТаблицаИзвестныхStepDefinition.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
КонецПроцедуры

Функция СоздатьПустуюТаблицуПроцедур()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ID");
	Тзн.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	Тзн.Колонки.Добавить("Параметры");
	Возврат Тзн;
КонецФункции


Процедура ПросканироватьИсходникиИНайтиВсеStepDefinition()
	БылиОшибки = Ложь;
	НачальныйКаталог = ПолучитьКаталогФич(КаталогПроекта,КаталогФич);
	//Сообщить("НачальныйКаталог="+НачальныйКаталог);
	МассивФайлов = НайтиФайлы(НачальныйКаталог,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		СтрТабицаКонтекстовОбработок           = ТабицаКонтекстовОбработок.Добавить();
		СтрТабицаКонтекстовОбработок.ИмяФайла  = Файл.ПолноеИмя;
		СтрТабицаКонтекстовОбработок.Обработка = ВнешниеОбработки.Создать(СтрТабицаКонтекстовОбработок.ИмяФайла);
		
		//Рефлектор = Новый Рефлектор();
		//МассивАргументов = Новый Массив;
		//МассивАргументов.Добавить(1);
		//МассивАргументов.Добавить("фывфывфывфы");
		//Рефлектор.ВызватьМетод(СтрТабицаКонтекстовОбработок.Обработка, "ПередНачаломСценария", МассивАргументов);
		
		//СтрТаблицаИзвестныхStepDefinition                 = ТаблицаИзвестныхStepDefinition.Добавить();
		//СтрТаблицаИзвестныхStepDefinition.ИмяФайла        = Файл.ПолноеИмя;
		//СтрТаблицаИзвестныхStepDefinition.ТаблицаПроцедур = СоздатьПустуюТаблицуПроцедур();
		
		Сообщить("Путь="+Файл.ПолноеИмя);
		Стр = Файл.Путь;
		Стр = СтрЗаменить(Стр,КаталогПроекта,КаталогПроекта + "\Src");
		Стр = Стр + "" + Файл.ИмяБезРасширения + "\ObjectModule.txt";
		//Сообщить("Стр="+Стр);
		
		ФайлМодуль = Новый Файл(Стр);
		Если Не ФайлМодуль.Существует() Тогда
			ПрерватьВыполнениеСкрипта("Файл " + Стр + " не найден! Не могу найти StepDefinition.");
		КонецЕсли;
		
		ТелоМодуля = ЗагрузитьТелоМодуляВТаблицуЗначений(Стр);
		
		Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
			Если Лев(СтрТелоМодуля.Стр,3) = "//@" Тогда
				СледСтрока = ПолучитьСледующуюСтрокуМодуля(СтрТелоМодуля,ТелоМодуля);
				Если СледСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ДобавитьСнипет(Сред(СтрТелоМодуля.Стр,4),СледСтрока.Стр,Файл.ПолноеИмя,БылиОшибки);
				//Сообщить("" + СтрТелоМодуля.Стр);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибки Тогда
		ПрерватьВыполнениеСкрипта("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;
КонецПроцедуры

Процедура ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера)
	Сервер = "";
	//Сервер = Новый TCPСервер(54321);
	//Сервер.Запустить();
	
	
	
	
	
	
	
	//Путь = "E:\commons\Rep\cuke4onec\cuke4onec.epf";
	//Путь = КаталогПроекта + "\cuke4onec.epf";
	//cuke4onec = ОЛЕ.ExternalDataProcessors.Create(Путь);
	
	//StepsDir = "E:\commons\Rep\cuke4onec\features\step_definitions";
	//StepsDir = КаталогПроекта + "\features\step_definitions";
	//cuke4onec._Create(StepsDir);
	//cuke4onec._Purge();
	
	//СтрокаЗапускаКукумбер = "Cucumber --dry-run --no-snippets """ + КаталогПроекта + "\features"" > " + КаталогПроекта + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets  """ + КаталогПроекта + "\features"" > " + КаталогПроекта + "\CucumberConsoleLog.txt";
	//СтрокаЗапускаКукумбер = "Cucumber  --no-snippets """ + КаталогПроекта + "\features""";
	
	
	//СтрокаЗапускаКукумбер = "Cucumber --no-snippets --no-color """ + КаталогПроекта + "\features"" > " + КаталогПроекта + //"\CucumberConsoleLog.txt" + " 2>" + КаталогПроекта + "\CucumberConsolErr.txt";
	
	
	СтрокаЗапускаКукумбер = "cucumber --no-snippets -r " + КаталогПроекта + "\host.wire """ + ПолучитьКаталогФич(КаталогПроекта,КаталогФич) + """ > " + КаталогПроекта + "\CucumberConsoleLog.txt" + " 2>" + КаталогПроекта + "\CucumberConsolErr.txt";
	//СтрокаЗапускаКукумбер = "cucumber """ + КаталогПроекта + "\features"" ";

	WinSocket1 = ЭлементыФормы.WinSocket;
	WinSocket1.Listen();
	ЗаписатьВЖурнал("INFO", "Жду соединения");

	Сообщить("Строка для запуска Cucumber: " + СтрокаЗапускаКукумбер);
	УдалитьФайлы(КаталогПроекта + "\CucumberConsolErr.txt");
	
	ИмяCmd = ПолучитьИмяВременногоФайла("cmd");
	УдалитьФайлы(ИмяCmd);
	ЗТ = Новый ЗаписьТекста(ИмяCmd,"UTF-8",,Истина); 
	ЗТ.ЗаписатьСтроку(СтрокаЗапускаКукумбер); 
	ЗТ.Закрыть();
	
	
	
	КомандаСистемы("start cmd.exe /c " + ИмяCmd);
	//КомандаСистемы("cmd E:\commons\Rep\Test.cmd");
	

	
	Возврат;
	
	
	
	ТаймаутОжидатьСоединения = 7000;
	Соединение = Сервер.ОжидатьСоединения(ТаймаутОжидатьСоединения);
	Если Соединение = Неопределено Тогда
		ПрерватьВыполнениеСкрипта("Не дождался сеанса обемена с Cucumber. ТаймаутОжидатьСоединения=" + ТаймаутОжидатьСоединения);
	КонецЕсли;

	
	//Соединение.ТаймаутЧтения   = 1;
	//Соединение.ТаймаутОтправки = 1;
	
	ЗаписатьВЖурнал("INFO", "Есть соединение");
	ЗаписатьВЖурнал("INFO", "-------------------------------------");
	
	
	Пока Истина Цикл
		
		Попытка
			
			//Стр = НакопитьСтроку(Соединение);
			Стр = "";
			Если DebugLog Тогда
				Сообщить("Получили " + СтрДлина(Стр) + " символов.");
				Если СтрДлина(Стр) = 1 Тогда //значит произошла ошибка при обмене
					ОшибкаВнутриОбработкиВызоваBDD = Истина;
					ПрерватьВыполнениеСкрипта("Пришла строка длины 1.");
				КонецЕсли;
			КонецЕсли;	
			Данные = СокрЛП(Стр);
			
			Если СтрДлина(Данные) = 0 Тогда
				Сообщить("Завершен сеанс работы с Cucumber");
				Прервать;
			КонецЕсли;
			
			Если СтрДлина(Данные) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОшибкаВнутриОбработкиВызоваBDD = Истина;
			Результат = ОбработатьПараметрыВызоваBDD(Данные);
			ОшибкаВнутриОбработкиВызоваBDD = Ложь;
			
			//ЗаписатьВЖурнал("INFO", "Отправляю данные в ответ");
			//ЧтоВернем = Результат + Символы.ПС;
			ЧтоВернем = Результат + "
			|";
			//Сообщить(ЧтоВернем);
			Попытка
				//sleep(400);
				Соединение.ОтправитьСтроку(ЧтоВернем, "utf-8");
			Исключение
				Сообщить("Не удалось отправить данные. Соединение с Cucumber разорвано");
				Прервать;
			КонецПопытки;
			//Соединение.ОтправитьСтроку(Символы.ПС, "utf-8");
		Исключение
			Сообщить("##" + ОписаниеОшибки());
			Прервать;
		КонецПопытки;
		
		ЗаписатьВЖурнал("INFO", "-------------------------------------");
	КонецЦикла;
	
	Соединение.Закрыть();
	Сервер.Остановить();
	//ОЛЕ.ЗавершитьРаботуСистемы();
	
	АнализЛогаКукумбера(КаталогПроекта + "\CucumberConsolErr.txt",БылиОшибкиЗапускаКукумбера);
	
КонецПроцедуры

Процедура АнализЛогаКукумбера(ИмяФайла,БылиОшибкиЗапускаКукумбера)
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		БылиОшибкиЗапускаКукумбера = Истина;
		Сообщить("Не найден файл " + ИмяФайла);
		Возврат;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	НайденаОшибка = Ложь;
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если НРег(Лев(Стр,12)) = НРег("*** WARNING:") Тогда
			Продолжить;
		КонецЕсли;
	
		БылиОшибкиЗапускаКукумбера = Истина;
		Сообщить("Обнаружена ошибка Cucumber.");
		Сообщить(Стр);
		НайденаОшибка = Истина;
		Прервать;// ошибка содержится в первой строке
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Если Не НайденаОшибка Тогда
		Сообщить("Ошибок в логе Cucumber не найдено.");
	КонецЕсли;	 
КонецПроцедуры

//Функция НакопитьСтроку(Знач Соединение)
//	
//	Стр = "";
//	СчетчикПопыток = 0;
//	Интервал = 100;
//	Пока Истина Цикл
//		Порция = Соединение.ПрочитатьСтроку("utf-8");
//		
//		//Если DebugLog Тогда
//		//	Сообщить("Получили порцию:" + Порция);
//		//КонецЕсли;
//		Стр = Стр + Порция;
//		Если Прав(Порция, 1) = Символы.ПС Тогда
//			Прервать;
//		КонецЕсли;
//		
//		Если СчетчикПопыток > 4 Тогда
//			Прервать;
//		КонецЕсли;
//		
//		СчетчикПопыток = СчетчикПопыток + 1;
//		
//		//Если DebugLog Тогда
//		//	Сообщить("Нет признака окончания. Ждем:" + Интервал);
//		//КонецЕсли;
//		
//		Приостановить(Интервал);
//		Интервал = Интервал * 2;
//		
//	КонецЦикла;
//	
//	Возврат Стр;
//	
//КонецФункции

Процедура ПриЗакрытии()
	WinSocket1 = ЭлементыФормы.WinSocket;
	WinSocket1.Close();
КонецПроцедуры

Процедура ОсновныеДействияФормыНачатьЗапись(Кнопка)
	ОбъектКонтекст.ТестируемоеПриложение.НачатьЗаписьЖурналаДействийПользователя();
КонецПроцедуры

Процедура ОсновныеДействияФормыОстановитьЗапись(Кнопка)
	Стр = ОбъектКонтекст.ТестируемоеПриложение.ЗавершитьЗаписьЖурналаДействийПользователя();
	
	
	ПутьКОбработке = КаталогПроекта + "\vendor\1C\UILogToScript.epf";
	Файл = Новый Файл(ПутьКОбработке);
	Если Файл.Существует() Тогда
		Обработка = ВнешниеОбработки.Создать(ПутьКОбработке); 
		Результат = Обработка.Convert(Стр);
		ОчиститьСообщения();
		Сообщить(Результат);
	Иначе	
		Сообщить(Стр);
	КонецЕсли;	 
	
КонецПроцедуры


WinSocket1 = ЭлементыФормы.WinSocket;
СтримAdobe = Новый COMОбъект("Adodb.Stream");

RegExp            = Новый COMОбъект("VBScript.RegExp");
RegExp.IgnoreCase = Ложь; //Игнорировать регистр
RegExp.Global     = Истина; //Поиск всех вхождений шаблона
RegExp.MultiLine  = Ложь; //Многострочный режим







//Если АргументыКоманднойСтроки.Количество() = 0 Тогда
//	СделатьСообщение("Не переданы параметры для запуска!");
//	//ЗавершитьРаботу(1);
//ИначеЕсли  АргументыКоманднойСтроки.Количество() >= 1 Тогда
//	//МассивПараметрыЗапуска = РазложитьСтрокуВМассивПодстрок(АргументыКоманднойСтроки[0], ";");
//	//Для Каждого Элем Из АргументыКоманднойСтроки Цикл
//	//	Сообщить(Элем);
//	//КонецЦикла;
//	
//	КаталогПроекта         = ПолучитьЗначениеПараметраЗапуска(АргументыКоманднойСтроки,"--ProjectPath=");
//	СтрокаПодключенияКБазе = ПолучитьЗначениеПараметраЗапуска(АргументыКоманднойСтроки,"--1cConnectString=");
//	GenerateEpf            = ЕстьПараметр(АргументыКоманднойСтроки,"--GenerateEpf");
//	TestRun                = ЕстьПараметр(АргументыКоманднойСтроки,"--TestRun");
//	DebugLog               = ЕстьПараметр(АргументыКоманднойСтроки,"--DebugLog");
//	
//	Если СокрЛП(КаталогПроекта) = "" Тогда
//		Сообщить("Используется текущий каталог в качестве каталога проекта");
//		//КаталогПроекта = ТекущийКаталог();
//		ВызватьИсключение "Не определен текущий каталог!";
//		//ПрерватьВыполнениеСкрипта("Не указан каталог проекта: ProjectPath");
//	КонецЕсли;
//	
//	Если СокрЛП(СтрокаПодключенияКБазе) = "" Тогда
//		Сообщить("Используется адрес подключения к сервисной базе ibService");
//		//СтрокаПодключенияКБазе = "File=" + _ВКЧ(ТекущийКаталог()+ "\.git\hooks\ibService\");
//		
//		ВызватьИсключение "Не определена сервисная база!";
//		//ПрерватьВыполнениеСкрипта("Не указана строка подключения к 1С: 1cConnectString");
//	КонецЕсли;
//	
//	Сообщить("КаталогПроекта = " + КаталогПроекта);
//	Сообщить("СтрокаПодключенияКБазе = " + СтрокаПодключенияКБазе);
//	Сообщить("GenerateEpf = " + GenerateEpf);
//	Сообщить("TestRun = " + TestRun);
//	Сообщить("DebugLog = " + DebugLog);
//	
//	//ПрерватьВыполнениеСкрипта("Тест");
//	
//	Если GenerateEpf И TestRun Тогда
//		ПрерватьВыполнениеСкрипта("Нельзя указывать одновременно GenerateEpf и TestRun.");
//	КонецЕсли;
//Иначе
//	ПрерватьВыполнениеСкрипта("Неверное число параметров. (" + АргументыКоманднойСтроки.Количество() + ") Должен быть 1.");
//КонецЕсли;

//Если TestRun Тогда
//	ОЛЕ = Новый COMObject("V83.Application");
//	Получилось = ОЛЕ.Connect(СтрокаПодключенияКБазе);
//	ОЛЕ.Visible = Истина;
//	Сообщить("Получилось подключиться = " + Получилось);
//	Если Не Получилось Тогда
//		ПрерватьВыполнениеСкрипта("Не смогли подключиться к базе 1С.");
//	КонецЕсли;
//	
//	ПросканироватьИсходникиИНайтиВсеStepDefinition();
//	//ОЛЕ.ЗавершитьРаботуСистемы();
//	//ПрерватьВыполнениеСкрипта("Тест");
//КонецЕсли;


//Если  АргументыКоманднойСтроки.Количество() > 0 Тогда
//	ОбработатьFeatureФайлыЧтобыПроставитьТегиСИменемФичиИЗаполнитьМассивНайденыхФич(КаталогПроекта + "\features");
//	
//	БылиОшибкиЗапускаКукумбера = Ложь;
//	ЗапуститьСерверДляКукумбера(БылиОшибкиЗапускаКукумбера);
//	Если БылиОшибкиЗапускаКукумбера Тогда
//		ПрерватьВыполнениеСкрипта("Были ошибки запуска кукумбера!");
//	КонецЕсли;
//	
//	Если ОшибкаВнутриОбработкиВызоваBDD Тогда
//		ПрерватьВыполнениеСкрипта("ОшибкаВнутриОбработкиВызоваBDD");
//	КонецЕсли;
//	
//	Если GenerateEpf Тогда
//		СоздатьФайлыОбработок();
//	КонецЕсли;
//	
//	
//	Если TestRun Тогда
//		//ОЛЕ.ЗавершитьРаботуСистемы();
//	КонецЕсли;
//КонецЕсли;	 







